<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/ProductoStockViewModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ProductoStockViewModel.java" />
              <option name="updatedContent" value="import androidx.lifecycle.LiveData;&#10;import androidx.lifecycle.MutableLiveData;&#10;import androidx.lifecycle.ViewModel;&#10;&#10;import java.util.List;&#10;&#10;public class ProductoStockViewModel extends ViewModel {&#10;&#10;    private final MutableLiveData&lt;List&lt;ProductoStock&gt;&gt; productosStock = new MutableLiveData&lt;&gt;();&#10;&#10;    public LiveData&lt;List&lt;ProductoStock&gt;&gt; getProductosStock() {&#10;        return productosStock;&#10;    }&#10;&#10;    public void cargarProductosStock() {&#10;        // Aquí se debe implementar la lógica para cargar los datos de la tabla stock_productos&#10;        // y actualizar el valor de productosStock con los datos obtenidos.&#10;&#10;        // Ejemplo de datos simulados:&#10;        List&lt;ProductoStock&gt; datosSimulados = List.of(&#10;            new ProductoStock(1, &quot;Producto A&quot;, 10),&#10;            new ProductoStock(2, &quot;Producto B&quot;, 5),&#10;            new ProductoStock(3, &quot;Producto C&quot;, 20)&#10;        );&#10;&#10;        productosStock.setValue(datosSimulados);&#10;    }&#10;&#10;    public static class ProductoStock {&#10;        private final int productoId;&#10;        private final String nombre;&#10;        private final int stock;&#10;&#10;        public ProductoStock(int productoId, String nombre, int stock) {&#10;            this.productoId = productoId;&#10;            this.nombre = nombre;&#10;            this.stock = stock;&#10;        }&#10;&#10;        public int getProductoId() {&#10;            return productoId;&#10;        }&#10;&#10;        public String getNombre() {&#10;            return nombre;&#10;        }&#10;&#10;        public int getStock() {&#10;            return stock;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscal posv2/screens/StockScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscal posv2/screens/StockScreen.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Inventory&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Warning&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.paging.compose.collectAsLazyPagingItems&#10;import androidx.paging.compose.items&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entities.ProductoEntity&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.StockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.ui.theme.NexoTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun StockScreen(&#10;    viewModel: StockViewModel,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    val pagedProductos = viewModel.pagedProductos.collectAsLazyPagingItems()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Control de Stock&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cerrar&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Search bar&#10;        OutlinedTextField(&#10;            value = searchQuery,&#10;            onValueChange = { query -&gt;&#10;                searchQuery = query&#10;                viewModel.search(query)&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            placeholder = { Text(&quot;Buscar producto...&quot;) },&#10;            leadingIcon = {&#10;                Icon(Icons.Default.Search, contentDescription = &quot;Buscar&quot;)&#10;            },&#10;            shape = RoundedCornerShape(12.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Header de la tabla&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer&#10;            )&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(12.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;Producto&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(3f)&#10;                )&#10;                Text(&#10;                    text = &quot;Stock\nActual&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f),&#10;                    fontSize = 12.sp&#10;                )&#10;                Text(&#10;                    text = &quot;Stock\nMínimo&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f),&#10;                    fontSize = 12.sp&#10;                )&#10;                Text(&#10;                    text = &quot;Stock\nPedido&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f),&#10;                    fontSize = 12.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Lista de productos&#10;        LazyColumn(&#10;            verticalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            items(pagedProductos) { producto -&gt;&#10;                producto?.let {&#10;                    StockItemCard(producto = it)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StockItemCard(producto: ProductoEntity) {&#10;    val isLowStock = producto.stock &lt; producto.stockMinimo&#10;    &#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isLowStock) {&#10;                MaterialTheme.colorScheme.errorContainer.copy(alpha = 0.1f)&#10;            } else {&#10;                MaterialTheme.colorScheme.surface&#10;            }&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Información del producto&#10;            Column(&#10;                modifier = Modifier.weight(3f)&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    if (isLowStock) {&#10;                        Icon(&#10;                            Icons.Default.Warning,&#10;                            contentDescription = &quot;Stock bajo&quot;,&#10;                            tint = MaterialTheme.colorScheme.error,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                    }&#10;                    &#10;                    Text(&#10;                        text = producto.descripcion ?: &quot;Sin descripción&quot;,&#10;                        fontWeight = FontWeight.Medium,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;                &#10;                Text(&#10;                    text = &quot;Código: ${producto.codigo ?: &quot;N/A&quot;}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;&#10;            // Stock actual&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;${producto.stock}&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = if (isLowStock) {&#10;                        MaterialTheme.colorScheme.error&#10;                    } else {&#10;                        MaterialTheme.colorScheme.primary&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Stock mínimo&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;${producto.stockMinimo}&quot;,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f)&#10;                )&#10;            }&#10;&#10;            // Stock pedido&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;${producto.stockPedido}&quot;,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/ProductosConStockActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/ProductosConStockActivity.kt" />
              <option name="originalContent" value="package ar.com.nexofiscal.nexofiscalposv2&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.ViewModelProvider&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStock&#10;import ar.com.nexofiscal.nexofiscalposv2.db.repository.ProductoRepository&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ProductosConStockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ProductosConStockViewModelFactory&#10;&#10;&#10;class ProductosConStockActivity : ComponentActivity() {&#10;&#10;    private lateinit var viewModel: ProductosConStockViewModel&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Inicializar base de datos y repositorio&#10;        val database = AppDatabase.getInstance(this)&#10;        val repository = ProductoRepository(database.productoDao())&#10;&#10;        // Crear ViewModel&#10;        val factory = ProductosConStockViewModelFactory(repository)&#10;        viewModel = ViewModelProvider(this, factory)[ProductosConStockViewModel::class.java]&#10;&#10;        setContent {&#10;            NexofiscalposV2Theme {&#10;                ProductosConStockScreen(&#10;                    viewModel = viewModel,&#10;                    onBackClick = { finish() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProductosConStockScreen(&#10;    viewModel: ProductosConStockViewModel,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    val productosConStock by viewModel.productosConStock.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val searchQuery by viewModel.searchQuery.collectAsState()&#10;&#10;    var searchText by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFFF5F5F5))&#10;    ) {&#10;        // TopAppBar&#10;        TopAppBar(&#10;            title = { Text(&quot;Productos con Stock&quot;) },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(Icons.Default.ArrowBack, contentDescription = &quot;Volver&quot;)&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                titleContentColor = Color.White,&#10;                navigationIconContentColor = Color.White&#10;            )&#10;        )&#10;&#10;        // Barra de búsqueda&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchText,&#10;                onValueChange = {&#10;                    searchText = it&#10;                    viewModel.buscarProductos(it)&#10;                },&#10;                label = { Text(&quot;Buscar productos...&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = &quot;Buscar&quot;)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                singleLine = true&#10;            )&#10;        }&#10;&#10;        // Contenido principal&#10;        if (isLoading) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentPadding = PaddingValues(horizontal = 16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(productosConStock) { productoConStock -&gt;&#10;                    ProductoConStockItem(productoConStock = productoConStock)&#10;                }&#10;&#10;                if (productosConStock.isEmpty()) {&#10;                    item {&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 32.dp),&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                        ) {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(32.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = if (searchQuery.isNotBlank())&#10;                                        &quot;No se encontraron productos que coincidan con la búsqueda&quot;&#10;                                    else&#10;                                        &quot;No hay productos disponibles&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    color = Color.Gray&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProductoConStockItem(productoConStock: ProductoConStock) {&#10;    val producto = productoConStock.producto&#10;    val stock = productoConStock.stockProducto&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            // Código del producto&#10;            if (!producto.codigo.isNullOrBlank()) {&#10;                Text(&#10;                    text = &quot;Código: ${producto.codigo}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;            }&#10;&#10;            // Descripción del producto&#10;            Text(&#10;                text = producto.descripcion ?: &quot;Sin descripción&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Información de stock&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Stock actual&#10;                val stockActual = stock?.stockActual ?: 0.0&#10;                val controlaStock = stock?.controlaStock ?: false&#10;&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Stock Actual&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                    Text(&#10;                        text = if (controlaStock) stockActual.toString() else &quot;No controlado&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = when {&#10;                            !controlaStock -&gt; Color.Gray&#10;                            stockActual &gt; (stock?.puntoPedido ?: 0.0) -&gt; Color(0xFF4CAF50)&#10;                            stockActual &gt; 0 -&gt; Color(0xFFFF9800)&#10;                            else -&gt; Color(0xFFF44336)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Punto de pedido&#10;                if (controlaStock) {&#10;                    Column(horizontalAlignment = Alignment.End) {&#10;                        Text(&#10;                            text = &quot;Punto de Pedido&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color.Gray&#10;                        )&#10;                        Text(&#10;                            text = (stock?.puntoPedido ?: 0.0).toString(),&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Stock inicial si existe&#10;            if (stock?.stockInicial != null &amp;&amp; stock.stockInicial != 0.0) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Stock Inicial: ${stock.stockInicial}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;&#10;            // Precios&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Precio 1&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                    Text(&#10;                        text = &quot;$${String.format(&quot;%.2f&quot;, producto.precio1)}&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;&#10;                if (producto.precio2 &gt; 0) {&#10;                    Column(horizontalAlignment = Alignment.End) {&#10;                        Text(&#10;                            text = &quot;Precio 2&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color.Gray&#10;                        )&#10;                        Text(&#10;                            text = &quot;$${String.format(&quot;%.2f&quot;, producto.precio2)}&quot;,&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Código de barras si existe&#10;            if (!producto.codigoBarra.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Código de Barras: ${producto.codigoBarra}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.ViewModelProvider&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStock&#10;import ar.com.nexofiscal.nexofiscalposv2.db.repository.ProductoRepository&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ProductosConStockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ProductosConStockViewModelFactory&#10;&#10;&#10;class ProductosConStockActivity : ComponentActivity() {&#10;&#10;    private lateinit var viewModel: ProductosConStockViewModel&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Inicializar base de datos y repositorio&#10;        val database = AppDatabase.getInstance(this)&#10;        val repository = ProductoRepository(database.productoDao())&#10;&#10;        // Crear ViewModel&#10;        val factory = ProductosConStockViewModelFactory(repository)&#10;        viewModel = ViewModelProvider(this, factory)[ProductosConStockViewModel::class.java]&#10;&#10;        setContent {&#10;            NexofiscalposV2Theme {&#10;                ProductosConStockScreen(&#10;                    viewModel = viewModel,&#10;                    onBackClick = { finish() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProductosConStockScreen(&#10;    viewModel: ProductosConStockViewModel,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    val productosConStock by viewModel.productosConStock.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val searchQuery by viewModel.searchQuery.collectAsState()&#10;&#10;    var searchText by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFFF5F5F5))&#10;    ) {&#10;        // TopAppBar&#10;        TopAppBar(&#10;            title = { Text(&quot;Productos con Stock&quot;) },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(Icons.Default.ArrowBack, contentDescription = &quot;Volver&quot;)&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                titleContentColor = Color.White,&#10;                navigationIconContentColor = Color.White&#10;            )&#10;        )&#10;&#10;        // Barra de búsqueda&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchText,&#10;                onValueChange = {&#10;                    searchText = it&#10;                    viewModel.buscarProductos(it)&#10;                },&#10;                label = { Text(&quot;Buscar productos...&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = &quot;Buscar&quot;)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                singleLine = true&#10;            )&#10;        }&#10;&#10;        // Contenido principal&#10;        if (isLoading) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentPadding = PaddingValues(horizontal = 16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(productosConStock) { productoConStock -&gt;&#10;                    ProductoConStockItem(productoConStock = productoConStock)&#10;                }&#10;&#10;                if (productosConStock.isEmpty()) {&#10;                    item {&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 32.dp),&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                        ) {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(32.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = if (searchQuery.isNotBlank())&#10;                                        &quot;No se encontraron productos que coincidan con la búsqueda&quot;&#10;                                    else&#10;                                        &quot;No hay productos disponibles&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    color = Color.Gray&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProductoConStockItem(productoConStock: ProductoConStock) {&#10;    val producto = productoConStock.producto&#10;    val stock = productoConStock.stockProducto&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            // Código del producto&#10;            if (!producto.codigo.isNullOrBlank()) {&#10;                Text(&#10;                    text = &quot;Código: ${producto.codigo}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;            }&#10;&#10;            // Descripción del producto&#10;            Text(&#10;                text = producto.descripcion ?: &quot;Sin descripción&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Información de stock&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Stock actual&#10;                val stockActual = stock?.stockActual ?: 0.0&#10;                val controlaStock = stock?.controlaStock ?: false&#10;&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Stock Actual&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                    Text(&#10;                        text = if (controlaStock) stockActual.toString() else &quot;No controlado&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = when {&#10;                            !controlaStock -&gt; Color.Gray&#10;                            stockActual &gt; (stock?.puntoPedido ?: 0.0) -&gt; Color(0xFF4CAF50)&#10;                            stockActual &gt; 0 -&gt; Color(0xFFFF9800)&#10;                            else -&gt; Color(0xFFF44336)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Punto de pedido&#10;                if (controlaStock) {&#10;                    Column(horizontalAlignment = Alignment.End) {&#10;                        Text(&#10;                            text = &quot;Punto de Pedido&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color.Gray&#10;                        )&#10;                        Text(&#10;                            text = (stock?.puntoPedido ?: 0.0).toString(),&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Stock inicial si existe&#10;            if (stock?.stockInicial != null &amp;&amp; stock.stockInicial != 0.0) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Stock Inicial: ${stock.stockInicial}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;&#10;            // Precios&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Precio 1&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                    Text(&#10;                        text = &quot;$${String.format(&quot;%.2f&quot;, producto.precio1)}&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;&#10;                if (producto.precio2 &gt; 0) {&#10;                    Column(horizontalAlignment = Alignment.End) {&#10;                        Text(&#10;                            text = &quot;Precio 2&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color.Gray&#10;                        )&#10;                        Text(&#10;                            text = &quot;$${String.format(&quot;%.2f&quot;, producto.precio2)}&quot;,&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Código de barras si existe&#10;            if (!producto.codigoBarra.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Código de Barras: ${producto.codigoBarra}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/StockActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/StockActivity.kt" />
              <option name="originalContent" value="package ar.com.nexofiscal.nexofiscalposv2&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.ui.Modifier&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.StockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.screens.StockScreen&#10;import ar.com.nexofiscal.nexofiscalposv2.ui.theme.NexoFiscalPOSV2Theme&#10;&#10;class StockActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            NexoFiscalPOSV2Theme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    val viewModel: StockViewModel = viewModel()&#10;                    StockScreen(viewModel = viewModel)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2&#13;&#10;&#13;&#10;import android.os.Bundle&#13;&#10;import androidx.activity.ComponentActivity&#13;&#10;import androidx.activity.compose.setContent&#13;&#10;import androidx.activity.compose.BackHandler&#13;&#10;import androidx.compose.foundation.layout.fillMaxSize&#13;&#10;import androidx.compose.material3.MaterialTheme&#13;&#10;import androidx.compose.material3.Surface&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.StockViewModel&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.screens.StockScreen&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.ui.theme.NexoFiscalPOSV2Theme&#13;&#10;&#13;&#10;class StockActivity : ComponentActivity() {&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;        setContent {&#13;&#10;            NexoFiscalPOSV2Theme {&#13;&#10;                Surface(&#13;&#10;                    modifier = Modifier.fillMaxSize(),&#13;&#10;                    color = MaterialTheme.colorScheme.background&#13;&#10;                ) {&#13;&#10;                    val viewModel: StockViewModel = viewModel()&#13;&#10;&#13;&#10;                    // Manejar el botón de volver tanto del sistema como de la UI&#13;&#10;                    BackHandler {&#13;&#10;                        finish()&#13;&#10;                    }&#13;&#10;&#13;&#10;                    StockScreen(&#13;&#10;                        viewModel = viewModel,&#13;&#10;                        onDismiss = { finish() } // Cerrar la actividad cuando se presiona volver&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/mappers/ApiToEntityMappers.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/mappers/ApiToEntityMappers.kt" />
              <option name="originalContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.mappers&#10;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.*&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ComprobanteConDetalle&#10;import ar.com.nexofiscal.nexofiscalposv2.models.*&#10;import ar.com.nexofiscal.nexofiscalposv2.screens.Pago&#10;import com.google.gson.Gson&#10;import java.util.Locale&#10;&#10;// MAPPERS DE ENTIDAD A MODELO DE DOMINIO (API)&#10;// Nota: Se han corregido los mappers para que solo asignen los campos que realmente existen en el modelo de dominio.&#10;&#10;fun List&lt;AgrupacionEntity&gt;.toAgrupacionDomainModelList(): List&lt;Agrupacion&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun List&lt;CategoriaEntity&gt;.toCategoriaDomainModelList(): List&lt;Categoria&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun CierreCajaEntity.toDomainModel(): CierreCaja {&#10;    val domain = CierreCaja()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.fecha = this.fecha&#10;    domain.totalVentas = this.totalVentas&#10;    domain.totalGastos = this.totalGastos&#10;    domain.efectivoInicial = this.efectivoInicial&#10;    domain.efectivoFinal = this.efectivoFinal&#10;    domain.tipoCajaId = this.tipoCajaId&#10;    this.usuarioId?.let { domain.usuario = Usuario().apply { id = it } }&#10;    return domain&#10;}&#10;&#10;fun List&lt;CierreCajaEntity&gt;.toCierreCajaDomainModelList(): List&lt;CierreCaja&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun ClienteEntity.toDomainModel(): Cliente {&#10;    val domain = Cliente()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.localId = this.id&#10;    domain.nroCliente = this.nroCliente&#10;    domain.nombre = this.nombre&#10;    domain.cuit = this.cuit&#10;    this.tipoDocumentoId?.let { domain.tipoDocumento = TipoDocumento().apply { id = it } }&#10;    domain.numeroDocumento = this.numeroDocumento&#10;    domain.direccionComercial = this.direccionComercial&#10;    domain.direccionEntrega = this.direccionEntrega&#10;    this.localidadId?.let { domain.localidad = Localidad().apply { id = it } }&#10;    domain.telefono = this.telefono&#10;    domain.celular = this.celular&#10;    domain.email = this.email&#10;    domain.contacto = this.contacto&#10;    domain.telefonoContacto = this.telefonoContacto&#10;    this.categoriaId?.let { domain.categoria = Categoria().apply { id = it } }&#10;    this.vendedoresId?.let { domain.vendedores = Vendedor().apply { id = it } }&#10;    domain.porcentajeDescuento = this.porcentajeDescuento&#10;    domain.limiteCredito = this.limiteCredito&#10;    domain.saldoInicial = this.saldoInicial&#10;    domain.saldoActual = this.saldoActual&#10;    domain.fechaUltimaCompra = this.fechaUltimaCompra&#10;    domain.fechaUltimoPago = this.fechaUltimoPago&#10;    domain.percepcionIibb = this.percepcionIibb&#10;    domain.desactivado = this.desactivado&#10;    this.tipoIvaId?.let {&#10;        domain.tipoIva = TipoIVA().apply { id = it }&#10;        domain.tipoIvaId = it&#10;    }&#10;    this.provinciaId?.let { domain.provincia = Provincia().apply { id = it } }&#10;    return domain&#10;}&#10;&#10;fun List&lt;ClienteEntity&gt;.toClienteDomainModelList(): List&lt;Cliente&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun CombinacionEntity.toDomainModel(): Combinacion {&#10;    return Combinacion(&#10;        productoPrincipalId = this.productoPrincipalId,&#10;        subproductoId = this.subproductoId,&#10;        cantidad = this.cantidad,&#10;        empresaId = this.empresaId&#10;    )&#10;}&#10;&#10;fun List&lt;CombinacionEntity&gt;.toCombinacionDomainModelList(): List&lt;Combinacion&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun ComprobanteEntity.toDomainModel(): Comprobante {&#10;    return Comprobante(&#10;        localId = this.id,&#10;        id = this.serverId ?: 0,&#10;        serverId = this.serverId,&#10;        numero = this.numero,&#10;        cuotas = this.cuotas,&#10;        clienteId = this.clienteId,&#10;        remito = this.remito,&#10;        persona = this.persona,&#10;        provinciaId = this.provinciaId,&#10;        fecha = this.fecha,&#10;        fechaBaja = this.fechaBaja,&#10;        motivoBaja = this.motivoBaja,&#10;        hora = this.hora,&#10;        fechaProceso = this.fechaProceso,&#10;        letra = this.letra,&#10;        numeroFactura = this.numeroFactura,&#10;        prefijoFactura = this.prefijoFactura,&#10;        operacionNegocioId = this.operacionNegocioId,&#10;        retencionIva = this.retencionIva,&#10;        retencionIibb = this.retencionIibb,&#10;        retencionGanancias = this.retencionGanancias,&#10;        porcentajeGanancias = this.porcentajeGanancias,&#10;        porcentajeIibb = this.porcentajeIibb,&#10;        porcentajeIva = this.porcentajeIva,&#10;        noGravado = this.noGravado,&#10;        importeIva = this.importeIva,&#10;        total = this.total,&#10;        totalPagado = this.totalPagado,&#10;        condicionVentaId = this.condicionVentaId,&#10;        descripcionFlete = this.descripcionFlete,&#10;        vendedorId = this.vendedorId,&#10;        recibo = this.recibo,&#10;        observaciones1 = this.observaciones1,&#10;        observaciones2 = this.observaciones2,&#10;        observaciones3 = this.observaciones3,&#10;        observaciones4 = this.observaciones4,&#10;        descuento = this.descuento,&#10;        descuento1 = this.descuento1,&#10;        descuento2 = this.descuento2,&#10;        descuento3 = this.descuento3,&#10;        descuento4 = this.descuento4,&#10;        iva2 = this.iva2,&#10;        impresa = this.impresa,&#10;        cancelado = this.cancelado,&#10;        nombreCliente = this.nombreCliente,&#10;        direccionCliente = this.direccionCliente,&#10;        localidadCliente = this.localidadCliente,&#10;        garantia = this.garantia,&#10;        concepto = this.concepto,&#10;        notas = this.notas,&#10;        lineaPagoUltima = this.lineaPagoUltima,&#10;        relacionTk = this.relacionTk,&#10;        totalIibb = this.totalIibb,&#10;        importeIibb = this.importeIibb,&#10;        provinciaCategoriaIibbId = this.provinciaCategoriaIibbId,&#10;        importeRetenciones = this.importeRetenciones,&#10;        provinciaIvaProveedorId = this.provinciaIvaProveedorId,&#10;        gananciasProveedorId = this.gananciasProveedorId,&#10;        importeGanancias = this.importeGanancias,&#10;        numeroIibb = this.numeroIibb,&#10;        numeroGanancias = this.numeroGanancias,&#10;        gananciasProveedor = this.gananciasProveedor,&#10;        cae = this.cae,&#10;        fechaVencimiento = this.fechaVencimiento,&#10;        remitoCliente = this.remitoCliente,&#10;        textoDolares = this.textoDolares,&#10;        comprobanteFinal = this.comprobanteFinal,&#10;        numeroGuia1 = this.numeroGuia1,&#10;        numeroGuia2 = this.numeroGuia2,&#10;        numeroGuia3 = this.numeroGuia3,&#10;        tipoAlicuota1 = this.tipoAlicuota1,&#10;        tipoAlicuota2 = this.tipoAlicuota2,&#10;        tipoAlicuota3 = this.tipoAlicuota3,&#10;        importeIva105 = this.importeIva105,&#10;        importeIva21 = this.importeIva21,&#10;        importeIva0 = this.importeIva0,&#10;        noGravadoIva105 = this.noGravadoIva105,&#10;        noGravadoIva21 = this.noGravadoIva21,&#10;        noGravadoIva0 = this.noGravadoIva0,&#10;        direccionEntrega = this.direccionEntrega,&#10;        fechaEntrega = this.fechaEntrega,&#10;        horaEntrega = this.horaEntrega,&#10;        empresaId = this.empresaId,&#10;        puntoVenta = this.puntoVenta,&#10;        tipoFactura = this.tipoFactura,&#10;        tipoDocumento = this.tipoDocumento,&#10;        numeroDeDocumento = this.numeroDeDocumento,&#10;        qr = this.qr,&#10;        comprobanteIdBaja = this.comprobanteIdBaja,&#10;        sucursalId = this.sucursalId,&#10;        descuentoTotal = this.descuentoTotal,&#10;        incrementoTotal = this.incrementoTotal,&#10;        cliente = null,&#10;        vendedor = null,&#10;        provincia = null,&#10;        tipoComprobante = null,&#10;        formas_de_pago = emptyList(),&#10;        promociones = null,&#10;        tipoComprobanteId = this.tipoComprobanteId,&#10;&#10;&#10;&#10;&#10;    )&#10;}&#10;&#10;fun List&lt;ComprobanteEntity&gt;.toComprobanteDomainModelList(): List&lt;Comprobante&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun FamiliaEntity.toDomainModel(): Familia {&#10;    val domain = Familia()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.numero = this.numero&#10;    domain.nombre = this.nombre&#10;    return domain&#10;}&#10;&#10;&#10;&#10;fun List&lt;FamiliaEntity&gt;.toFamiliaDomainModelList(): List&lt;Familia&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun List&lt;FormaPagoEntity&gt;.toFormaPagoDomainModelList(): List&lt;FormaPago&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun LocalidadEntity.toDomainModel(): Localidad {&#10;    val domain = Localidad()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    domain.codigoPostal = this.codigoPostal&#10;    this.provinciaId?.let { domain.provincia = Provincia().apply { id = it } }&#10;    return domain&#10;}&#10;&#10;fun List&lt;LocalidadEntity&gt;.toLocalidadDomainModelList(): List&lt;Localidad&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;&#10;fun List&lt;MonedaEntity&gt;.toMonedaDomainModelList(): List&lt;Moneda&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun PaisEntity.toDomainModel(): Pais {&#10;    val domain = Pais()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    return domain&#10;}&#10;&#10;fun List&lt;PaisEntity&gt;.toPaisDomainModelList(): List&lt;Pais&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun ProductoEntity.toDomainModel(): Producto {&#10;    val domain = Producto()&#10;    domain.localId = this.id&#10;    domain.id = this.serverId ?: this.id&#10;    domain.codigo = this.codigo&#10;    domain.descripcion = this.descripcion&#10;    domain.descripcionAmpliada = this.descripcionAmpliada&#10;    domain.stock = this.stock&#10;    domain.stockMinimo = this.stockMinimo&#10;    domain.stockPedido = this.stockPedido&#10;    domain.codigoBarra = this.codigoBarra&#10;    domain.articuloActivado = this.articuloActivado&#10;    domain.productoBalanza = this.productoBalanza&#10;    domain.precio1 = this.precio1&#10;    domain.precio2 = this.precio2&#10;    domain.precio3 = this.precio3&#10;    domain.precio4 = this.precio4&#10;    this.monedaId?.let { domain.moneda = Moneda().apply { id = it } }&#10;    this.tasaIvaId?.let { domain.tasaIva = TasaIva().apply { id = it } }&#10;    domain.incluyeIva = this.incluyeIva&#10;    domain.impuestoInterno = this.impuestoInterno&#10;    domain.tipoImpuestoInterno = this.tipoImpuestoInterno&#10;    domain.precio1ImpuestoInterno = this.precio1ImpuestoInterno&#10;    domain.precio2ImpuestoInterno = this.precio2ImpuestoInterno&#10;    domain.precio3ImpuestoInterno = this.precio3ImpuestoInterno&#10;    domain.precioCosto = this.precioCosto&#10;    domain.fraccionado = this.fraccionado&#10;    domain.rg5329_23 = this.rg5329_23&#10;    domain.activo = this.activo&#10;    domain.textoPanel = this.textoPanel&#10;    domain.iibb = this.iibb&#10;    domain.codigoBarra2 = this.codigoBarra2&#10;    domain.oferta = this.oferta&#10;    domain.margenGanancia = this.margenGanancia&#10;    domain.favorito = this.favorito&#10;    this.familiaId?.let { domain.familia = Familia().apply { id = it } }&#10;    this.agrupacionId?.let { domain.agrupacion = Agrupacion().apply { id = it } }&#10;    this.proveedorId?.let { domain.proveedor = Proveedor().apply { id = it } }&#10;    this.tipoId?.let { domain.tipo = Tipo().apply { id = it } }&#10;    this.unidadId?.let { domain.unidad = Unidad().apply { id = it } }&#10;    return domain&#10;}&#10;&#10;fun ProductoConDetalles.toDomainModel(): Producto {&#10;    // Esta función ya usa ProductoEntity.toDomainModel(), así que heredará la corrección.&#10;    val domainProducto = this.producto.toDomainModel()&#10;    domainProducto.moneda = this.moneda?.toDomainModel()&#10;    domainProducto.tasaIva = this.tasaIva?.toDomainModel()&#10;    domainProducto.familia = this.familia?.toDomainModel()&#10;    domainProducto.agrupacion = this.agrupacion?.toDomainModel()&#10;    domainProducto.proveedor = this.proveedor?.toDomainModel()&#10;    domainProducto.tipo = this.tipo?.toDomainModel()&#10;    domainProducto.unidad = this.unidad?.toDomainModel()&#10;    return domainProducto&#10;}&#10;&#10;fun List&lt;ProductoEntity&gt;.toProductoDomainModelList(): List&lt;Producto&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;&#10;&#10;fun List&lt;PromocionEntity&gt;.toPromocionDomainModelList(): List&lt;Promocion&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun ProveedorEntity.toDomainModel(): Proveedor {&#10;    val domain = Proveedor()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.razonSocial = this.razonSocial&#10;    domain.direccion = this.direccion&#10;    domain.telefono = this.telefono&#10;    domain.email = this.email&#10;    domain.cuit = this.cuit&#10;    domain.fechaUltimaCompra = this.fechaUltimaCompra&#10;    domain.fechaUltimoPago = this.fechaUltimoPago&#10;    domain.saldoActual = this.saldoActual&#10;    // Las entidades relacionadas se cargan en el ViewModel&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun Proveedor.toEntity(): ProveedorEntity {&#10;    return ProveedorEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        razonSocial = this.razonSocial,&#10;        direccion = this.direccion,&#10;        localidadId = this.localidad?.id,&#10;        telefono = this.telefono,&#10;        email = this.email,&#10;        tipoIvaId = this.tipoIva?.id,&#10;        cuit = this.cuit,&#10;        categoriaId = this.categoria?.id,&#10;        subcategoriaId = this.subcategoria?.id,&#10;        fechaUltimaCompra = this.fechaUltimaCompra,&#10;        fechaUltimoPago = this.fechaUltimoPago,&#10;        saldoActual = this.saldoActual&#10;    )&#10;}&#10;&#10;fun List&lt;ProveedorEntity&gt;.toProveedorDomainModelList(): List&lt;Proveedor&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun ProvinciaEntity.toDomainModel(): Provincia {&#10;    val domain = Provincia()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    this.paisId?.let { domain.pais = Pais().apply { id = it } }&#10;    return domain&#10;}&#10;&#10;fun List&lt;ProvinciaEntity&gt;.toProvinciaDomainModelList(): List&lt;Provincia&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun RenglonComprobanteEntity.toDomainModel(): RenglonComprobante {&#10;    val gson = Gson()&#10;    return gson.fromJson(this.data, RenglonComprobante::class.java)&#10;}&#10;&#10;fun List&lt;RenglonComprobanteEntity&gt;.toRenglonComprobanteDomainModelList(): List&lt;RenglonComprobante&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun RolEntity.toDomainModel(): Rol {&#10;    val domain = Rol()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    domain.descripcion = this.descripcion&#10;    return domain&#10;}&#10;&#10;fun List&lt;RolEntity&gt;.toRolDomainModelList(): List&lt;Rol&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun StockProductoEntity.toDomainModel(): StockProducto {&#10;    val domain = StockProducto()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.codigo = this.codigo&#10;    domain.stockInicial = this.stockInicial&#10;    domain.controlaStock = this.controlaStock&#10;    domain.puntoPedido = this.puntoPedido&#10;    domain.largo = this.largo&#10;    domain.alto = this.alto&#10;    domain.ancho = this.ancho&#10;    domain.peso = this.peso&#10;    domain.unidadId = this.unidadId&#10;    domain.ubicacionId = this.ubicacionId&#10;    domain.proveedoresId = this.proveedoresId&#10;    domain.productoId = this.productoId&#10;    domain.empresaId = this.empresaId&#10;    domain.stockActual = this.stockActual&#10;    domain.sucursalId = this.sucursalId&#10;    return domain&#10;}&#10;&#10;fun List&lt;StockProductoEntity&gt;.toStockProductoDomainModelList(): List&lt;StockProducto&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun SubcategoriaEntity.toDomainModel(): Subcategoria {&#10;    val domain = Subcategoria()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    domain.seImprime = this.seImprime&#10;    return domain&#10;}&#10;&#10;fun List&lt;SubcategoriaEntity&gt;.toSubcategoriaDomainModelList(): List&lt;Subcategoria&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun SucursalEntity.toDomainModel(): Sucursal {&#10;    val domain = Sucursal()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    domain.direccion = this.direccion&#10;    // CAMBIO: Faltaban campos que no existen en la entidad.&#10;    // domain.empresaId = this.empresaId &#10;    // domain.telefono = this.telefono&#10;    // domain.email = this.email&#10;    // domain.contactoNombre = this.contactoNombre&#10;    // ...&#10;    return domain&#10;}&#10;&#10;fun List&lt;SucursalEntity&gt;.toSucursalDomainModelList(): List&lt;Sucursal&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun TasaIvaEntity.toDomainModel(): TasaIva {&#10;    val domain = TasaIva()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    domain.tasa = this.tasa&#10;    return domain&#10;}&#10;&#10;fun List&lt;TasaIvaEntity&gt;.toTasaIvaDomainModelList(): List&lt;TasaIva&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun TipoComprobanteEntity.toDomainModel(): TipoComprobante {&#10;    val domain = TipoComprobante()&#10;    domain.id = this.serverId ?: this.id&#10;    // CAMBIO: El campo 'numero' no existe en TipoComprobanteEntity&#10;    // domain.numero = this.numero &#10;    domain.nombre = this.nombre&#10;    return domain&#10;}&#10;&#10;fun List&lt;TipoComprobanteEntity&gt;.toTipoComprobanteDomainModelList(): List&lt;TipoComprobante&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun List&lt;TipoDocumentoEntity&gt;.toTipoDocumentoDomainModelList(): List&lt;TipoDocumento&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun TipoEntity.toDomainModel(): Tipo {&#10;    val domain = Tipo()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    // CAMBIO: El campo 'numero' no existe en TipoEntity&#10;    // domain.numero = this.numero&#10;    return domain&#10;}&#10;&#10;fun List&lt;TipoEntity&gt;.toTipoDomainModelList(): List&lt;Tipo&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun TipoFormaPagoEntity.toDomainModel(): TipoFormaPago {&#10;    val domain = TipoFormaPago()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    return domain&#10;}&#10;&#10;fun FormaPagoConDetalles.toDomainModel(): FormaPago {&#10;    // 1. Convierte la parte principal (FormaPagoEntity) al modelo de dominio.&#10;    val domainModel = this.formaPago.toDomainModel()&#10;&#10;    // 2. Convierte la parte relacionada (TipoFormaPagoEntity) y la asigna.&#10;    domainModel.tipoFormaPago = this.tipoFormaPago?.toDomainModel()&#10;&#10;    return domainModel&#10;}&#10;&#10;&#10;fun List&lt;TipoFormaPagoEntity&gt;.toTipoFormaPagoDomainModelList(): List&lt;TipoFormaPago&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun TipoIvaEntity.toDomainModel(): TipoIVA {&#10;    val domain = TipoIVA()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.nombre = this.nombre&#10;    // Los campos 'letraFactura' y 'porcentaje' no están en la entidad, se mantendrán null&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun TipoIVA.toEntity(): TipoIvaEntity {&#10;    return TipoIvaEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        nombre = this.nombre,&#10;        descripcion = null // La entidad tiene un campo 'descripcion' que el modelo no, se asigna null.&#10;    )&#10;}&#10;&#10;fun List&lt;TipoIvaEntity&gt;.toTipoIvaDomainModelList(): List&lt;TipoIVA&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun List&lt;UnidadEntity&gt;.toUnidadDomainModelList(): List&lt;Unidad&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun UsuarioEntity.toDomainModel(): Usuario {&#10;    val domain = Usuario()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombreUsuario = this.nombreUsuario&#10;    domain.nombreCompleto = this.nombreCompleto&#10;    // CAMBIO: Faltaban campos que no existen en la entidad.&#10;    // domain.password = this.password &#10;    // domain.activo = this.activo&#10;    // domain.empresaId = this.empresaId&#10;    this.rolId?.let { domain.rol = Rol().apply { id = it } }&#10;    this.sucursalId?.let { domain.sucursal = Sucursal().apply { id = it } }&#10;    this.vendedorId?.let { domain.vendedor = Vendedor().apply { id = it } }&#10;    return domain&#10;}&#10;&#10;fun List&lt;UsuarioEntity&gt;.toUsuarioDomainModelList(): List&lt;Usuario&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun VendedorEntity.toDomainModel(): Vendedor {&#10;    val domain = Vendedor()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    domain.porcentajeComision = this.porcentajeComision&#10;    // CAMBIO: Faltaban campos que no existen en la entidad.&#10;    // domain.direccion = this.direccion&#10;    // domain.telefono = this.telefono&#10;    // domain.fechaIngreso = this.fechaIngreso&#10;    return domain&#10;}&#10;&#10;fun List&lt;VendedorEntity&gt;.toVendedorDomainModelList(): List&lt;Vendedor&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;&#10;// MAPPERS DE MODELO DE DOMINIO (API) A ENTIDAD&#10;// Nota: Se han corregido todos los mappers para asignar `serverId`, `id` local y `syncStatus`.&#10;fun AgrupacionEntity.toDomainModel(): Agrupacion {&#10;    val domain = Agrupacion()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.numero = this.numero&#10;    domain.nombre = this.nombre&#10;    domain.color = this.color&#10;    domain.icono = this.icono&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun Agrupacion.toEntity(): AgrupacionEntity {&#10;    return AgrupacionEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        numero = this.numero,&#10;        nombre = this.nombre,&#10;        color = this.color,&#10;        icono = this.icono&#10;    )&#10;}&#10;fun List&lt;Agrupacion?&gt;.toAgrupacionEntityList(): List&lt;AgrupacionEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun CategoriaEntity.toDomainModel(): Categoria {&#10;    val domain = Categoria()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId&#10;    domain.nombre = this.nombre&#10;    domain.seImprime = this.seImprime&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun Categoria.toEntity(): CategoriaEntity {&#10;    return CategoriaEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        nombre = this.nombre,&#10;        seImprime = this.seImprime&#10;    )&#10;}&#10;fun List&lt;Categoria?&gt;.toCategoriaEntityList(): List&lt;CategoriaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun CierreCaja.toEntity(): CierreCajaEntity {&#10;    return CierreCajaEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        fecha = this.fecha,&#10;        totalVentas = this.totalVentas,&#10;        totalGastos = this.totalGastos,&#10;        efectivoInicial = this.efectivoInicial,&#10;        efectivoFinal = this.efectivoFinal,&#10;        tipoCajaId = this.tipoCajaId,&#10;        usuarioId = this.usuario?.id&#10;    )&#10;}&#10;fun List&lt;CierreCaja?&gt;.toCierreCajaEntityList(): List&lt;CierreCajaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Cliente.toEntity(): ClienteEntity {&#10;    return ClienteEntity(&#10;        id = this.localId,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nroCliente = this.nroCliente,&#10;        nombre = this.nombre,&#10;        cuit = this.cuit,&#10;        tipoDocumentoId = this.tipoDocumento?.id,&#10;        numeroDocumento = this.numeroDocumento,&#10;        direccionComercial = this.direccionComercial,&#10;        direccionEntrega = this.direccionEntrega,&#10;        localidadId = this.localidad?.id,&#10;        telefono = this.telefono,&#10;        celular = this.celular,&#10;        email = this.email,&#10;        contacto = this.contacto,&#10;        telefonoContacto = this.telefonoContacto,&#10;        categoriaId = this.categoria?.id,&#10;        vendedoresId = this.vendedores?.id,&#10;        porcentajeDescuento = this.porcentajeDescuento,&#10;        limiteCredito = this.limiteCredito,&#10;        saldoInicial = this.saldoInicial,&#10;        saldoActual = this.saldoActual,&#10;        fechaUltimaCompra = this.fechaUltimaCompra,&#10;        fechaUltimoPago = this.fechaUltimoPago,&#10;        percepcionIibb = this.percepcionIibb,&#10;        desactivado = this.desactivado,&#10;        tipoIvaId = this.tipoIva?.id,&#10;        provinciaId = this.provincia?.id&#10;    )&#10;}&#10;fun List&lt;Cliente?&gt;.toClienteEntityList(): List&lt;ClienteEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Combinacion.toEntity(): CombinacionEntity {&#10;    return CombinacionEntity(&#10;        uid = 0,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        productoPrincipalId = this.productoPrincipalId,&#10;        subproductoId = this.subproductoId,&#10;        cantidad = this.cantidad,&#10;        empresaId = this.empresaId&#10;    )&#10;}&#10;fun List&lt;Combinacion?&gt;.toCombinacionEntityList(): List&lt;CombinacionEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Comprobante.toEntity(): ComprobanteEntity {&#10;    return ComprobanteEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        numero = this.numero,&#10;        cuotas = this.cuotas,&#10;        clienteId = this.clienteId,&#10;        remito = this.remito,&#10;        persona = this.persona,&#10;        provinciaId = this.provinciaId,&#10;        fecha = this.fecha,&#10;        fechaBaja = this.fechaBaja,&#10;        motivoBaja = this.motivoBaja,&#10;        hora = this.hora,&#10;        fechaProceso = this.fechaProceso,&#10;        letra = this.letra,&#10;        numeroFactura = this.numeroFactura,&#10;        prefijoFactura = this.prefijoFactura,&#10;        operacionNegocioId = this.operacionNegocioId,&#10;        retencionIva = this.retencionIva,&#10;        retencionIibb = this.retencionIibb,&#10;        retencionGanancias = this.retencionGanancias,&#10;        porcentajeGanancias = this.porcentajeGanancias,&#10;        porcentajeIibb = this.porcentajeIibb,&#10;        porcentajeIva = this.porcentajeIva,&#10;        noGravado = this.noGravado,&#10;        importeIva = this.importeIva,&#10;        total = this.total,&#10;        totalPagado = this.totalPagado,&#10;        condicionVentaId = this.condicionVentaId,&#10;        descripcionFlete = this.descripcionFlete,&#10;        vendedorId = this.vendedorId,&#10;        recibo = this.recibo,&#10;        observaciones1 = this.observaciones1,&#10;        observaciones2 = this.observaciones2,&#10;        observaciones3 = this.observaciones3,&#10;        observaciones4 = this.observaciones4,&#10;        descuento = this.descuento,&#10;        descuento1 = this.descuento1,&#10;        descuento2 = this.descuento2,&#10;        descuento3 = this.descuento3,&#10;        descuento4 = this.descuento4,&#10;        iva2 = this.iva2,&#10;        impresa = this.impresa,&#10;        cancelado = this.cancelado,&#10;        nombreCliente = this.nombreCliente,&#10;        direccionCliente = this.direccionCliente,&#10;        localidadCliente = this.localidadCliente,&#10;        garantia = this.garantia,&#10;        concepto = this.concepto,&#10;        notas = this.notas,&#10;        lineaPagoUltima = this.lineaPagoUltima,&#10;        relacionTk = this.relacionTk,&#10;        totalIibb = this.totalIibb,&#10;        importeIibb = this.importeIibb,&#10;        provinciaCategoriaIibbId = this.provinciaCategoriaIibbId,&#10;        importeRetenciones = this.importeRetenciones,&#10;        provinciaIvaProveedorId = this.provinciaIvaProveedorId,&#10;        gananciasProveedorId = this.gananciasProveedorId,&#10;        importeGanancias = this.importeGanancias,&#10;        numeroIibb = this.numeroIibb,&#10;        numeroGanancias = this.numeroGanancias,&#10;        gananciasProveedor = this.gananciasProveedor,&#10;        cae = this.cae,&#10;        fechaVencimiento = this.fechaVencimiento,&#10;        remitoCliente = this.remitoCliente,&#10;        textoDolares = this.textoDolares,&#10;        comprobanteFinal = this.comprobanteFinal,&#10;        numeroGuia1 = this.numeroGuia1,&#10;        numeroGuia2 = this.numeroGuia2,&#10;        numeroGuia3 = this.numeroGuia3,&#10;        tipoAlicuota1 = this.tipoAlicuota1,&#10;        tipoAlicuota2 = this.tipoAlicuota2,&#10;        tipoAlicuota3 = this.tipoAlicuota3,&#10;        importeIva105 = this.importeIva105,&#10;        importeIva21 = this.importeIva21,&#10;        importeIva0 = this.importeIva0,&#10;        noGravadoIva105 = this.noGravadoIva105,&#10;        noGravadoIva21 = this.noGravadoIva21,&#10;        noGravadoIva0 = this.noGravadoIva0,&#10;        direccionEntrega = this.direccionEntrega,&#10;        fechaEntrega = this.fechaEntrega,&#10;        horaEntrega = this.horaEntrega,&#10;        empresaId = this.empresaId,&#10;        puntoVenta = this.puntoVenta,&#10;        tipoFactura = this.tipoFactura,&#10;        tipoDocumento = this.tipoDocumento,&#10;        numeroDeDocumento = this.numeroDeDocumento,&#10;        qr = this.qr,&#10;        comprobanteIdBaja = this.comprobanteIdBaja,&#10;        sucursalId = this.sucursalId,&#10;        descuentoTotal = this.descuentoTotal,&#10;        incrementoTotal = this.incrementoTotal,&#10;        tipoComprobanteId = this.tipoComprobante?.id,&#10;    )&#10;}&#10;fun List&lt;Comprobante?&gt;.toComprobanteEntityList(): List&lt;ComprobanteEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Familia.toEntity(): FamiliaEntity {&#10;    return FamiliaEntity(&#10;        id = this.localId,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        numero = this.numero,&#10;        nombre = this.nombre&#10;    )&#10;}&#10;fun List&lt;Familia?&gt;.toFamiliaEntityList(): List&lt;FamiliaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun FormaPagoEntity.toDomainModel(): FormaPago {&#10;    val domain = FormaPago()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.nombre = this.nombre&#10;    domain.porcentaje = this.porcentaje&#10;    // La lógica para cargar `tipoFormaPago` se mantiene en el ViewModel.&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio a Entidad&#10;fun FormaPago.toEntity(): FormaPagoEntity {&#10;    return FormaPagoEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará&#10;        nombre = this.nombre,&#10;        porcentaje = this.porcentaje,&#10;        tipoFormaPagoId = this.tipoFormaPago?.id&#10;    )&#10;}&#10;fun List&lt;FormaPago?&gt;.toFormaPagoEntityList(): List&lt;FormaPagoEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Localidad.toEntity(): LocalidadEntity {&#10;    return LocalidadEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        codigoPostal = this.codigoPostal,&#10;        provinciaId = this.provincia?.id&#10;    )&#10;}&#10;fun List&lt;Localidad?&gt;.toLocalidadEntityList(): List&lt;LocalidadEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun MonedaEntity.toDomainModel(): Moneda {&#10;    val domain = Moneda()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.simbolo = this.simbolo&#10;    domain.nombre = this.nombre&#10;    domain.cotizacion = this.cotizacion&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio a Entidad&#10;fun Moneda.toEntity(): MonedaEntity {&#10;    return MonedaEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        simbolo = this.simbolo,&#10;        nombre = this.nombre,&#10;        cotizacion = this.cotizacion&#10;    )&#10;}&#10;fun List&lt;Moneda?&gt;.toMonedaEntityList(): List&lt;MonedaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Pais.toEntity(): PaisEntity {&#10;    return PaisEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre&#10;    )&#10;}&#10;fun List&lt;Pais?&gt;.toPaisEntityList(): List&lt;PaisEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Producto.toEntity(): ProductoEntity {&#10;    return ProductoEntity(&#10;        id = this.localId,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        codigo = this.codigo,&#10;        descripcion = this.descripcion,&#10;        descripcionAmpliada = this.descripcionAmpliada,&#10;        stock = this.stock,&#10;        stockMinimo = this.stockMinimo,&#10;        stockPedido = this.stockPedido,&#10;        codigoBarra = this.codigoBarra,&#10;        articuloActivado = this.articuloActivado,&#10;        productoBalanza = this.productoBalanza,&#10;        precio1 = this.precio1,&#10;        precio2 = this.precio2,&#10;        precio3 = this.precio3,&#10;        precio4 = this.precio4,&#10;        monedaId = this.moneda?.id,&#10;        tasaIvaId = this.tasaIva?.id,&#10;        incluyeIva = this.incluyeIva,&#10;        impuestoInterno = this.impuestoInterno,&#10;        tipoImpuestoInterno = this.tipoImpuestoInterno,&#10;        precio1ImpuestoInterno = this.precio1ImpuestoInterno,&#10;        precio2ImpuestoInterno = this.precio2ImpuestoInterno,&#10;        precio3ImpuestoInterno = this.precio3ImpuestoInterno,&#10;        precioCosto = this.precioCosto,&#10;        fraccionado = this.fraccionado,&#10;        rg5329_23 = this.rg5329_23,&#10;        activo = this.activo,&#10;        textoPanel = this.textoPanel,&#10;        iibb = this.iibb,&#10;        codigoBarra2 = this.codigoBarra2,&#10;        oferta = this.oferta,&#10;        margenGanancia = this.margenGanancia,&#10;        favorito = this.favorito,&#10;        familiaId = this.familia?.id,&#10;        agrupacionId = this.agrupacion?.id,&#10;        proveedorId = this.proveedor?.id,&#10;        tipoId = this.tipo?.id,&#10;        unidadId = this.unidad?.id&#10;    )&#10;}&#10;fun List&lt;Producto?&gt;.toProductoEntityList(): List&lt;ProductoEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun PromocionEntity.toDomainModel(): Promocion {&#10;    val domain = Promocion()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.nombre = this.nombre&#10;    domain.descripcion = this.descripcion&#10;    domain.porcentaje = this.porcentaje&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun Promocion.toEntity(): PromocionEntity {&#10;    return PromocionEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        nombre = this.nombre,&#10;        descripcion = this.descripcion,&#10;        porcentaje = this.porcentaje&#10;    )&#10;}&#10;fun List&lt;Promocion?&gt;.toPromocionEntityList(): List&lt;PromocionEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun List&lt;Proveedor?&gt;.toProveedorEntityList(): List&lt;ProveedorEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Provincia.toEntity(): ProvinciaEntity {&#10;    return ProvinciaEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        paisId = this.pais?.id&#10;    )&#10;}&#10;fun List&lt;Provincia?&gt;.toProvinciaEntityList(): List&lt;ProvinciaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;&#10;&#10;&#10;fun Rol.toEntity(): RolEntity {&#10;    return RolEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        descripcion = this.descripcion&#10;    )&#10;}&#10;fun List&lt;Rol?&gt;.toRolEntityList(): List&lt;RolEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun StockProducto.toEntity(): StockProductoEntity {&#10;    return StockProductoEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        codigo = this.codigo,&#10;        stockInicial = this.stockInicial,&#10;        controlaStock = this.controlaStock,&#10;        puntoPedido = this.puntoPedido,&#10;        largo = this.largo,&#10;        alto = this.alto,&#10;        ancho = this.ancho,&#10;        peso = this.peso,&#10;        unidadId = this.unidadId,&#10;        ubicacionId = this.ubicacionId,&#10;        proveedoresId = this.proveedoresId,&#10;        productoId = this.productoId,&#10;        empresaId = this.empresaId,&#10;        stockActual = this.stockActual,&#10;        sucursalId = this.sucursalId&#10;    )&#10;}&#10;fun List&lt;StockProducto?&gt;.toStockProductoEntityList(): List&lt;StockProductoEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Subcategoria.toEntity(): SubcategoriaEntity {&#10;    return SubcategoriaEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        seImprime = this.seImprime&#10;    )&#10;}&#10;fun List&lt;Subcategoria?&gt;.toSubcategoriaEntityList(): List&lt;SubcategoriaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Sucursal.toEntity(): SucursalEntity {&#10;    return SucursalEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        direccion = this.direccion&#10;        // CAMBIO: Los campos que no existen en la entidad se eliminan del mapper.&#10;    )&#10;}&#10;fun List&lt;Sucursal?&gt;.toSucursalEntityList(): List&lt;SucursalEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun TasaIva.toEntity(): TasaIvaEntity {&#10;    return TasaIvaEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        tasa = this.tasa&#10;    )&#10;}&#10;fun List&lt;TasaIva?&gt;.toTasaIvaEntityList(): List&lt;TasaIvaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Tipo.toEntity(): TipoEntity {&#10;    return TipoEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre&#10;    )&#10;}&#10;fun List&lt;Tipo?&gt;.toTipoEntityList(): List&lt;TipoEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun TipoComprobante.toEntity(): TipoComprobanteEntity {&#10;    return TipoComprobanteEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre&#10;    )&#10;}&#10;fun List&lt;TipoComprobante?&gt;.toTipoComprobanteEntityList(): List&lt;TipoComprobanteEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun TipoDocumentoEntity.toDomainModel(): TipoDocumento {&#10;    val domain = TipoDocumento()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.nombre = this.nombre&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun TipoDocumento.toEntity(): TipoDocumentoEntity {&#10;    return TipoDocumentoEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        nombre = this.nombre,&#10;        abrev = null, // Asumimos que estos campos no se gestionan desde la app&#10;        descripcion = null&#10;    )&#10;}&#10;fun List&lt;TipoDocumento?&gt;.toTipoDocumentoEntityList(): List&lt;TipoDocumentoEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun TipoFormaPago.toEntity(): TipoFormaPagoEntity {&#10;    return TipoFormaPagoEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre&#10;    )&#10;}&#10;fun List&lt;TipoFormaPago?&gt;.toTipoFormaPagoEntityList(): List&lt;TipoFormaPagoEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun List&lt;TipoIVA?&gt;.toTipoIvaEntityList(): List&lt;TipoIvaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun UnidadEntity.toDomainModel(): Unidad {&#10;    val domain = Unidad()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.nombre = this.nombre&#10;    domain.simbolo = this.simbolo&#10;    // El campo 'simbolo' no existe en UnidadEntity, por lo que se mantiene la lógica actual.&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun Unidad.toEntity(): UnidadEntity {&#10;    return UnidadEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        nombre = this.nombre,&#10;        simbolo = this.simbolo ?: &quot;&quot;, // Asignamos un valor por defecto si es null.&#10;        // El campo 'simbolo' no existe en UnidadEntity.&#10;    )&#10;}&#10;fun List&lt;Unidad?&gt;.toUnidadEntityList(): List&lt;UnidadEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Usuario.toEntity(): UsuarioEntity {&#10;    return UsuarioEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombreUsuario = this.nombreUsuario,&#10;        nombreCompleto = this.nombreCompleto,&#10;        rolId = this.rol?.id,&#10;        sucursalId = this.sucursal?.id,&#10;        vendedorId = this.vendedor?.id,&#10;        email = null // CAMBIO: El modelo no tiene `email`.&#10;    )&#10;}&#10;fun List&lt;Usuario?&gt;.toUsuarioEntityList(): List&lt;UsuarioEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Vendedor.toEntity(): VendedorEntity {&#10;    return VendedorEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        porcentajeComision = this.porcentajeComision ?: 0.0&#10;    )&#10;}&#10;fun List&lt;Vendedor?&gt;.toVendedorEntityList(): List&lt;VendedorEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun ComprobanteConDetalles.toComprobanteConDetalle(): ComprobanteConDetalle {&#10;    // 1. Convierte la parte principal (ComprobanteEntity) al modelo de dominio.&#10;    val domainComprobante = this.comprobante.toDomainModel()&#10;&#10;    // 2. Convierte y asigna las entidades relacionadas.&#10;    val domainCliente = this.cliente?.toDomainModel()&#10;    val domainVendedor = this.vendedor?.toDomainModel()&#10;    val domainTipoComprobante = this.tipoComprobante?.toDomainModel() // &lt;-- ¡AQUÍ SE CARGA EL TIPO!&#10;    // Mapeamos las entidades de pago a los modelos de dominio.&#10;    // NOTA: Esto es una simplificación. Idealmente, aquí se buscaría el objeto `FormaPago` completo.&#10;    val formasDePago = this.pagos.map { pagoEntity -&gt;&#10;        FormaPagoComprobante(&#10;            id = pagoEntity.formaPagoId,&#10;            nombre = &quot;Forma de Pago ID: ${pagoEntity.formaPagoId}&quot;, // Placeholder&#10;            porcentaje = 0, // Placeholder&#10;            importe = String.format(Locale.US, &quot;%.2f&quot;, pagoEntity.importe),&#10;            tipoFormaPago = TipoFormaPago() // Placeholder&#10;        )&#10;    }&#10;&#10;    // Mapeamos las entidades de promoción a los modelos de dominio.&#10;    // NOTA: Aquí también se necesitaría buscar el objeto `Promocion` completo.&#10;    val promociones = this.promociones.map { promoEntity -&gt;&#10;        Promocion().apply { id = promoEntity.promocionId }&#10;    }&#10;&#10;    // Asignamos las listas mapeadas al comprobante de dominio.&#10;    domainComprobante.formas_de_pago = formasDePago&#10;    domainComprobante.promociones = promociones&#10;    return ComprobanteConDetalle(&#10;        comprobante = domainComprobante,&#10;        cliente = domainCliente,&#10;        vendedor = domainVendedor,&#10;        tipoComprobante = domainTipoComprobante&#10;    )&#10;}&#10;&#10;&#10;fun ProvinciaConDetalles.toDomainModel(): Provincia {&#10;    val provinciaModel = this.provincia.toDomainModel()&#10;    provinciaModel.pais = this.pais?.toDomainModel()&#10;    return provinciaModel&#10;}&#10;&#10;fun UsuarioConDetalles.toDomainModel(): Usuario {&#10;    val usuarioModel = this.usuario.toDomainModel()&#10;    usuarioModel.rol = this.rol?.toDomainModel()&#10;    usuarioModel.sucursal = this.sucursal?.toDomainModel()&#10;    usuarioModel.vendedor = this.vendedor?.toDomainModel()&#10;    return usuarioModel&#10;}&#10;&#10;fun Comprobante.toUploadRequest(): ComprobanteUploadRequest {&#10;    val promocionesRequest = this.promociones?.map { PromocionRequest(id = it.id) }&#10;    val pagosRequest = this.formas_de_pago.map {&#10;        FormaPagoRequest(&#10;            id = it.id,&#10;            importe = it.importe.toDoubleOrNull() ?: 0.0&#10;        )&#10;    }&#10;    return ComprobanteUploadRequest(&#10;        numero = this.numero,&#10;        cuotas = this.cuotas,&#10;        clienteId = this.clienteId,&#10;        remito = this.remito,&#10;        persona = this.persona,&#10;        provinciaId = this.provinciaId,&#10;        fecha = this.fecha,&#10;        fechaBaja = this.fechaBaja,&#10;        motivoBaja = this.motivoBaja,&#10;        hora = this.hora,&#10;        fechaProceso = this.fechaProceso,&#10;        letra = this.letra,&#10;        numeroFactura = this.numeroFactura,&#10;        prefijoFactura = this.prefijoFactura,&#10;        operacionNegocioId = this.operacionNegocioId,&#10;        retencionIva = this.retencionIva,&#10;        retencionIibb = this.retencionIibb,&#10;        retencionGanancias = this.retencionGanancias,&#10;        porcentajeGanancias = this.porcentajeGanancias,&#10;        porcentajeIibb = this.porcentajeIibb,&#10;        porcentajeIva = this.porcentajeIva,&#10;        noGravado = this.noGravado,&#10;        importeIva = this.importeIva,&#10;        total = this.total,&#10;        totalPagado = this.totalPagado,&#10;        condicionVentaId = this.condicionVentaId,&#10;        descripcionFlete = this.descripcionFlete,&#10;        vendedorId = this.vendedorId,&#10;        recibo = this.recibo,&#10;        observaciones1 = this.observaciones1,&#10;        observaciones2 = this.observaciones2,&#10;        observaciones3 = this.observaciones3,&#10;        observaciones4 = this.observaciones4,&#10;        descuento = this.descuento,&#10;        descuento1 = this.descuento1,&#10;        descuento2 = this.descuento2,&#10;        descuento3 = this.descuento3,&#10;        descuento4 = this.descuento4,&#10;        iva2 = this.iva2,&#10;        impresa = this.impresa,&#10;        cancelado = this.cancelado,&#10;        nombreCliente = this.nombreCliente,&#10;        direccionCliente = this.direccionCliente,&#10;        localidadCliente = this.localidadCliente,&#10;        garantia = this.garantia,&#10;        concepto = this.concepto,&#10;        notas = this.notas,&#10;        lineaPagoUltima = this.lineaPagoUltima,&#10;        relacionTk = this.relacionTk,&#10;        totalIibb = this.totalIibb,&#10;        importeIibb = this.importeIibb,&#10;        provinciaCategoriaIibbId = this.provinciaCategoriaIibbId,&#10;        importeRetenciones = this.importeRetenciones,&#10;        provinciaIvaProveedorId = this.provinciaIvaProveedorId,&#10;        gananciasProveedorId = this.gananciasProveedorId,&#10;        importeGanancias = this.importeGanancias,&#10;        numeroIibb = this.numeroIibb,&#10;        numeroGanancias = this.numeroGanancias,&#10;        gananciasProveedor = this.gananciasProveedor,&#10;        cae = this.cae,&#10;        fechaVencimiento = this.fechaVencimiento,&#10;        remitoCliente = this.remitoCliente,&#10;        textoDolares = this.textoDolares,&#10;        comprobanteFinal = this.comprobanteFinal,&#10;        numeroGuia1 = this.numeroGuia1,&#10;        numeroGuia2 = this.numeroGuia2,&#10;        numeroGuia3 = this.numeroGuia3,&#10;        tipoAlicuota1 = this.tipoAlicuota1,&#10;        tipoAlicuota2 = this.tipoAlicuota2,&#10;        tipoAlicuota3 = this.tipoAlicuota3,&#10;        importeIva105 = this.importeIva105,&#10;        importeIva21 = this.importeIva21,&#10;        importeIva0 = this.importeIva0,&#10;        noGravadoIva105 = this.noGravadoIva105,&#10;        noGravadoIva21 = this.noGravadoIva21,&#10;        noGravadoIva0 = this.noGravadoIva0,&#10;        direccionEntrega = this.direccionEntrega,&#10;        fechaEntrega = this.fechaEntrega,&#10;        horaEntrega = this.horaEntrega,&#10;        puntoVenta = this.puntoVenta,&#10;        tipoFactura = this.tipoFactura,&#10;        tipoDocumento = this.tipoDocumento,&#10;        numeroDeDocumento = this.numeroDeDocumento,&#10;        qr = this.qr,&#10;        comprobanteIdBaja = this.comprobanteIdBaja,&#10;        sucursalId = this.sucursalId,&#10;        descuentoTotal = this.descuentoTotal,&#10;        incrementoTotal = this.incrementoTotal,&#10;        tipoComprobanteId = this.tipoComprobanteId,&#10;        // --- CAMPOS MAPEADOS ---&#10;        promociones = promocionesRequest,&#10;        formas_de_pago = pagosRequest&#10;    )&#10;}&#10;&#10;fun RenglonComprobante.toUploadRequest(comprobanteServerId: Int): RenglonUploadRequest {&#10;    return RenglonUploadRequest(&#10;&#10;        productoId = this.producto.id,&#10;        descripcion = this.descripcion,&#10;        cantidad = this.cantidad,&#10;        precioUnitario = this.precioUnitario,&#10;        tasaIva = this.tasaIva,&#10;        totalLinea = this.totalLinea&#10;    )&#10;}&#10;&#10;fun ClienteConDetalles.toDomainModel(): Cliente {&#10;    val domainModel = this.cliente.toDomainModel()&#10;    domainModel.localId = this.cliente.id&#10;    domainModel.tipoDocumento = this.tipoDocumento?.toDomainModel()&#10;    domainModel.tipoIva = this.tipoIva?.toDomainModel()&#10;    domainModel.localidad = this.localidad?.toDomainModel()&#10;    // Si la localidad tiene una provincia, también la mapeamos&#10;    this.localidad?.provinciaId?.let { provId -&gt;&#10;        // Este es un caso especial. Asumimos que la provincia ya está en el objeto Localidad&#10;        // o la cargamos aquí si es necesario, aunque lo ideal es que la relación anidada funcione.&#10;        // El mapper de LocalidadConDetalles debería encargarse de esto.&#10;        // Por simplicidad, asumimos que el modelo de dominio de Localidad ya tiene la Provincia.&#10;    }&#10;    domainModel.provincia = this.provincia?.toDomainModel()&#10;    domainModel.categoria = this.categoria?.toDomainModel()&#10;    domainModel.vendedores = this.vendedor?.toDomainModel()&#10;    return domainModel&#10;}&#10;&#10;fun Cliente.toUploadRequest(): ClienteUploadRequest {&#10;    return ClienteUploadRequest(&#10;&#10;        nombre = this.nombre,&#10;        cuit = this.cuit,&#10;        tipoDocumentoId = this.tipoDocumento?.id,&#10;        numeroDocumento = this.numeroDocumento,&#10;        direccionComercial = this.direccionComercial,&#10;        direccionEntrega = this.direccionEntrega,&#10;        localidadId = this.localidad?.id,&#10;        telefono = this.telefono,&#10;        celular = this.celular,&#10;        email = this.email,&#10;        contacto = this.contacto,&#10;        telefonoContacto = this.telefonoContacto,&#10;        categoriaId = this.categoria?.id,&#10;        vendedoresId = this.vendedores?.id,&#10;        porcentajeDescuento = this.porcentajeDescuento,&#10;        limiteCredito = this.limiteCredito,&#10;        saldoInicial = this.saldoInicial,&#10;        saldoActual = this.saldoActual,&#10;        fechaUltimaCompra = this.fechaUltimaCompra,&#10;        fechaUltimoPago = this.fechaUltimoPago,&#10;        percepcionIibb = this.percepcionIibb,&#10;        desactivado = this.desactivado,&#10;        tipoIvaId = this.tipoIva?.id,&#10;        provinciaId = this.provincia?.id&#10;    )&#10;}&#10;&#10;fun Agrupacion.toUploadRequest(): AgrupacionUploadRequest = AgrupacionUploadRequest(numero, nombre, color, icono)&#10;fun Categoria.toUploadRequest(): CategoriaUploadRequest = CategoriaUploadRequest(nombre, seImprime)&#10;fun CierreCaja.toUploadRequest(): CierreCajaUploadRequest = CierreCajaUploadRequest(fecha, totalVentas, totalGastos, efectivoInicial, efectivoFinal, tipoCajaId, usuario?.id)&#10;fun Familia.toUploadRequest(): FamiliaUploadRequest = FamiliaUploadRequest(numero.toString(), nombre)&#10;fun FormaPago.toUploadRequest(): FormaPagoUploadRequest = FormaPagoUploadRequest(nombre, porcentaje,activa, tipoFormaPago?.id)&#10;fun Localidad.toUploadRequest(): LocalidadUploadRequest = LocalidadUploadRequest(nombre, codigoPostal, provincia?.id)&#10;fun Moneda.toUploadRequest(): MonedaUploadRequest = MonedaUploadRequest(simbolo, nombre, cotizacion)&#10;fun Pais.toUploadRequest(): PaisUploadRequest = PaisUploadRequest(nombre)&#10;fun Producto.toUploadRequest(): ProductoUploadRequest = ProductoUploadRequest(codigo, descripcion, descripcionAmpliada, stock, stockMinimo, stockPedido, codigoBarra, articuloActivado, productoBalanza, precio1, precio2, precio3,  moneda?.id, tasaIva?.id, incluyeIva, impuestoInterno, tipoImpuestoInterno, precioCosto, fraccionado, rg5329_23, activo, textoPanel, iibb, codigoBarra2, oferta, margenGanancia, favorito, familia?.id, agrupacion?.id, proveedor?.id, tipo?.id, unidad?.id)&#10;fun Promocion.toUploadRequest(): PromocionUploadRequest = PromocionUploadRequest(nombre, descripcion, porcentaje)&#10;fun Provincia.toUploadRequest(): ProvinciaUploadRequest = ProvinciaUploadRequest(nombre, pais?.id)&#10;fun Rol.toUploadRequest(): RolUploadRequest = RolUploadRequest(nombre, descripcion)&#10;fun Sucursal.toUploadRequest(): SucursalUploadRequest = SucursalUploadRequest(nombre, direccion)&#10;fun TasaIva.toUploadRequest(): TasaIvaUploadRequest = TasaIvaUploadRequest(nombre, tasa)&#10;fun TipoComprobante.toUploadRequest(): TipoComprobanteUploadRequest = TipoComprobanteUploadRequest(nombre, numero)&#10;fun TipoDocumento.toUploadRequest(): TipoDocumentoUploadRequest = TipoDocumentoUploadRequest(nombre, null) // Asumiendo que 'abrev' no se gestiona en la app&#10;fun TipoFormaPago.toUploadRequest(): TipoFormaPagoUploadRequest = TipoFormaPagoUploadRequest(nombre)&#10;&#10;fun Tipo.toUploadRequest(): TipoUploadRequest = TipoUploadRequest(nombre, numero)&#10;fun Unidad.toUploadRequest(): UnidadUploadRequest = UnidadUploadRequest(nombre, simbolo)&#10;fun Usuario.toUploadRequest(): UsuarioUploadRequest = UsuarioUploadRequest(nombreUsuario, null, nombreCompleto, activo, rol?.id, sucursal?.id, vendedor?.id) // Se envía null en password para no cambiarlo&#10;fun Vendedor.toUploadRequest(): VendedorUploadRequest = VendedorUploadRequest(nombre, direccion, telefono, porcentajeComision, fechaIngreso)&#10;fun Proveedor.toUploadRequest(): ProveedorUploadRequest {&#10;    return ProveedorUploadRequest(&#10;        razonSocial = this.razonSocial,&#10;        direccion = this.direccion,&#10;        localidadId = this.localidad?.id,&#10;        telefono = this.telefono,&#10;        email = this.email,&#10;        tipoIvaId = this.tipoIva?.id,&#10;        cuit = this.cuit,&#10;        categoriaId = this.categoria?.id,&#10;        subcategoriaId = this.subcategoria?.id,&#10;        fechaUltimaCompra = this.fechaUltimaCompra,&#10;        fechaUltimoPago = this.fechaUltimoPago,&#10;        saldoActual = this.saldoActual&#10;    )&#10;}&#10;&#10;fun TipoIVA.toUploadRequest(): TipoIvaUploadRequest {&#10;    return TipoIvaUploadRequest(&#10;        nombre = this.nombre,&#10;&#10;    )&#10;}&#10;&#10;fun Pago.toEntity(comprobanteLocalId: Long): ComprobantePagoEntity {&#10;    return ComprobantePagoEntity(&#10;        comprobanteLocalId = comprobanteLocalId,&#10;        formaPagoId = this.formaPago.id,&#10;        importe = this.monto,&#10;        syncStatus = SyncStatus.CREATED // Los pagos siempre se crean localmente primero&#10;    )&#10;}&#10;&#10;fun ar.com.nexofiscal.nexofiscalposv2.db.entity.NotificacionEntity.toDomainModel(): ar.com.nexofiscal.nexofiscalposv2.models.Notificacion {&#10;    val domain = ar.com.nexofiscal.nexofiscalposv2.models.Notificacion()&#10;    domain.localId = this.id&#10;    domain.id = this.serverId ?: 0&#10;    domain.nombre = this.nombre&#10;    domain.mensaje = this.mensaje&#10;    domain.empresaId = this.empresaId&#10;    domain.activo = this.activo&#10;    domain.tipoNotificacionId = this.tipoNotificacionId&#10;    return domain&#10;}&#10;&#10;fun ar.com.nexofiscal.nexofiscalposv2.models.Notificacion.toEntity(): ar.com.nexofiscal.nexofiscalposv2.db.entity.NotificacionEntity {&#10;    return ar.com.nexofiscal.nexofiscalposv2.db.entity.NotificacionEntity(&#10;        id = this.localId,&#10;        serverId = this.id,&#10;        syncStatus = ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        mensaje = this.mensaje,&#10;        empresaId = this.empresaId,&#10;        activo = this.activo,&#10;        tipoNotificacionId = this.tipoNotificacionId&#10;    )&#10;}&#10;&#10;fun List&lt;ar.com.nexofiscal.nexofiscalposv2.models.Notificacion?&gt;.toNotificacionEntityList(): List&lt;ar.com.nexofiscal.nexofiscalposv2.db.entity.NotificacionEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun List&lt;ar.com.nexofiscal.nexofiscalposv2.db.entity.NotificacionEntity&gt;.toNotificacionDomainModelList(): List&lt;ar.com.nexofiscal.nexofiscalposv2.models.Notificacion&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.mappers&#10;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.*&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ComprobanteConDetalle&#10;import ar.com.nexofiscal.nexofiscalposv2.models.*&#10;import ar.com.nexofiscal.nexofiscalposv2.screens.Pago&#10;import com.google.gson.Gson&#10;import java.util.Locale&#10;&#10;// MAPPERS DE ENTIDAD A MODELO DE DOMINIO (API)&#10;// Nota: Se han corregido los mappers para que solo asignen los campos que realmente existen en el modelo de dominio.&#10;&#10;fun List&lt;AgrupacionEntity&gt;.toAgrupacionDomainModelList(): List&lt;Agrupacion&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun List&lt;CategoriaEntity&gt;.toCategoriaDomainModelList(): List&lt;Categoria&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun CierreCajaEntity.toDomainModel(): CierreCaja {&#10;    val domain = CierreCaja()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.fecha = this.fecha&#10;    domain.totalVentas = this.totalVentas&#10;    domain.totalGastos = this.totalGastos&#10;    domain.efectivoInicial = this.efectivoInicial&#10;    domain.efectivoFinal = this.efectivoFinal&#10;    domain.tipoCajaId = this.tipoCajaId&#10;    this.usuarioId?.let { domain.usuario = Usuario().apply { id = it } }&#10;    return domain&#10;}&#10;&#10;fun List&lt;CierreCajaEntity&gt;.toCierreCajaDomainModelList(): List&lt;CierreCaja&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun ClienteEntity.toDomainModel(): Cliente {&#10;    val domain = Cliente()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.localId = this.id&#10;    domain.nroCliente = this.nroCliente&#10;    domain.nombre = this.nombre&#10;    domain.cuit = this.cuit&#10;    this.tipoDocumentoId?.let { domain.tipoDocumento = TipoDocumento().apply { id = it } }&#10;    domain.numeroDocumento = this.numeroDocumento&#10;    domain.direccionComercial = this.direccionComercial&#10;    domain.direccionEntrega = this.direccionEntrega&#10;    this.localidadId?.let { domain.localidad = Localidad().apply { id = it } }&#10;    domain.telefono = this.telefono&#10;    domain.celular = this.celular&#10;    domain.email = this.email&#10;    domain.contacto = this.contacto&#10;    domain.telefonoContacto = this.telefonoContacto&#10;    this.categoriaId?.let { domain.categoria = Categoria().apply { id = it } }&#10;    this.vendedoresId?.let { domain.vendedores = Vendedor().apply { id = it } }&#10;    domain.porcentajeDescuento = this.porcentajeDescuento&#10;    domain.limiteCredito = this.limiteCredito&#10;    domain.saldoInicial = this.saldoInicial&#10;    domain.saldoActual = this.saldoActual&#10;    domain.fechaUltimaCompra = this.fechaUltimaCompra&#10;    domain.fechaUltimoPago = this.fechaUltimoPago&#10;    domain.percepcionIibb = this.percepcionIibb&#10;    domain.desactivado = this.desactivado&#10;    this.tipoIvaId?.let {&#10;        domain.tipoIva = TipoIVA().apply { id = it }&#10;        domain.tipoIvaId = it&#10;    }&#10;    this.provinciaId?.let { domain.provincia = Provincia().apply { id = it } }&#10;    return domain&#10;}&#10;&#10;fun List&lt;ClienteEntity&gt;.toClienteDomainModelList(): List&lt;Cliente&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun CombinacionEntity.toDomainModel(): Combinacion {&#10;    return Combinacion(&#10;        productoPrincipalId = this.productoPrincipalId,&#10;        subproductoId = this.subproductoId,&#10;        cantidad = this.cantidad,&#10;        empresaId = this.empresaId&#10;    )&#10;}&#10;&#10;fun List&lt;CombinacionEntity&gt;.toCombinacionDomainModelList(): List&lt;Combinacion&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun ComprobanteEntity.toDomainModel(): Comprobante {&#10;    return Comprobante(&#10;        localId = this.id,&#10;        id = this.serverId ?: 0,&#10;        serverId = this.serverId,&#10;        numero = this.numero,&#10;        cuotas = this.cuotas,&#10;        clienteId = this.clienteId,&#10;        remito = this.remito,&#10;        persona = this.persona,&#10;        provinciaId = this.provinciaId,&#10;        fecha = this.fecha,&#10;        fechaBaja = this.fechaBaja,&#10;        motivoBaja = this.motivoBaja,&#10;        hora = this.hora,&#10;        fechaProceso = this.fechaProceso,&#10;        letra = this.letra,&#10;        numeroFactura = this.numeroFactura,&#10;        prefijoFactura = this.prefijoFactura,&#10;        operacionNegocioId = this.operacionNegocioId,&#10;        retencionIva = this.retencionIva,&#10;        retencionIibb = this.retencionIibb,&#10;        retencionGanancias = this.retencionGanancias,&#10;        porcentajeGanancias = this.porcentajeGanancias,&#10;        porcentajeIibb = this.porcentajeIibb,&#10;        porcentajeIva = this.porcentajeIva,&#10;        noGravado = this.noGravado,&#10;        importeIva = this.importeIva,&#10;        total = this.total,&#10;        totalPagado = this.totalPagado,&#10;        condicionVentaId = this.condicionVentaId,&#10;        descripcionFlete = this.descripcionFlete,&#10;        vendedorId = this.vendedorId,&#10;        recibo = this.recibo,&#10;        observaciones1 = this.observaciones1,&#10;        observaciones2 = this.observaciones2,&#10;        observaciones3 = this.observaciones3,&#10;        observaciones4 = this.observaciones4,&#10;        descuento = this.descuento,&#10;        descuento1 = this.descuento1,&#10;        descuento2 = this.descuento2,&#10;        descuento3 = this.descuento3,&#10;        descuento4 = this.descuento4,&#10;        iva2 = this.iva2,&#10;        impresa = this.impresa,&#10;        cancelado = this.cancelado,&#10;        nombreCliente = this.nombreCliente,&#10;        direccionCliente = this.direccionCliente,&#10;        localidadCliente = this.localidadCliente,&#10;        garantia = this.garantia,&#10;        concepto = this.concepto,&#10;        notas = this.notas,&#10;        lineaPagoUltima = this.lineaPagoUltima,&#10;        relacionTk = this.relacionTk,&#10;        totalIibb = this.totalIibb,&#10;        importeIibb = this.importeIibb,&#10;        provinciaCategoriaIibbId = this.provinciaCategoriaIibbId,&#10;        importeRetenciones = this.importeRetenciones,&#10;        provinciaIvaProveedorId = this.provinciaIvaProveedorId,&#10;        gananciasProveedorId = this.gananciasProveedorId,&#10;        importeGanancias = this.importeGanancias,&#10;        numeroIibb = this.numeroIibb,&#10;        numeroGanancias = this.numeroGanancias,&#10;        gananciasProveedor = this.gananciasProveedor,&#10;        cae = this.cae,&#10;        fechaVencimiento = this.fechaVencimiento,&#10;        remitoCliente = this.remitoCliente,&#10;        textoDolares = this.textoDolares,&#10;        comprobanteFinal = this.comprobanteFinal,&#10;        numeroGuia1 = this.numeroGuia1,&#10;        numeroGuia2 = this.numeroGuia2,&#10;        numeroGuia3 = this.numeroGuia3,&#10;        tipoAlicuota1 = this.tipoAlicuota1,&#10;        tipoAlicuota2 = this.tipoAlicuota2,&#10;        tipoAlicuota3 = this.tipoAlicuota3,&#10;        importeIva105 = this.importeIva105,&#10;        importeIva21 = this.importeIva21,&#10;        importeIva0 = this.importeIva0,&#10;        noGravadoIva105 = this.noGravadoIva105,&#10;        noGravadoIva21 = this.noGravadoIva21,&#10;        noGravadoIva0 = this.noGravadoIva0,&#10;        direccionEntrega = this.direccionEntrega,&#10;        fechaEntrega = this.fechaEntrega,&#10;        horaEntrega = this.horaEntrega,&#10;        empresaId = this.empresaId,&#10;        puntoVenta = this.puntoVenta,&#10;        tipoFactura = this.tipoFactura,&#10;        tipoDocumento = this.tipoDocumento,&#10;        numeroDeDocumento = this.numeroDeDocumento,&#10;        qr = this.qr,&#10;        comprobanteIdBaja = this.comprobanteIdBaja,&#10;        sucursalId = this.sucursalId,&#10;        descuentoTotal = this.descuentoTotal,&#10;        incrementoTotal = this.incrementoTotal,&#10;        cliente = null,&#10;        vendedor = null,&#10;        provincia = null,&#10;        tipoComprobante = null,&#10;        formas_de_pago = emptyList(),&#10;        promociones = null,&#10;        tipoComprobanteId = this.tipoComprobanteId,&#10;&#10;&#10;&#10;&#10;    )&#10;}&#10;&#10;fun List&lt;ComprobanteEntity&gt;.toComprobanteDomainModelList(): List&lt;Comprobante&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun FamiliaEntity.toDomainModel(): Familia {&#10;    val domain = Familia()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.numero = this.numero&#10;    domain.nombre = this.nombre&#10;    return domain&#10;}&#10;&#10;&#10;&#10;fun List&lt;FamiliaEntity&gt;.toFamiliaDomainModelList(): List&lt;Familia&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun List&lt;FormaPagoEntity&gt;.toFormaPagoDomainModelList(): List&lt;FormaPago&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun LocalidadEntity.toDomainModel(): Localidad {&#10;    val domain = Localidad()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    domain.codigoPostal = this.codigoPostal&#10;    this.provinciaId?.let { domain.provincia = Provincia().apply { id = it } }&#10;    return domain&#10;}&#10;&#10;fun List&lt;LocalidadEntity&gt;.toLocalidadDomainModelList(): List&lt;Localidad&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;&#10;fun List&lt;MonedaEntity&gt;.toMonedaDomainModelList(): List&lt;Moneda&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun PaisEntity.toDomainModel(): Pais {&#10;    val domain = Pais()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    return domain&#10;}&#10;&#10;fun List&lt;PaisEntity&gt;.toPaisDomainModelList(): List&lt;Pais&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun ProductoEntity.toDomainModel(): Producto {&#10;    val domain = Producto()&#10;    domain.localId = this.id&#10;    domain.id = this.serverId ?: this.id&#10;    domain.codigo = this.codigo&#10;    domain.descripcion = this.descripcion&#10;    domain.descripcionAmpliada = this.descripcionAmpliada&#10;    domain.stock = this.stock&#10;    domain.stockMinimo = this.stockMinimo&#10;    domain.stockPedido = this.stockPedido&#10;    domain.codigoBarra = this.codigoBarra&#10;    domain.articuloActivado = this.articuloActivado&#10;    domain.productoBalanza = this.productoBalanza&#10;    domain.precio1 = this.precio1&#10;    domain.precio2 = this.precio2&#10;    domain.precio3 = this.precio3&#10;    domain.precio4 = this.precio4&#10;    this.monedaId?.let { domain.moneda = Moneda().apply { id = it } }&#10;    this.tasaIvaId?.let { domain.tasaIva = TasaIva().apply { id = it } }&#10;    domain.incluyeIva = this.incluyeIva&#10;    domain.impuestoInterno = this.impuestoInterno&#10;    domain.tipoImpuestoInterno = this.tipoImpuestoInterno&#10;    domain.precio1ImpuestoInterno = this.precio1ImpuestoInterno&#10;    domain.precio2ImpuestoInterno = this.precio2ImpuestoInterno&#10;    domain.precio3ImpuestoInterno = this.precio3ImpuestoInterno&#10;    domain.precioCosto = this.precioCosto&#10;    domain.fraccionado = this.fraccionado&#10;    domain.rg5329_23 = this.rg5329_23&#10;    domain.activo = this.activo&#10;    domain.textoPanel = this.textoPanel&#10;    domain.iibb = this.iibb&#10;    domain.codigoBarra2 = this.codigoBarra2&#10;    domain.oferta = this.oferta&#10;    domain.margenGanancia = this.margenGanancia&#10;    domain.favorito = this.favorito&#10;    this.familiaId?.let { domain.familia = Familia().apply { id = it } }&#10;    this.agrupacionId?.let { domain.agrupacion = Agrupacion().apply { id = it } }&#10;    this.proveedorId?.let { domain.proveedor = Proveedor().apply { id = it } }&#10;    this.tipoId?.let { domain.tipo = Tipo().apply { id = it } }&#10;    this.unidadId?.let { domain.unidad = Unidad().apply { id = it } }&#10;    return domain&#10;}&#10;&#10;fun ProductoConDetalles.toDomainModel(): Producto {&#10;    // Esta función ya usa ProductoEntity.toDomainModel(), así que heredará la corrección.&#10;    val domainProducto = this.producto.toDomainModel()&#10;    domainProducto.moneda = this.moneda?.toDomainModel()&#10;    domainProducto.tasaIva = this.tasaIva?.toDomainModel()&#10;    domainProducto.familia = this.familia?.toDomainModel()&#10;    domainProducto.agrupacion = this.agrupacion?.toDomainModel()&#10;    domainProducto.proveedor = this.proveedor?.toDomainModel()&#10;    domainProducto.tipo = this.tipo?.toDomainModel()&#10;    domainProducto.unidad = this.unidad?.toDomainModel()&#10;    return domainProducto&#10;}&#10;&#10;fun List&lt;ProductoEntity&gt;.toProductoDomainModelList(): List&lt;Producto&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;&#10;&#10;fun List&lt;PromocionEntity&gt;.toPromocionDomainModelList(): List&lt;Promocion&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun ProveedorEntity.toDomainModel(): Proveedor {&#10;    val domain = Proveedor()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.razonSocial = this.razonSocial&#10;    domain.direccion = this.direccion&#10;    domain.telefono = this.telefono&#10;    domain.email = this.email&#10;    domain.cuit = this.cuit&#10;    domain.fechaUltimaCompra = this.fechaUltimaCompra&#10;    domain.fechaUltimoPago = this.fechaUltimoPago&#10;    domain.saldoActual = this.saldoActual&#10;    // Las entidades relacionadas se cargan en el ViewModel&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun Proveedor.toEntity(): ProveedorEntity {&#10;    return ProveedorEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        razonSocial = this.razonSocial,&#10;        direccion = this.direccion,&#10;        localidadId = this.localidad?.id,&#10;        telefono = this.telefono,&#10;        email = this.email,&#10;        tipoIvaId = this.tipoIva?.id,&#10;        cuit = this.cuit,&#10;        categoriaId = this.categoria?.id,&#10;        subcategoriaId = this.subcategoria?.id,&#10;        fechaUltimaCompra = this.fechaUltimaCompra,&#10;        fechaUltimoPago = this.fechaUltimoPago,&#10;        saldoActual = this.saldoActual&#10;    )&#10;}&#10;&#10;fun List&lt;ProveedorEntity&gt;.toProveedorDomainModelList(): List&lt;Proveedor&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun ProvinciaEntity.toDomainModel(): Provincia {&#10;    val domain = Provincia()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    this.paisId?.let { domain.pais = Pais().apply { id = it } }&#10;    return domain&#10;}&#10;&#10;fun List&lt;ProvinciaEntity&gt;.toProvinciaDomainModelList(): List&lt;Provincia&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun RenglonComprobanteEntity.toDomainModel(): RenglonComprobante {&#10;    val gson = Gson()&#10;    return gson.fromJson(this.data, RenglonComprobante::class.java)&#10;}&#10;&#10;fun List&lt;RenglonComprobanteEntity&gt;.toRenglonComprobanteDomainModelList(): List&lt;RenglonComprobante&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun RolEntity.toDomainModel(): Rol {&#10;    val domain = Rol()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    domain.descripcion = this.descripcion&#10;    return domain&#10;}&#10;&#10;fun List&lt;RolEntity&gt;.toRolDomainModelList(): List&lt;Rol&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun StockProductoEntity.toDomainModel(): StockProducto {&#10;    val domain = StockProducto()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.codigo = this.codigo&#10;    domain.stockInicial = this.stockInicial&#10;    domain.controlaStock = this.controlaStock&#10;    domain.puntoPedido = this.puntoPedido&#10;    domain.largo = this.largo&#10;    domain.alto = this.alto&#10;    domain.ancho = this.ancho&#10;    domain.peso = this.peso&#10;    domain.unidadId = this.unidadId&#10;    domain.ubicacionId = this.ubicacionId&#10;    domain.proveedoresId = this.proveedoresId&#10;    domain.productoId = this.productoId&#10;    domain.empresaId = this.empresaId&#10;    domain.stockActual = this.stockActual&#10;    domain.sucursalId = this.sucursalId&#10;    return domain&#10;}&#10;&#10;fun List&lt;StockProductoEntity&gt;.toStockProductoDomainModelList(): List&lt;StockProducto&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun SubcategoriaEntity.toDomainModel(): Subcategoria {&#10;    val domain = Subcategoria()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    domain.seImprime = this.seImprime&#10;    return domain&#10;}&#10;&#10;fun List&lt;SubcategoriaEntity&gt;.toSubcategoriaDomainModelList(): List&lt;Subcategoria&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun SucursalEntity.toDomainModel(): Sucursal {&#10;    val domain = Sucursal()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    domain.direccion = this.direccion&#10;    // CAMBIO: Faltaban campos que no existen en la entidad.&#10;    // domain.empresaId = this.empresaId &#10;    // domain.telefono = this.telefono&#10;    // domain.email = this.email&#10;    // domain.contactoNombre = this.contactoNombre&#10;    // ...&#10;    return domain&#10;}&#10;&#10;fun List&lt;SucursalEntity&gt;.toSucursalDomainModelList(): List&lt;Sucursal&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun TasaIvaEntity.toDomainModel(): TasaIva {&#10;    val domain = TasaIva()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    domain.tasa = this.tasa&#10;    return domain&#10;}&#10;&#10;fun List&lt;TasaIvaEntity&gt;.toTasaIvaDomainModelList(): List&lt;TasaIva&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun TipoComprobanteEntity.toDomainModel(): TipoComprobante {&#10;    val domain = TipoComprobante()&#10;    domain.id = this.serverId ?: this.id&#10;    // CAMBIO: El campo 'numero' no existe en TipoComprobanteEntity&#10;    // domain.numero = this.numero &#10;    domain.nombre = this.nombre&#10;    return domain&#10;}&#10;&#10;fun List&lt;TipoComprobanteEntity&gt;.toTipoComprobanteDomainModelList(): List&lt;TipoComprobante&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun List&lt;TipoDocumentoEntity&gt;.toTipoDocumentoDomainModelList(): List&lt;TipoDocumento&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun TipoEntity.toDomainModel(): Tipo {&#10;    val domain = Tipo()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    // CAMBIO: El campo 'numero' no existe en TipoEntity&#10;    // domain.numero = this.numero&#10;    return domain&#10;}&#10;&#10;fun List&lt;TipoEntity&gt;.toTipoDomainModelList(): List&lt;Tipo&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun TipoFormaPagoEntity.toDomainModel(): TipoFormaPago {&#10;    val domain = TipoFormaPago()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    return domain&#10;}&#10;&#10;fun FormaPagoConDetalles.toDomainModel(): FormaPago {&#10;    // 1. Convierte la parte principal (FormaPagoEntity) al modelo de dominio.&#10;    val domainModel = this.formaPago.toDomainModel()&#10;&#10;    // 2. Convierte la parte relacionada (TipoFormaPagoEntity) y la asigna.&#10;    domainModel.tipoFormaPago = this.tipoFormaPago?.toDomainModel()&#10;&#10;    return domainModel&#10;}&#10;&#10;&#10;fun List&lt;TipoFormaPagoEntity&gt;.toTipoFormaPagoDomainModelList(): List&lt;TipoFormaPago&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun TipoIvaEntity.toDomainModel(): TipoIVA {&#10;    val domain = TipoIVA()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.nombre = this.nombre&#10;    // Los campos 'letraFactura' y 'porcentaje' no están en la entidad, se mantendrán null&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun TipoIVA.toEntity(): TipoIvaEntity {&#10;    return TipoIvaEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        nombre = this.nombre,&#10;        descripcion = null // La entidad tiene un campo 'descripcion' que el modelo no, se asigna null.&#10;    )&#10;}&#10;&#10;fun List&lt;TipoIvaEntity&gt;.toTipoIvaDomainModelList(): List&lt;TipoIVA&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun List&lt;UnidadEntity&gt;.toUnidadDomainModelList(): List&lt;Unidad&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun UsuarioEntity.toDomainModel(): Usuario {&#10;    val domain = Usuario()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombreUsuario = this.nombreUsuario&#10;    domain.nombreCompleto = this.nombreCompleto&#10;    // CAMBIO: Faltaban campos que no existen en la entidad.&#10;    // domain.password = this.password &#10;    // domain.activo = this.activo&#10;    // domain.empresaId = this.empresaId&#10;    this.rolId?.let { domain.rol = Rol().apply { id = it } }&#10;    this.sucursalId?.let { domain.sucursal = Sucursal().apply { id = it } }&#10;    this.vendedorId?.let { domain.vendedor = Vendedor().apply { id = it } }&#10;    return domain&#10;}&#10;&#10;fun List&lt;UsuarioEntity&gt;.toUsuarioDomainModelList(): List&lt;Usuario&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;fun VendedorEntity.toDomainModel(): Vendedor {&#10;    val domain = Vendedor()&#10;    domain.id = this.serverId ?: this.id&#10;    domain.nombre = this.nombre&#10;    domain.porcentajeComision = this.porcentajeComision&#10;    // CAMBIO: Faltaban campos que no existen en la entidad.&#10;    // domain.direccion = this.direccion&#10;    // domain.telefono = this.telefono&#10;    // domain.fechaIngreso = this.fechaIngreso&#10;    return domain&#10;}&#10;&#10;fun List&lt;VendedorEntity&gt;.toVendedorDomainModelList(): List&lt;Vendedor&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}&#10;&#10;&#10;// MAPPERS DE MODELO DE DOMINIO (API) A ENTIDAD&#10;// Nota: Se han corregido todos los mappers para asignar `serverId`, `id` local y `syncStatus`.&#10;fun AgrupacionEntity.toDomainModel(): Agrupacion {&#10;    val domain = Agrupacion()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.numero = this.numero&#10;    domain.nombre = this.nombre&#10;    domain.color = this.color&#10;    domain.icono = this.icono&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun Agrupacion.toEntity(): AgrupacionEntity {&#10;    return AgrupacionEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        numero = this.numero,&#10;        nombre = this.nombre,&#10;        color = this.color,&#10;        icono = this.icono&#10;    )&#10;}&#10;fun List&lt;Agrupacion?&gt;.toAgrupacionEntityList(): List&lt;AgrupacionEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun CategoriaEntity.toDomainModel(): Categoria {&#10;    val domain = Categoria()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId&#10;    domain.nombre = this.nombre&#10;    domain.seImprime = this.seImprime&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun Categoria.toEntity(): CategoriaEntity {&#10;    return CategoriaEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        nombre = this.nombre,&#10;        seImprime = this.seImprime&#10;    )&#10;}&#10;fun List&lt;Categoria?&gt;.toCategoriaEntityList(): List&lt;CategoriaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun CierreCaja.toEntity(): CierreCajaEntity {&#10;    return CierreCajaEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        fecha = this.fecha,&#10;        totalVentas = this.totalVentas,&#10;        totalGastos = this.totalGastos,&#10;        efectivoInicial = this.efectivoInicial,&#10;        efectivoFinal = this.efectivoFinal,&#10;        tipoCajaId = this.tipoCajaId,&#10;        usuarioId = this.usuario?.id&#10;    )&#10;}&#10;fun List&lt;CierreCaja?&gt;.toCierreCajaEntityList(): List&lt;CierreCajaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Cliente.toEntity(): ClienteEntity {&#10;    return ClienteEntity(&#10;        id = this.localId,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nroCliente = this.nroCliente,&#10;        nombre = this.nombre,&#10;        cuit = this.cuit,&#10;        tipoDocumentoId = this.tipoDocumento?.id,&#10;        numeroDocumento = this.numeroDocumento,&#10;        direccionComercial = this.direccionComercial,&#10;        direccionEntrega = this.direccionEntrega,&#10;        localidadId = this.localidad?.id,&#10;        telefono = this.telefono,&#10;        celular = this.celular,&#10;        email = this.email,&#10;        contacto = this.contacto,&#10;        telefonoContacto = this.telefonoContacto,&#10;        categoriaId = this.categoria?.id,&#10;        vendedoresId = this.vendedores?.id,&#10;        porcentajeDescuento = this.porcentajeDescuento,&#10;        limiteCredito = this.limiteCredito,&#10;        saldoInicial = this.saldoInicial,&#10;        saldoActual = this.saldoActual,&#10;        fechaUltimaCompra = this.fechaUltimaCompra,&#10;        fechaUltimoPago = this.fechaUltimoPago,&#10;        percepcionIibb = this.percepcionIibb,&#10;        desactivado = this.desactivado,&#10;        tipoIvaId = this.tipoIva?.id,&#10;        provinciaId = this.provincia?.id&#10;    )&#10;}&#10;fun List&lt;Cliente?&gt;.toClienteEntityList(): List&lt;ClienteEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Combinacion.toEntity(): CombinacionEntity {&#10;    return CombinacionEntity(&#10;        uid = 0,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        productoPrincipalId = this.productoPrincipalId,&#10;        subproductoId = this.subproductoId,&#10;        cantidad = this.cantidad,&#10;        empresaId = this.empresaId&#10;    )&#10;}&#10;fun List&lt;Combinacion?&gt;.toCombinacionEntityList(): List&lt;CombinacionEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Comprobante.toEntity(): ComprobanteEntity {&#10;    return ComprobanteEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        numero = this.numero,&#10;        cuotas = this.cuotas,&#10;        clienteId = this.clienteId,&#10;        remito = this.remito,&#10;        persona = this.persona,&#10;        provinciaId = this.provinciaId,&#10;        fecha = this.fecha,&#10;        fechaBaja = this.fechaBaja,&#10;        motivoBaja = this.motivoBaja,&#10;        hora = this.hora,&#10;        fechaProceso = this.fechaProceso,&#10;        letra = this.letra,&#10;        numeroFactura = this.numeroFactura,&#10;        prefijoFactura = this.prefijoFactura,&#10;        operacionNegocioId = this.operacionNegocioId,&#10;        retencionIva = this.retencionIva,&#10;        retencionIibb = this.retencionIibb,&#10;        retencionGanancias = this.retencionGanancias,&#10;        porcentajeGanancias = this.porcentajeGanancias,&#10;        porcentajeIibb = this.porcentajeIibb,&#10;        porcentajeIva = this.porcentajeIva,&#10;        noGravado = this.noGravado,&#10;        importeIva = this.importeIva,&#10;        total = this.total,&#10;        totalPagado = this.totalPagado,&#10;        condicionVentaId = this.condicionVentaId,&#10;        descripcionFlete = this.descripcionFlete,&#10;        vendedorId = this.vendedorId,&#10;        recibo = this.recibo,&#10;        observaciones1 = this.observaciones1,&#10;        observaciones2 = this.observaciones2,&#10;        observaciones3 = this.observaciones3,&#10;        observaciones4 = this.observaciones4,&#10;        descuento = this.descuento,&#10;        descuento1 = this.descuento1,&#10;        descuento2 = this.descuento2,&#10;        descuento3 = this.descuento3,&#10;        descuento4 = this.descuento4,&#10;        iva2 = this.iva2,&#10;        impresa = this.impresa,&#10;        cancelado = this.cancelado,&#10;        nombreCliente = this.nombreCliente,&#10;        direccionCliente = this.direccionCliente,&#10;        localidadCliente = this.localidadCliente,&#10;        garantia = this.garantia,&#10;        concepto = this.concepto,&#10;        notas = this.notas,&#10;        lineaPagoUltima = this.lineaPagoUltima,&#10;        relacionTk = this.relacionTk,&#10;        totalIibb = this.totalIibb,&#10;        importeIibb = this.importeIibb,&#10;        provinciaCategoriaIibbId = this.provinciaCategoriaIibbId,&#10;        importeRetenciones = this.importeRetenciones,&#10;        provinciaIvaProveedorId = this.provinciaIvaProveedorId,&#10;        gananciasProveedorId = this.gananciasProveedorId,&#10;        importeGanancias = this.importeGanancias,&#10;        numeroIibb = this.numeroIibb,&#10;        numeroGanancias = this.numeroGanancias,&#10;        gananciasProveedor = this.gananciasProveedor,&#10;        cae = this.cae,&#10;        fechaVencimiento = this.fechaVencimiento,&#10;        remitoCliente = this.remitoCliente,&#10;        textoDolares = this.textoDolares,&#10;        comprobanteFinal = this.comprobanteFinal,&#10;        numeroGuia1 = this.numeroGuia1,&#10;        numeroGuia2 = this.numeroGuia2,&#10;        numeroGuia3 = this.numeroGuia3,&#10;        tipoAlicuota1 = this.tipoAlicuota1,&#10;        tipoAlicuota2 = this.tipoAlicuota2,&#10;        tipoAlicuota3 = this.tipoAlicuota3,&#10;        importeIva105 = this.importeIva105,&#10;        importeIva21 = this.importeIva21,&#10;        importeIva0 = this.importeIva0,&#10;        noGravadoIva105 = this.noGravadoIva105,&#10;        noGravadoIva21 = this.noGravadoIva21,&#10;        noGravadoIva0 = this.noGravadoIva0,&#10;        direccionEntrega = this.direccionEntrega,&#10;        fechaEntrega = this.fechaEntrega,&#10;        horaEntrega = this.horaEntrega,&#10;        empresaId = this.empresaId,&#10;        puntoVenta = this.puntoVenta,&#10;        tipoFactura = this.tipoFactura,&#10;        tipoDocumento = this.tipoDocumento,&#10;        numeroDeDocumento = this.numeroDeDocumento,&#10;        qr = this.qr,&#10;        comprobanteIdBaja = this.comprobanteIdBaja,&#10;        sucursalId = this.sucursalId,&#10;        descuentoTotal = this.descuentoTotal,&#10;        incrementoTotal = this.incrementoTotal,&#10;        tipoComprobanteId = this.tipoComprobante?.id,&#10;    )&#10;}&#10;fun List&lt;Comprobante?&gt;.toComprobanteEntityList(): List&lt;ComprobanteEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Familia.toEntity(): FamiliaEntity {&#10;    return FamiliaEntity(&#10;        id = this.localId,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        numero = this.numero,&#10;        nombre = this.nombre&#10;    )&#10;}&#10;fun List&lt;Familia?&gt;.toFamiliaEntityList(): List&lt;FamiliaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun FormaPagoEntity.toDomainModel(): FormaPago {&#10;    val domain = FormaPago()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.nombre = this.nombre&#10;    domain.porcentaje = this.porcentaje&#10;    // La lógica para cargar `tipoFormaPago` se mantiene en el ViewModel.&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio a Entidad&#10;fun FormaPago.toEntity(): FormaPagoEntity {&#10;    return FormaPagoEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará&#10;        nombre = this.nombre,&#10;        porcentaje = this.porcentaje,&#10;        tipoFormaPagoId = this.tipoFormaPago?.id&#10;    )&#10;}&#10;fun List&lt;FormaPago?&gt;.toFormaPagoEntityList(): List&lt;FormaPagoEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Localidad.toEntity(): LocalidadEntity {&#10;    return LocalidadEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        codigoPostal = this.codigoPostal,&#10;        provinciaId = this.provincia?.id&#10;    )&#10;}&#10;fun List&lt;Localidad?&gt;.toLocalidadEntityList(): List&lt;LocalidadEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun MonedaEntity.toDomainModel(): Moneda {&#10;    val domain = Moneda()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.simbolo = this.simbolo&#10;    domain.nombre = this.nombre&#10;    domain.cotizacion = this.cotizacion&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio a Entidad&#10;fun Moneda.toEntity(): MonedaEntity {&#10;    return MonedaEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        simbolo = this.simbolo,&#10;        nombre = this.nombre,&#10;        cotizacion = this.cotizacion&#10;    )&#10;}&#10;fun List&lt;Moneda?&gt;.toMonedaEntityList(): List&lt;MonedaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Pais.toEntity(): PaisEntity {&#10;    return PaisEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre&#10;    )&#10;}&#10;fun List&lt;Pais?&gt;.toPaisEntityList(): List&lt;PaisEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Producto.toEntity(): ProductoEntity {&#10;    return ProductoEntity(&#10;        id = this.localId,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        codigo = this.codigo,&#10;        descripcion = this.descripcion,&#10;        descripcionAmpliada = this.descripcionAmpliada,&#10;        stock = this.stock,&#10;        stockMinimo = this.stockMinimo,&#10;        stockPedido = this.stockPedido,&#10;        codigoBarra = this.codigoBarra,&#10;        articuloActivado = this.articuloActivado,&#10;        productoBalanza = this.productoBalanza,&#10;        precio1 = this.precio1,&#10;        precio2 = this.precio2,&#10;        precio3 = this.precio3,&#10;        precio4 = this.precio4,&#10;        monedaId = this.moneda?.id,&#10;        tasaIvaId = this.tasaIva?.id,&#10;        incluyeIva = this.incluyeIva,&#10;        impuestoInterno = this.impuestoInterno,&#10;        tipoImpuestoInterno = this.tipoImpuestoInterno,&#10;        precio1ImpuestoInterno = this.precio1ImpuestoInterno,&#10;        precio2ImpuestoInterno = this.precio2ImpuestoInterno,&#10;        precio3ImpuestoInterno = this.precio3ImpuestoInterno,&#10;        precioCosto = this.precioCosto,&#10;        fraccionado = this.fraccionado,&#10;        rg5329_23 = this.rg5329_23,&#10;        activo = this.activo,&#10;        textoPanel = this.textoPanel,&#10;        iibb = this.iibb,&#10;        codigoBarra2 = this.codigoBarra2,&#10;        oferta = this.oferta,&#10;        margenGanancia = this.margenGanancia,&#10;        favorito = this.favorito,&#10;        familiaId = this.familia?.id,&#10;        agrupacionId = this.agrupacion?.id,&#10;        proveedorId = this.proveedor?.id,&#10;        tipoId = this.tipo?.id,&#10;        unidadId = this.unidad?.id&#10;    )&#10;}&#10;fun List&lt;Producto?&gt;.toProductoEntityList(): List&lt;ProductoEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun PromocionEntity.toDomainModel(): Promocion {&#10;    val domain = Promocion()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.nombre = this.nombre&#10;    domain.descripcion = this.descripcion&#10;    domain.porcentaje = this.porcentaje&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun Promocion.toEntity(): PromocionEntity {&#10;    return PromocionEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        nombre = this.nombre,&#10;        descripcion = this.descripcion,&#10;        porcentaje = this.porcentaje&#10;    )&#10;}&#10;fun List&lt;Promocion?&gt;.toPromocionEntityList(): List&lt;PromocionEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun List&lt;Proveedor?&gt;.toProveedorEntityList(): List&lt;ProveedorEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Provincia.toEntity(): ProvinciaEntity {&#10;    return ProvinciaEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        paisId = this.pais?.id&#10;    )&#10;}&#10;fun List&lt;Provincia?&gt;.toProvinciaEntityList(): List&lt;ProvinciaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;&#10;&#10;&#10;fun Rol.toEntity(): RolEntity {&#10;    return RolEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        descripcion = this.descripcion&#10;    )&#10;}&#10;fun List&lt;Rol?&gt;.toRolEntityList(): List&lt;RolEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun StockProducto.toEntity(): StockProductoEntity {&#10;    return StockProductoEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        codigo = this.codigo,&#10;        stockInicial = this.stockInicial,&#10;        controlaStock = this.controlaStock,&#10;        puntoPedido = this.puntoPedido,&#10;        largo = this.largo,&#10;        alto = this.alto,&#10;        ancho = this.ancho,&#10;        peso = this.peso,&#10;        unidadId = this.unidadId,&#10;        ubicacionId = this.ubicacionId,&#10;        proveedoresId = this.proveedoresId,&#10;        productoId = this.productoId,&#10;        empresaId = this.empresaId,&#10;        stockActual = this.stockActual,&#10;        sucursalId = this.sucursalId&#10;    )&#10;}&#10;fun List&lt;StockProducto?&gt;.toStockProductoEntityList(): List&lt;StockProductoEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Subcategoria.toEntity(): SubcategoriaEntity {&#10;    return SubcategoriaEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        seImprime = this.seImprime&#10;    )&#10;}&#10;fun List&lt;Subcategoria?&gt;.toSubcategoriaEntityList(): List&lt;SubcategoriaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Sucursal.toEntity(): SucursalEntity {&#10;    return SucursalEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        direccion = this.direccion&#10;        // CAMBIO: Los campos que no existen en la entidad se eliminan del mapper.&#10;    )&#10;}&#10;fun List&lt;Sucursal?&gt;.toSucursalEntityList(): List&lt;SucursalEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun TasaIva.toEntity(): TasaIvaEntity {&#10;    return TasaIvaEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        tasa = this.tasa&#10;    )&#10;}&#10;fun List&lt;TasaIva?&gt;.toTasaIvaEntityList(): List&lt;TasaIvaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Tipo.toEntity(): TipoEntity {&#10;    return TipoEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre&#10;    )&#10;}&#10;fun List&lt;Tipo?&gt;.toTipoEntityList(): List&lt;TipoEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun TipoComprobante.toEntity(): TipoComprobanteEntity {&#10;    return TipoComprobanteEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre&#10;    )&#10;}&#10;fun List&lt;TipoComprobante?&gt;.toTipoComprobanteEntityList(): List&lt;TipoComprobanteEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun TipoDocumentoEntity.toDomainModel(): TipoDocumento {&#10;    val domain = TipoDocumento()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.nombre = this.nombre&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun TipoDocumento.toEntity(): TipoDocumentoEntity {&#10;    return TipoDocumentoEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        nombre = this.nombre,&#10;        abrev = null, // Asumimos que estos campos no se gestionan desde la app&#10;        descripcion = null&#10;    )&#10;}&#10;fun List&lt;TipoDocumento?&gt;.toTipoDocumentoEntityList(): List&lt;TipoDocumentoEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun TipoFormaPago.toEntity(): TipoFormaPagoEntity {&#10;    return TipoFormaPagoEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre&#10;    )&#10;}&#10;fun List&lt;TipoFormaPago?&gt;.toTipoFormaPagoEntityList(): List&lt;TipoFormaPagoEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun List&lt;TipoIVA?&gt;.toTipoIvaEntityList(): List&lt;TipoIvaEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun UnidadEntity.toDomainModel(): Unidad {&#10;    val domain = Unidad()&#10;    domain.localId = this.id // &lt;-- ¡CORRECCIÓN CLAVE! Asigna el ID local.&#10;    domain.id = this.serverId ?: 0&#10;    domain.nombre = this.nombre&#10;    domain.simbolo = this.simbolo&#10;    // El campo 'simbolo' no existe en UnidadEntity, por lo que se mantiene la lógica actual.&#10;    return domain&#10;}&#10;&#10;// Mapper de Modelo de Dominio (UI) a Entidad de DB&#10;fun Unidad.toEntity(): UnidadEntity {&#10;    return UnidadEntity(&#10;        id = this.localId, // &lt;-- ¡CORRECCIÓN CLAVE! Usa el ID local guardado.&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED, // El ViewModel lo ajustará.&#10;        nombre = this.nombre,&#10;        simbolo = this.simbolo ?: &quot;&quot;, // Asignamos un valor por defecto si es null.&#10;        // El campo 'simbolo' no existe en UnidadEntity.&#10;    )&#10;}&#10;fun List&lt;Unidad?&gt;.toUnidadEntityList(): List&lt;UnidadEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Usuario.toEntity(): UsuarioEntity {&#10;    return UsuarioEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombreUsuario = this.nombreUsuario,&#10;        nombreCompleto = this.nombreCompleto,&#10;        rolId = this.rol?.id,&#10;        sucursalId = this.sucursal?.id,&#10;        vendedorId = this.vendedor?.id,&#10;        email = null // CAMBIO: El modelo no tiene `email`.&#10;    )&#10;}&#10;fun List&lt;Usuario?&gt;.toUsuarioEntityList(): List&lt;UsuarioEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun Vendedor.toEntity(): VendedorEntity {&#10;    return VendedorEntity(&#10;        id = 0,&#10;        serverId = this.id,&#10;        syncStatus = SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        porcentajeComision = this.porcentajeComision ?: 0.0&#10;    )&#10;}&#10;fun List&lt;Vendedor?&gt;.toVendedorEntityList(): List&lt;VendedorEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun ComprobanteConDetalles.toComprobanteConDetalle(): ComprobanteConDetalle {&#10;    // 1. Convierte la parte principal (ComprobanteEntity) al modelo de dominio.&#10;    val domainComprobante = this.comprobante.toDomainModel()&#10;&#10;    // 2. Convierte y asigna las entidades relacionadas.&#10;    val domainCliente = this.cliente?.toDomainModel()&#10;    val domainVendedor = this.vendedor?.toDomainModel()&#10;    val domainTipoComprobante = this.tipoComprobante?.toDomainModel() // &lt;-- ¡AQUÍ SE CARGA EL TIPO!&#10;    // Mapeamos las entidades de pago a los modelos de dominio.&#10;    // NOTA: Esto es una simplificación. Idealmente, aquí se buscaría el objeto `FormaPago` completo.&#10;    val formasDePago = this.pagos.map { pagoEntity -&gt;&#10;        FormaPagoComprobante(&#10;            id = pagoEntity.formaPagoId,&#10;            nombre = &quot;Forma de Pago ID: ${pagoEntity.formaPagoId}&quot;, // Placeholder&#10;            porcentaje = 0, // Placeholder&#10;            importe = String.format(Locale.US, &quot;%.2f&quot;, pagoEntity.importe),&#10;            tipoFormaPago = TipoFormaPago() // Placeholder&#10;        )&#10;    }&#10;&#10;    // Mapeamos las entidades de promoción a los modelos de dominio.&#10;    // NOTA: Aquí también se necesitaría buscar el objeto `Promocion` completo.&#10;    val promociones = this.promociones.map { promoEntity -&gt;&#10;        Promocion().apply { id = promoEntity.promocionId }&#10;    }&#10;&#10;    // Asignamos las listas mapeadas al comprobante de dominio.&#10;    domainComprobante.formas_de_pago = formasDePago&#10;    domainComprobante.promociones = promociones&#10;    return ComprobanteConDetalle(&#10;        comprobante = domainComprobante,&#10;        cliente = domainCliente,&#10;        vendedor = domainVendedor,&#10;        tipoComprobante = domainTipoComprobante&#10;    )&#10;}&#10;&#10;&#10;fun ProvinciaConDetalles.toDomainModel(): Provincia {&#10;    val provinciaModel = this.provincia.toDomainModel()&#10;    provinciaModel.pais = this.pais?.toDomainModel()&#10;    return provinciaModel&#10;}&#10;&#10;fun UsuarioConDetalles.toDomainModel(): Usuario {&#10;    val usuarioModel = this.usuario.toDomainModel()&#10;    usuarioModel.rol = this.rol?.toDomainModel()&#10;    usuarioModel.sucursal = this.sucursal?.toDomainModel()&#10;    usuarioModel.vendedor = this.vendedor?.toDomainModel()&#10;    return usuarioModel&#10;}&#10;&#10;fun Comprobante.toUploadRequest(): ComprobanteUploadRequest {&#10;    val promocionesRequest = this.promociones?.map { PromocionRequest(id = it.id) }&#10;    val pagosRequest = this.formas_de_pago.map {&#10;        FormaPagoRequest(&#10;            id = it.id,&#10;            importe = it.importe.toDoubleOrNull() ?: 0.0&#10;        )&#10;    }&#10;    return ComprobanteUploadRequest(&#10;        numero = this.numero,&#10;        cuotas = this.cuotas,&#10;        clienteId = this.clienteId,&#10;        remito = this.remito,&#10;        persona = this.persona,&#10;        provinciaId = this.provinciaId,&#10;        fecha = this.fecha,&#10;        fechaBaja = this.fechaBaja,&#10;        motivoBaja = this.motivoBaja,&#10;        hora = this.hora,&#10;        fechaProceso = this.fechaProceso,&#10;        letra = this.letra,&#10;        numeroFactura = this.numeroFactura,&#10;        prefijoFactura = this.prefijoFactura,&#10;        operacionNegocioId = this.operacionNegocioId,&#10;        retencionIva = this.retencionIva,&#10;        retencionIibb = this.retencionIibb,&#10;        retencionGanancias = this.retencionGanancias,&#10;        porcentajeGanancias = this.porcentajeGanancias,&#10;        porcentajeIibb = this.porcentajeIibb,&#10;        porcentajeIva = this.porcentajeIva,&#10;        noGravado = this.noGravado,&#10;        importeIva = this.importeIva,&#10;        total = this.total,&#10;        totalPagado = this.totalPagado,&#10;        condicionVentaId = this.condicionVentaId,&#10;        descripcionFlete = this.descripcionFlete,&#10;        vendedorId = this.vendedorId,&#10;        recibo = this.recibo,&#10;        observaciones1 = this.observaciones1,&#10;        observaciones2 = this.observaciones2,&#10;        observaciones3 = this.observaciones3,&#10;        observaciones4 = this.observaciones4,&#10;        descuento = this.descuento,&#10;        descuento1 = this.descuento1,&#10;        descuento2 = this.descuento2,&#10;        descuento3 = this.descuento3,&#10;        descuento4 = this.descuento4,&#10;        iva2 = this.iva2,&#10;        impresa = this.impresa,&#10;        cancelado = this.cancelado,&#10;        nombreCliente = this.nombreCliente,&#10;        direccionCliente = this.direccionCliente,&#10;        localidadCliente = this.localidadCliente,&#10;        garantia = this.garantia,&#10;        concepto = this.concepto,&#10;        notas = this.notas,&#10;        lineaPagoUltima = this.lineaPagoUltima,&#10;        relacionTk = this.relacionTk,&#10;        totalIibb = this.totalIibb,&#10;        importeIibb = this.importeIibb,&#10;        provinciaCategoriaIibbId = this.provinciaCategoriaIibbId,&#10;        importeRetenciones = this.importeRetenciones,&#10;        provinciaIvaProveedorId = this.provinciaIvaProveedorId,&#10;        gananciasProveedorId = this.gananciasProveedorId,&#10;        importeGanancias = this.importeGanancias,&#10;        numeroIibb = this.numeroIibb,&#10;        numeroGanancias = this.numeroGanancias,&#10;        gananciasProveedor = this.gananciasProveedor,&#10;        cae = this.cae,&#10;        fechaVencimiento = this.fechaVencimiento,&#10;        remitoCliente = this.remitoCliente,&#10;        textoDolares = this.textoDolares,&#10;        comprobanteFinal = this.comprobanteFinal,&#10;        numeroGuia1 = this.numeroGuia1,&#10;        numeroGuia2 = this.numeroGuia2,&#10;        numeroGuia3 = this.numeroGuia3,&#10;        tipoAlicuota1 = this.tipoAlicuota1,&#10;        tipoAlicuota2 = this.tipoAlicuota2,&#10;        tipoAlicuota3 = this.tipoAlicuota3,&#10;        importeIva105 = this.importeIva105,&#10;        importeIva21 = this.importeIva21,&#10;        importeIva0 = this.importeIva0,&#10;        noGravadoIva105 = this.noGravadoIva105,&#10;        noGravadoIva21 = this.noGravadoIva21,&#10;        noGravadoIva0 = this.noGravadoIva0,&#10;        direccionEntrega = this.direccionEntrega,&#10;        fechaEntrega = this.fechaEntrega,&#10;        horaEntrega = this.horaEntrega,&#10;        puntoVenta = this.puntoVenta,&#10;        tipoFactura = this.tipoFactura,&#10;        tipoDocumento = this.tipoDocumento,&#10;        numeroDeDocumento = this.numeroDeDocumento,&#10;        qr = this.qr,&#10;        comprobanteIdBaja = this.comprobanteIdBaja,&#10;        sucursalId = this.sucursalId,&#10;        descuentoTotal = this.descuentoTotal,&#10;        incrementoTotal = this.incrementoTotal,&#10;        tipoComprobanteId = this.tipoComprobanteId,&#10;        // --- CAMPOS MAPEADOS ---&#10;        promociones = promocionesRequest,&#10;        formas_de_pago = pagosRequest&#10;    )&#10;}&#10;&#10;fun RenglonComprobante.toUploadRequest(comprobanteServerId: Int): RenglonUploadRequest {&#10;    return RenglonUploadRequest(&#10;&#10;        productoId = this.producto.id,&#10;        descripcion = this.descripcion,&#10;        cantidad = this.cantidad,&#10;        precioUnitario = this.precioUnitario,&#10;        tasaIva = this.tasaIva,&#10;        totalLinea = this.totalLinea&#10;    )&#10;}&#10;&#10;fun ClienteConDetalles.toDomainModel(): Cliente {&#10;    val domainModel = this.cliente.toDomainModel()&#10;    domainModel.localId = this.cliente.id&#10;    domainModel.tipoDocumento = this.tipoDocumento?.toDomainModel()&#10;    domainModel.tipoIva = this.tipoIva?.toDomainModel()&#10;    domainModel.localidad = this.localidad?.toDomainModel()&#10;    // Si la localidad tiene una provincia, también la mapeamos&#10;    this.localidad?.provinciaId?.let { provId -&gt;&#10;        // Este es un caso especial. Asumimos que la provincia ya está en el objeto Localidad&#10;        // o la cargamos aquí si es necesario, aunque lo ideal es que la relación anidada funcione.&#10;        // El mapper de LocalidadConDetalles debería encargarse de esto.&#10;        // Por simplicidad, asumimos que el modelo de dominio de Localidad ya tiene la Provincia.&#10;    }&#10;    domainModel.provincia = this.provincia?.toDomainModel()&#10;    domainModel.categoria = this.categoria?.toDomainModel()&#10;    domainModel.vendedores = this.vendedor?.toDomainModel()&#10;    return domainModel&#10;}&#10;&#10;fun Cliente.toUploadRequest(): ClienteUploadRequest {&#10;    return ClienteUploadRequest(&#10;&#10;        nombre = this.nombre,&#10;        cuit = this.cuit,&#10;        tipoDocumentoId = this.tipoDocumento?.id,&#10;        numeroDocumento = this.numeroDocumento,&#10;        direccionComercial = this.direccionComercial,&#10;        direccionEntrega = this.direccionEntrega,&#10;        localidadId = this.localidad?.id,&#10;        telefono = this.telefono,&#10;        celular = this.celular,&#10;        email = this.email,&#10;        contacto = this.contacto,&#10;        telefonoContacto = this.telefonoContacto,&#10;        categoriaId = this.categoria?.id,&#10;        vendedoresId = this.vendedores?.id,&#10;        porcentajeDescuento = this.porcentajeDescuento,&#10;        limiteCredito = this.limiteCredito,&#10;        saldoInicial = this.saldoInicial,&#10;        saldoActual = this.saldoActual,&#10;        fechaUltimaCompra = this.fechaUltimaCompra,&#10;        fechaUltimoPago = this.fechaUltimoPago,&#10;        percepcionIibb = this.percepcionIibb,&#10;        desactivado = this.desactivado,&#10;        tipoIvaId = this.tipoIva?.id,&#10;        provinciaId = this.provincia?.id&#10;    )&#10;}&#10;&#10;fun Agrupacion.toUploadRequest(): AgrupacionUploadRequest = AgrupacionUploadRequest(numero, nombre, color, icono)&#10;fun Categoria.toUploadRequest(): CategoriaUploadRequest = CategoriaUploadRequest(nombre, seImprime)&#10;fun CierreCaja.toUploadRequest(): CierreCajaUploadRequest = CierreCajaUploadRequest(fecha, totalVentas, totalGastos, efectivoInicial, efectivoFinal, tipoCajaId, usuario?.id)&#10;fun Familia.toUploadRequest(): FamiliaUploadRequest = FamiliaUploadRequest(numero.toString(), nombre)&#10;fun FormaPago.toUploadRequest(): FormaPagoUploadRequest = FormaPagoUploadRequest(nombre, porcentaje,activa, tipoFormaPago?.id)&#10;fun Localidad.toUploadRequest(): LocalidadUploadRequest = LocalidadUploadRequest(nombre, codigoPostal, provincia?.id)&#10;fun Moneda.toUploadRequest(): MonedaUploadRequest = MonedaUploadRequest(simbolo, nombre, cotizacion)&#10;fun Pais.toUploadRequest(): PaisUploadRequest = PaisUploadRequest(nombre)&#10;fun Producto.toUploadRequest(): ProductoUploadRequest = ProductoUploadRequest(codigo, descripcion, descripcionAmpliada, stock, stockMinimo, stockPedido, codigoBarra, articuloActivado, productoBalanza, precio1, precio2, precio3,  moneda?.id, tasaIva?.id, incluyeIva, impuestoInterno, tipoImpuestoInterno, precioCosto, fraccionado, rg5329_23, activo, textoPanel, iibb, codigoBarra2, oferta, margenGanancia, favorito, familia?.id, agrupacion?.id, proveedor?.id, tipo?.id, unidad?.id)&#10;fun Promocion.toUploadRequest(): PromocionUploadRequest = PromocionUploadRequest(nombre, descripcion, porcentaje)&#10;fun Provincia.toUploadRequest(): ProvinciaUploadRequest = ProvinciaUploadRequest(nombre, pais?.id)&#10;fun Rol.toUploadRequest(): RolUploadRequest = RolUploadRequest(nombre, descripcion)&#10;fun Sucursal.toUploadRequest(): SucursalUploadRequest = SucursalUploadRequest(nombre, direccion)&#10;fun TasaIva.toUploadRequest(): TasaIvaUploadRequest = TasaIvaUploadRequest(nombre, tasa)&#10;fun TipoComprobante.toUploadRequest(): TipoComprobanteUploadRequest = TipoComprobanteUploadRequest(nombre, numero)&#10;fun TipoDocumento.toUploadRequest(): TipoDocumentoUploadRequest = TipoDocumentoUploadRequest(nombre, null) // Asumiendo que 'abrev' no se gestiona en la app&#10;fun TipoFormaPago.toUploadRequest(): TipoFormaPagoUploadRequest = TipoFormaPagoUploadRequest(nombre)&#10;&#10;fun Tipo.toUploadRequest(): TipoUploadRequest = TipoUploadRequest(nombre, numero)&#10;fun Unidad.toUploadRequest(): UnidadUploadRequest = UnidadUploadRequest(nombre, simbolo)&#10;fun Usuario.toUploadRequest(): UsuarioUploadRequest = UsuarioUploadRequest(nombreUsuario, null, nombreCompleto, activo, rol?.id, sucursal?.id, vendedor?.id) // Se envía null en password para no cambiarlo&#10;fun Vendedor.toUploadRequest(): VendedorUploadRequest = VendedorUploadRequest(nombre, direccion, telefono, porcentajeComision, fechaIngreso)&#10;fun Proveedor.toUploadRequest(): ProveedorUploadRequest {&#10;    return ProveedorUploadRequest(&#10;        razonSocial = this.razonSocial,&#10;        direccion = this.direccion,&#10;        localidadId = this.localidad?.id,&#10;        telefono = this.telefono,&#10;        email = this.email,&#10;        tipoIvaId = this.tipoIva?.id,&#10;        cuit = this.cuit,&#10;        categoriaId = this.categoria?.id,&#10;        subcategoriaId = this.subcategoria?.id,&#10;        fechaUltimaCompra = this.fechaUltimaCompra,&#10;        fechaUltimoPago = this.fechaUltimoPago,&#10;        saldoActual = this.saldoActual&#10;    )&#10;}&#10;&#10;fun TipoIVA.toUploadRequest(): TipoIvaUploadRequest {&#10;    return TipoIvaUploadRequest(&#10;        nombre = this.nombre,&#10;&#10;    )&#10;}&#10;&#10;fun Pago.toEntity(comprobanteLocalId: Long): ComprobantePagoEntity {&#10;    return ComprobantePagoEntity(&#10;        comprobanteLocalId = comprobanteLocalId,&#10;        formaPagoId = this.formaPago.id,&#10;        importe = this.monto,&#10;        syncStatus = SyncStatus.CREATED // Los pagos siempre se crean localmente primero&#10;    )&#10;}&#10;&#10;fun ar.com.nexofiscal.nexofiscalposv2.db.entity.NotificacionEntity.toDomainModel(): ar.com.nexofiscal.nexofiscalposv2.models.Notificacion {&#10;    val domain = ar.com.nexofiscal.nexofiscalposv2.models.Notificacion()&#10;    domain.localId = this.id&#10;    domain.id = this.serverId ?: 0&#10;    domain.nombre = this.nombre&#10;    domain.mensaje = this.mensaje&#10;    domain.empresaId = this.empresaId&#10;    domain.activo = this.activo&#10;    domain.tipoNotificacionId = this.tipoNotificacionId&#10;    return domain&#10;}&#10;&#10;fun ar.com.nexofiscal.nexofiscalposv2.models.Notificacion.toEntity(): ar.com.nexofiscal.nexofiscalposv2.db.entity.NotificacionEntity {&#10;    return ar.com.nexofiscal.nexofiscalposv2.db.entity.NotificacionEntity(&#10;        id = this.localId,&#10;        serverId = this.id,&#10;        syncStatus = ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus.SYNCED,&#10;        nombre = this.nombre,&#10;        mensaje = this.mensaje,&#10;        empresaId = this.empresaId,&#10;        activo = this.activo,&#10;        tipoNotificacionId = this.tipoNotificacionId&#10;    )&#10;}&#10;&#10;fun List&lt;ar.com.nexofiscal.nexofiscalposv2.models.Notificacion?&gt;.toNotificacionEntityList(): List&lt;ar.com.nexofiscal.nexofiscalposv2.db.entity.NotificacionEntity&gt; = this.mapNotNull { it?.toEntity() }&#10;&#10;fun List&lt;ar.com.nexofiscal.nexofiscalposv2.db.entity.NotificacionEntity&gt;.toNotificacionDomainModelList(): List&lt;ar.com.nexofiscal.nexofiscalposv2.models.Notificacion&gt; {&#10;    return this.map { it.toDomainModel() }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductoStockDetalleViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductoStockDetalleViewModel.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.viewmodel&#10;&#10;import android.app.Application&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.paging.Pager&#10;import androidx.paging.PagingConfig&#10;import androidx.paging.PagingData&#10;import androidx.paging.cachedIn&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStockDetalle&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.flatMapLatest&#10;&#10;class ProductoStockDetalleViewModel(application: Application) : AndroidViewModel(application) {&#10;    &#10;    private val database = AppDatabase.getDatabase(application)&#10;    private val productoDao = database.productoDao()&#10;    &#10;    private val searchQuery = MutableStateFlow(&quot;&quot;)&#10;    &#10;    val pagedProductosConStock: Flow&lt;PagingData&lt;ProductoConStockDetalle&gt;&gt; = searchQuery&#10;        .flatMapLatest { query -&gt;&#10;            Pager(&#10;                config = PagingConfig(&#10;                    pageSize = 20,&#10;                    enablePlaceholders = false&#10;                ),&#10;                pagingSourceFactory = {&#10;                    if (query.isEmpty()) {&#10;                        productoDao.getProductosConStockDetallePaging()&#10;                    } else {&#10;                        productoDao.searchProductosConStockDetallePaging(&quot;%$query%&quot;)&#10;                    }&#10;                }&#10;            ).flow&#10;        }.cachedIn(viewModelScope)&#10;    &#10;    fun search(query: String) {&#10;        searchQuery.value = query&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductoStockViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductoStockViewModel.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.viewmodel&#10;&#10;import android.app.Application&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.paging.Pager&#10;import androidx.paging.PagingConfig&#10;import androidx.paging.PagingData&#10;import androidx.paging.cachedIn&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStock&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.flatMapLatest&#10;&#10;class ProductoStockViewModel(application: Application) : AndroidViewModel(application) {&#10;    &#10;    private val database = AppDatabase.getDatabase(application)&#10;    private val productoDao = database.productoDao()&#10;    &#10;    private val searchQuery = MutableStateFlow(&quot;&quot;)&#10;    &#10;    val pagedProductosConStock: Flow&lt;PagingData&lt;ProductoConStock&gt;&gt; = searchQuery&#10;        .flatMapLatest { query -&gt;&#10;            Pager(&#10;                config = PagingConfig(&#10;                    pageSize = 20,&#10;                    enablePlaceholders = false&#10;                ),&#10;                pagingSourceFactory = {&#10;                    if (query.isEmpty()) {&#10;                        productoDao.getPagingSourceWithStock()&#10;                    } else {&#10;                        productoDao.searchPagingSourceWithStock(&quot;%$query%&quot;)&#10;                    }&#10;                }&#10;            ).flow&#10;        }.cachedIn(viewModelScope)&#10;    &#10;    fun search(query: String) {&#10;        searchQuery.value = query&#10;    }&#10;    &#10;    fun clearSearch() {&#10;        searchQuery.value = &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductosConStockViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductosConStockViewModel.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewModelScope&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStock&#10;import ar.com.nexofiscal.nexofiscalposv2.db.repository.ProductoRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class ProductosConStockViewModel(private val repository: ProductoRepository) : ViewModel() {&#10;&#10;    private val _productosConStock = MutableStateFlow&lt;List&lt;ProductoConStock&gt;&gt;(emptyList())&#10;    val productosConStock: StateFlow&lt;List&lt;ProductoConStock&gt;&gt; = _productosConStock.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _searchQuery = MutableStateFlow(&quot;&quot;)&#10;    val searchQuery: StateFlow&lt;String&gt; = _searchQuery.asStateFlow()&#10;&#10;    init {&#10;        cargarProductosConStock()&#10;    }&#10;&#10;    private fun cargarProductosConStock() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            repository.getProductosConStock().collect { productos -&gt;&#10;                _productosConStock.value = filtrarProductos(productos, _searchQuery.value)&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun buscarProductos(query: String) {&#10;        _searchQuery.value = query&#10;        val productosFiltrados = filtrarProductos(_productosConStock.value, query)&#10;        _productosConStock.value = productosFiltrados&#10;    }&#10;&#10;    private fun filtrarProductos(productos: List&lt;ProductoConStock&gt;, query: String): List&lt;ProductoConStock&gt; {&#10;        if (query.isBlank()) return productos&#10;        &#10;        val queryLower = query.lowercase()&#10;        return productos.filter { productoConStock -&gt;&#10;            val producto = productoConStock.producto&#10;            producto.descripcion?.lowercase()?.contains(queryLower) == true ||&#10;            producto.codigo?.lowercase()?.contains(queryLower) == true ||&#10;            producto.codigoBarra?.lowercase()?.contains(queryLower) == true ||&#10;            producto.codigoBarra2?.lowercase()?.contains(queryLower) == true&#10;        }&#10;    }&#10;&#10;    fun limpiarBusqueda() {&#10;        _searchQuery.value = &quot;&quot;&#10;        cargarProductosConStock()&#10;    }&#10;}&#10;&#10;class ProductosConStockViewModelFactory(private val repository: ProductoRepository) : ViewModelProvider.Factory {&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(ProductosConStockViewModel::class.java)) {&#10;            @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;            return ProductosConStockViewModel(repository) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/examples/StockControlExample.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/examples/StockControlExample.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.examples&#10;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ComprobanteEntity&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus&#10;import ar.com.nexofiscal.nexofiscalposv2.managers.StockMovementManager&#10;import ar.com.nexofiscal.nexofiscalposv2.models.RenglonComprobante&#10;import ar.com.nexofiscal.nexofiscalposv2.services.ComprobanteStockService&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Ejemplo de uso del sistema de control de stock&#10; */&#10;class StockControlExample(private val database: AppDatabase) {&#10;    &#10;    private val stockMovementManager = StockMovementManager(&#10;        stockActualizacionDao = database.stockActualizacionDao(),&#10;        stockProductoDao = database.stockProductoDao()&#10;    )&#10;    &#10;    private val comprobanteStockService = ComprobanteStockService(&#10;        comprobanteDao = database.comprobanteDao(),&#10;        renglonComprobanteDao = database.renglonComprobanteDao(),&#10;        stockMovementManager = stockMovementManager&#10;    )&#10;    &#10;    /**&#10;     * Ejemplo: Crear una factura que reduce el stock&#10;     */&#10;    fun ejemploCrearFactura() {&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            &#10;            // 1. Crear comprobante (factura)&#10;            val factura = ComprobanteEntity(&#10;                serverId = null,&#10;                syncStatus = SyncStatus.PENDING,&#10;                numero = 1001,&#10;                clienteId = 1,&#10;                letra = &quot;FACTURA_A&quot;,&#10;                fecha = &quot;2025-01-09&quot;,&#10;                // ... otros campos necesarios&#10;                cuotas = null,&#10;                remito = null,&#10;                persona = &quot;Cliente Ejemplo&quot;,&#10;                provinciaId = null,&#10;                fechaBaja = null,&#10;                motivoBaja = null,&#10;                hora = &quot;10:30:00&quot;,&#10;                fechaProceso = &quot;2025-01-09&quot;,&#10;                numeroFactura = 1001&#10;            )&#10;            &#10;            // 2. Crear renglones con productos&#10;            val renglones = listOf(&#10;                RenglonComprobante(&#10;                    productoId = 101,&#10;                    descripcion = &quot;Producto A&quot;,&#10;                    cantidad = 5.0,&#10;                    precio = 100.0,&#10;                    // ... otros campos del renglón&#10;                ),&#10;                RenglonComprobante(&#10;                    productoId = 102,&#10;                    descripcion = &quot;Producto B&quot;, &#10;                    cantidad = 3.0,&#10;                    precio = 150.0,&#10;                    // ... otros campos del renglón&#10;                )&#10;            )&#10;            &#10;            // 3. Verificar stock antes de crear la factura&#10;            val verificacion = comprobanteStockService.verificarStockSuficiente(&#10;                renglones = renglones,&#10;                sucursalId = 1&#10;            )&#10;            &#10;            if (!verificacion.suficiente) {&#10;                println(&quot;⚠️ Stock insuficiente:&quot;)&#10;                verificacion.productosInsuficientes.forEach { producto -&gt;&#10;                    println(&quot;- ${producto.descripcion}: necesita ${producto.cantidadSolicitada}, disponible ${producto.stockActual}&quot;)&#10;                }&#10;                return@launch&#10;            }&#10;            &#10;            // 4. Crear factura con control de stock automático&#10;            val resultado = comprobanteStockService.crearComprobanteConStock(&#10;                comprobante = factura,&#10;                renglones = renglones,&#10;                sucursalId = 1&#10;            )&#10;            &#10;            resultado.onSuccess { comprobanteId -&gt;&#10;                println(&quot;✅ Factura creada exitosamente: ID $comprobanteId&quot;)&#10;                println(&quot; Stock reducido automáticamente&quot;)&#10;            }.onFailure { error -&gt;&#10;                println(&quot;❌ Error al crear factura: ${error.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Ejemplo: Anular una factura y restituir el stock&#10;     */&#10;    fun ejemploAnularFactura(comprobanteId: Int) {&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            &#10;            val resultado = comprobanteStockService.anularComprobanteConStock(&#10;                comprobanteId = comprobanteId,&#10;                sucursalId = 1,&#10;                motivoAnulacion = &quot;Error en facturación&quot;&#10;            )&#10;            &#10;            resultado.onSuccess {&#10;                println(&quot;✅ Factura anulada exitosamente&quot;)&#10;                println(&quot; Stock restituido automáticamente&quot;)&#10;            }.onFailure { error -&gt;&#10;                println(&quot;❌ Error al anular factura: ${error.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Ejemplo: Ver historial de movimientos de un producto&#10;     */&#10;    fun ejemploVerHistorialStock(productoId: Int) {&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            &#10;            val historial = stockMovementManager.obtenerHistorialMovimientos(&#10;                productoId = productoId,&#10;                sucursalId = 1&#10;            )&#10;            &#10;            println(&quot; Historial de movimientos - Producto $productoId:&quot;)&#10;            historial.forEach { movimiento -&gt;&#10;                val tipo = if (movimiento.cantidad &gt; 0) &quot;ENTRADA&quot; else &quot;SALIDA&quot;&#10;                println(&quot;- ${movimiento.fechaCreacion}: $tipo ${Math.abs(movimiento.cantidad)} unidades&quot;)&#10;            }&#10;            &#10;            val stockTotal = historial.sumOf { it.cantidad }&#10;            println(&quot; Stock actual calculado: $stockTotal unidades&quot;)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Ejemplo: Ajuste manual de stock&#10;     */&#10;    fun ejemploAjusteStock(productoId: Int, cantidadAjuste: Double, sucursalId: Int) {&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            &#10;            val exitoso = if (cantidadAjuste &gt; 0) {&#10;                // Agregar stock&#10;                stockMovementManager.restituirStock(&#10;                    productoId = productoId,&#10;                    cantidad = cantidadAjuste,&#10;                    sucursalId = sucursalId,&#10;                    comprobanteId = 0 // Sin comprobante asociado&#10;                )&#10;            } else {&#10;                // Reducir stock&#10;                stockMovementManager.reducirStock(&#10;                    productoId = productoId,&#10;                    cantidad = Math.abs(cantidadAjuste),&#10;                    sucursalId = sucursalId,&#10;                    comprobanteId = 0,&#10;                    tipoMovimiento = StockMovementManager.MOVIMIENTO_AJUSTE&#10;                )&#10;            }&#10;            &#10;            if (exitoso) {&#10;                println(&quot;✅ Ajuste de stock realizado: $cantidadAjuste unidades&quot;)&#10;            } else {&#10;                println(&quot;❌ Error en ajuste de stock&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Uso del ejemplo en una Activity o Fragment&#10; */&#10;/*&#10;class MainActivity : ComponentActivity() {&#10;    &#10;    private lateinit var stockExample: StockControlExample&#10;    &#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        &#10;        val database = AppDatabase.getInstance(this)&#10;        stockExample = StockControlExample(database)&#10;        &#10;        // Ejemplo de uso&#10;        stockExample.ejemploCrearFactura()&#10;        &#10;        // Para anular&#10;        // stockExample.ejemploAnularFactura(comprobanteId = 123)&#10;        &#10;        // Para ver historial&#10;        // stockExample.ejemploVerHistorialStock(productoId = 101)&#10;        &#10;        // Para ajuste manual&#10;        // stockExample.ejemploAjusteStock(productoId = 101, cantidadAjuste = 10.0, sucursalId = 1)&#10;    }&#10;}&#10;*/" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/managers/StockSyncManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/managers/StockSyncManager.kt" />
              <option name="originalContent" value="package ar.com.nexofiscal.nexofiscalposv2.managers&#10;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.StockProductoEntity&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus&#10;import ar.com.nexofiscal.nexofiscalposv2.network.ApiClient&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;import org.json.JSONObject&#10;&#10;class StockSyncManager(private val database: AppDatabase) {&#10;&#10;    private val ENDPOINT_AGRUPACIONES = &quot;/api/stocks&quot;&#10;&#10;    suspend fun sincronizarStock(apiUrl: String, token: String, sucursalId: Int) {&#10;        withContext(Dispatchers.IO) {&#10;            val response = ApiClient.request(&#10;                url = &quot;$apiUrl$ENDPOINT_AGRUPACIONES/?sucursal_id=$sucursalId&quot;,&#10;                headers = mapOf(&quot;Authorization&quot; to &quot;Bearer $token&quot;)&#10;            )&#10;&#10;            if (response.isSuccessful) {&#10;                val responseBody = response.body&#10;                responseBody?.let {&#10;                    val json = JSONObject(it)&#10;                    val stockList = json.getJSONArray(&quot;data&quot;)&#10;&#10;                    val stockEntities = mutableListOf&lt;StockProductoEntity&gt;()&#10;&#10;                    for (i in 0 until stockList.length()) {&#10;                        val stockItem = stockList.getJSONObject(i)&#10;                        val stockEntity = StockProductoEntity(&#10;                            productoId = stockItem.getInt(&quot;producto_id&quot;),&#10;                            empresaId = stockItem.getInt(&quot;empresa_id&quot;),&#10;                            stockActual = stockItem.getDouble(&quot;stock_actual&quot;),&#10;                            sucursalId = stockItem.getInt(&quot;sucursal_id&quot;),&#10;                            syncStatus = SyncStatus.SYNCED&#10;                        )&#10;                        stockEntities.add(stockEntity)&#10;                    }&#10;&#10;                    database.stockProductoDao().insertAll(stockEntities)&#10;                }&#10;            } else {&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.managers&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.StockProductoEntity&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus&#10;import ar.com.nexofiscal.nexofiscalposv2.db.mappers.toStockProductoEntityList&#10;import ar.com.nexofiscal.nexofiscalposv2.models.StockProducto&#10;import ar.com.nexofiscal.nexofiscalposv2.network.ApiCallback&#10;import ar.com.nexofiscal.nexofiscalposv2.network.ApiClient&#10;import ar.com.nexofiscal.nexofiscalposv2.network.HttpMethod&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import okhttp3.Headers&#10;import org.json.JSONObject&#10;&#10;object StockSyncManager {&#10;    private const val TAG = &quot;StockSyncManager&quot;&#10;    private const val ENDPOINT_STOCKS = &quot;/api/stocks&quot;&#10;&#10;    fun sincronizarStock(&#10;        context: Context,&#10;        headers: MutableMap&lt;String?, String?&gt;?,&#10;        sucursalId: Int,&#10;        callback: StockListCallback&#10;    ) {&#10;        val stockListType = object :&#10;            com.google.gson.reflect.TypeToken&lt;MutableList&lt;StockProducto?&gt;?&gt;() {}.type&#10;&#10;        ApiClient.request(&#10;            HttpMethod.GET,&#10;            &quot;$ENDPOINT_STOCKS/?sucursal_id=$sucursalId&quot;,&#10;            headers,&#10;            null,&#10;            stockListType,&#10;            object : ApiCallback&lt;MutableList&lt;StockProducto?&gt;?&gt; {&#10;                override fun onSuccess(&#10;                    statusCode: Int,&#10;                    responseHeaders: Headers?,&#10;                    stocks: MutableList&lt;StockProducto?&gt;?&#10;                ) {&#10;                    callback.onSuccess(stocks)&#10;&#10;                    stocks?.let { listaStocks -&gt;&#10;                        CoroutineScope(Dispatchers.IO).launch {&#10;                            try {&#10;                                val stockDao = AppDatabase.getInstance(context.applicationContext).stockProductoDao()&#10;                                val stockEntities = listaStocks.toStockProductoEntityList()&#10;                                stockEntities.forEach { entity -&gt;&#10;                                    stockDao.insert(entity)&#10;                                }&#10;                                Log.d(TAG, &quot;${stockEntities.size} stocks guardados/actualizados en la BD.&quot;)&#10;                            } catch (e: Exception) {&#10;                                Log.e(TAG, &quot;Error al guardar stocks en la BD: ${e.message}&quot;, e)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                override fun onError(statusCode: Int, errorMessage: String?) {&#10;                    Log.e(&#10;                        TAG,&#10;                        &quot;Error al obtener stocks. Código: $statusCode, Mensaje: $errorMessage&quot;&#10;                    )&#10;                    callback.onError(errorMessage)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    interface StockListCallback {&#10;        fun onSuccess(stocks: MutableList&lt;StockProducto?&gt;?)&#10;        fun onError(errorMessage: String?)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>