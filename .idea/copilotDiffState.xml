<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.hardware.camera&quot;&#10;        android:required=&quot;false&quot; /&gt;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.NexoFiscalPOSV2&quot;&#10;        &gt;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;!-- MainActivity ya no tiene filtro LAUNCHER --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;        &lt;receiver&#10;            android:name=&quot;.AdminReceiver&quot;&#10;            android:description=&quot;@string/app_name&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:permission=&quot;android.permission.BIND_DEVICE_ADMIN&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;meta-data&#10;                android:name=&quot;android.app.device_admin&quot;&#10;                android:resource=&quot;@xml/device_admin&quot; /&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.app.action.DEVICE_ADMIN_ENABLED&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/receiver&gt;&#10;        &lt;service&#10;            android:name=&quot;.SyncService&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:foregroundServiceType=&quot;dataSync&quot; /&gt;&#10;    &lt;/application&gt;&#10;    &lt;!-- Permisos necesarios --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE_DATA_SYNC&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&#10;        android:maxSdkVersion=&quot;28&quot; /&gt;&#10;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.hardware.camera&quot;&#10;        android:required=&quot;false&quot; /&gt;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.NexoFiscalPOSV2&quot;&#10;        &gt;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;!-- MainActivity ya no tiene filtro LAUNCHER --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;false&quot;/&gt;&#10;        &lt;receiver&#10;            android:name=&quot;.AdminReceiver&quot;&#10;            android:description=&quot;@string/app_name&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:permission=&quot;android.permission.BIND_DEVICE_ADMIN&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;meta-data&#10;                android:name=&quot;android.app.device_admin&quot;&#10;                android:resource=&quot;@xml/device_admin&quot; /&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.app.action.DEVICE_ADMIN_ENABLED&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/receiver&gt;&#10;        &lt;service&#10;            android:name=&quot;.SyncService&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:foregroundServiceType=&quot;dataSync&quot; /&gt;&#10;    &lt;/application&gt;&#10;    &lt;!-- Permisos necesarios --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE_DATA_SYNC&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&#10;        android:maxSdkVersion=&quot;28&quot; /&gt;&#10;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ProductoStockViewModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ProductoStockViewModel.java" />
              <option name="updatedContent" value="import androidx.lifecycle.LiveData;&#10;import androidx.lifecycle.MutableLiveData;&#10;import androidx.lifecycle.ViewModel;&#10;&#10;import java.util.List;&#10;&#10;public class ProductoStockViewModel extends ViewModel {&#10;&#10;    private final MutableLiveData&lt;List&lt;ProductoStock&gt;&gt; productosStock = new MutableLiveData&lt;&gt;();&#10;&#10;    public LiveData&lt;List&lt;ProductoStock&gt;&gt; getProductosStock() {&#10;        return productosStock;&#10;    }&#10;&#10;    public void cargarProductosStock() {&#10;        // Aquí se debe implementar la lógica para cargar los datos de la tabla stock_productos&#10;        // y actualizar el valor de productosStock con los datos obtenidos.&#10;&#10;        // Ejemplo de datos simulados:&#10;        List&lt;ProductoStock&gt; datosSimulados = List.of(&#10;            new ProductoStock(1, &quot;Producto A&quot;, 10),&#10;            new ProductoStock(2, &quot;Producto B&quot;, 5),&#10;            new ProductoStock(3, &quot;Producto C&quot;, 20)&#10;        );&#10;&#10;        productosStock.setValue(datosSimulados);&#10;    }&#10;&#10;    public static class ProductoStock {&#10;        private final int productoId;&#10;        private final String nombre;&#10;        private final int stock;&#10;&#10;        public ProductoStock(int productoId, String nombre, int stock) {&#10;            this.productoId = productoId;&#10;            this.nombre = nombre;&#10;            this.stock = stock;&#10;        }&#10;&#10;        public int getProductoId() {&#10;            return productoId;&#10;        }&#10;&#10;        public String getNombre() {&#10;            return nombre;&#10;        }&#10;&#10;        public int getStock() {&#10;            return stock;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscal posv2/screens/StockScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscal posv2/screens/StockScreen.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Inventory&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Warning&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.paging.compose.collectAsLazyPagingItems&#10;import androidx.paging.compose.items&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entities.ProductoEntity&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.StockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.ui.theme.NexoTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun StockScreen(&#10;    viewModel: StockViewModel,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    val pagedProductos = viewModel.pagedProductos.collectAsLazyPagingItems()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Control de Stock&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cerrar&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Search bar&#10;        OutlinedTextField(&#10;            value = searchQuery,&#10;            onValueChange = { query -&gt;&#10;                searchQuery = query&#10;                viewModel.search(query)&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            placeholder = { Text(&quot;Buscar producto...&quot;) },&#10;            leadingIcon = {&#10;                Icon(Icons.Default.Search, contentDescription = &quot;Buscar&quot;)&#10;            },&#10;            shape = RoundedCornerShape(12.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Header de la tabla&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer&#10;            )&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(12.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;Producto&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(3f)&#10;                )&#10;                Text(&#10;                    text = &quot;Stock\nActual&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f),&#10;                    fontSize = 12.sp&#10;                )&#10;                Text(&#10;                    text = &quot;Stock\nMínimo&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f),&#10;                    fontSize = 12.sp&#10;                )&#10;                Text(&#10;                    text = &quot;Stock\nPedido&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f),&#10;                    fontSize = 12.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Lista de productos&#10;        LazyColumn(&#10;            verticalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            items(pagedProductos) { producto -&gt;&#10;                producto?.let {&#10;                    StockItemCard(producto = it)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StockItemCard(producto: ProductoEntity) {&#10;    val isLowStock = producto.stock &lt; producto.stockMinimo&#10;    &#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isLowStock) {&#10;                MaterialTheme.colorScheme.errorContainer.copy(alpha = 0.1f)&#10;            } else {&#10;                MaterialTheme.colorScheme.surface&#10;            }&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Información del producto&#10;            Column(&#10;                modifier = Modifier.weight(3f)&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    if (isLowStock) {&#10;                        Icon(&#10;                            Icons.Default.Warning,&#10;                            contentDescription = &quot;Stock bajo&quot;,&#10;                            tint = MaterialTheme.colorScheme.error,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                    }&#10;                    &#10;                    Text(&#10;                        text = producto.descripcion ?: &quot;Sin descripción&quot;,&#10;                        fontWeight = FontWeight.Medium,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;                &#10;                Text(&#10;                    text = &quot;Código: ${producto.codigo ?: &quot;N/A&quot;}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;&#10;            // Stock actual&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;${producto.stock}&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = if (isLowStock) {&#10;                        MaterialTheme.colorScheme.error&#10;                    } else {&#10;                        MaterialTheme.colorScheme.primary&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Stock mínimo&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;${producto.stockMinimo}&quot;,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f)&#10;                )&#10;            }&#10;&#10;            // Stock pedido&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;${producto.stockPedido}&quot;,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/ProductosConStockActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/ProductosConStockActivity.kt" />
              <option name="originalContent" value="package ar.com.nexofiscal.nexofiscalposv2&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.ViewModelProvider&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStock&#10;import ar.com.nexofiscal.nexofiscalposv2.db.repository.ProductoRepository&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ProductosConStockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ProductosConStockViewModelFactory&#10;&#10;&#10;class ProductosConStockActivity : ComponentActivity() {&#10;&#10;    private lateinit var viewModel: ProductosConStockViewModel&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Inicializar base de datos y repositorio&#10;        val database = AppDatabase.getInstance(this)&#10;        val repository = ProductoRepository(database.productoDao())&#10;&#10;        // Crear ViewModel&#10;        val factory = ProductosConStockViewModelFactory(repository)&#10;        viewModel = ViewModelProvider(this, factory)[ProductosConStockViewModel::class.java]&#10;&#10;        setContent {&#10;            NexofiscalposV2Theme {&#10;                ProductosConStockScreen(&#10;                    viewModel = viewModel,&#10;                    onBackClick = { finish() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProductosConStockScreen(&#10;    viewModel: ProductosConStockViewModel,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    val productosConStock by viewModel.productosConStock.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val searchQuery by viewModel.searchQuery.collectAsState()&#10;&#10;    var searchText by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFFF5F5F5))&#10;    ) {&#10;        // TopAppBar&#10;        TopAppBar(&#10;            title = { Text(&quot;Productos con Stock&quot;) },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(Icons.Default.ArrowBack, contentDescription = &quot;Volver&quot;)&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                titleContentColor = Color.White,&#10;                navigationIconContentColor = Color.White&#10;            )&#10;        )&#10;&#10;        // Barra de búsqueda&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchText,&#10;                onValueChange = {&#10;                    searchText = it&#10;                    viewModel.buscarProductos(it)&#10;                },&#10;                label = { Text(&quot;Buscar productos...&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = &quot;Buscar&quot;)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                singleLine = true&#10;            )&#10;        }&#10;&#10;        // Contenido principal&#10;        if (isLoading) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentPadding = PaddingValues(horizontal = 16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(productosConStock) { productoConStock -&gt;&#10;                    ProductoConStockItem(productoConStock = productoConStock)&#10;                }&#10;&#10;                if (productosConStock.isEmpty()) {&#10;                    item {&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 32.dp),&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                        ) {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(32.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = if (searchQuery.isNotBlank())&#10;                                        &quot;No se encontraron productos que coincidan con la búsqueda&quot;&#10;                                    else&#10;                                        &quot;No hay productos disponibles&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    color = Color.Gray&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProductoConStockItem(productoConStock: ProductoConStock) {&#10;    val producto = productoConStock.producto&#10;    val stock = productoConStock.stockProducto&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            // Código del producto&#10;            if (!producto.codigo.isNullOrBlank()) {&#10;                Text(&#10;                    text = &quot;Código: ${producto.codigo}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;            }&#10;&#10;            // Descripción del producto&#10;            Text(&#10;                text = producto.descripcion ?: &quot;Sin descripción&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Información de stock&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Stock actual&#10;                val stockActual = stock?.stockActual ?: 0.0&#10;                val controlaStock = stock?.controlaStock ?: false&#10;&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Stock Actual&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                    Text(&#10;                        text = if (controlaStock) stockActual.toString() else &quot;No controlado&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = when {&#10;                            !controlaStock -&gt; Color.Gray&#10;                            stockActual &gt; (stock?.puntoPedido ?: 0.0) -&gt; Color(0xFF4CAF50)&#10;                            stockActual &gt; 0 -&gt; Color(0xFFFF9800)&#10;                            else -&gt; Color(0xFFF44336)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Punto de pedido&#10;                if (controlaStock) {&#10;                    Column(horizontalAlignment = Alignment.End) {&#10;                        Text(&#10;                            text = &quot;Punto de Pedido&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color.Gray&#10;                        )&#10;                        Text(&#10;                            text = (stock?.puntoPedido ?: 0.0).toString(),&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Stock inicial si existe&#10;            if (stock?.stockInicial != null &amp;&amp; stock.stockInicial != 0.0) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Stock Inicial: ${stock.stockInicial}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;&#10;            // Precios&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Precio 1&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                    Text(&#10;                        text = &quot;$${String.format(&quot;%.2f&quot;, producto.precio1)}&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;&#10;                if (producto.precio2 &gt; 0) {&#10;                    Column(horizontalAlignment = Alignment.End) {&#10;                        Text(&#10;                            text = &quot;Precio 2&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color.Gray&#10;                        )&#10;                        Text(&#10;                            text = &quot;$${String.format(&quot;%.2f&quot;, producto.precio2)}&quot;,&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Código de barras si existe&#10;            if (!producto.codigoBarra.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Código de Barras: ${producto.codigoBarra}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.ViewModelProvider&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStock&#10;import ar.com.nexofiscal.nexofiscalposv2.db.repository.ProductoRepository&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ProductosConStockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ProductosConStockViewModelFactory&#10;&#10;&#10;class ProductosConStockActivity : ComponentActivity() {&#10;&#10;    private lateinit var viewModel: ProductosConStockViewModel&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Inicializar base de datos y repositorio&#10;        val database = AppDatabase.getInstance(this)&#10;        val repository = ProductoRepository(database.productoDao())&#10;&#10;        // Crear ViewModel&#10;        val factory = ProductosConStockViewModelFactory(repository)&#10;        viewModel = ViewModelProvider(this, factory)[ProductosConStockViewModel::class.java]&#10;&#10;        setContent {&#10;            NexofiscalposV2Theme {&#10;                ProductosConStockScreen(&#10;                    viewModel = viewModel,&#10;                    onBackClick = { finish() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProductosConStockScreen(&#10;    viewModel: ProductosConStockViewModel,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    val productosConStock by viewModel.productosConStock.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val searchQuery by viewModel.searchQuery.collectAsState()&#10;&#10;    var searchText by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFFF5F5F5))&#10;    ) {&#10;        // TopAppBar&#10;        TopAppBar(&#10;            title = { Text(&quot;Productos con Stock&quot;) },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(Icons.Default.ArrowBack, contentDescription = &quot;Volver&quot;)&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                titleContentColor = Color.White,&#10;                navigationIconContentColor = Color.White&#10;            )&#10;        )&#10;&#10;        // Barra de búsqueda&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchText,&#10;                onValueChange = {&#10;                    searchText = it&#10;                    viewModel.buscarProductos(it)&#10;                },&#10;                label = { Text(&quot;Buscar productos...&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = &quot;Buscar&quot;)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                singleLine = true&#10;            )&#10;        }&#10;&#10;        // Contenido principal&#10;        if (isLoading) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentPadding = PaddingValues(horizontal = 16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(productosConStock) { productoConStock -&gt;&#10;                    ProductoConStockItem(productoConStock = productoConStock)&#10;                }&#10;&#10;                if (productosConStock.isEmpty()) {&#10;                    item {&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 32.dp),&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                        ) {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(32.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = if (searchQuery.isNotBlank())&#10;                                        &quot;No se encontraron productos que coincidan con la búsqueda&quot;&#10;                                    else&#10;                                        &quot;No hay productos disponibles&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    color = Color.Gray&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProductoConStockItem(productoConStock: ProductoConStock) {&#10;    val producto = productoConStock.producto&#10;    val stock = productoConStock.stockProducto&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            // Código del producto&#10;            if (!producto.codigo.isNullOrBlank()) {&#10;                Text(&#10;                    text = &quot;Código: ${producto.codigo}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;            }&#10;&#10;            // Descripción del producto&#10;            Text(&#10;                text = producto.descripcion ?: &quot;Sin descripción&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Información de stock&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Stock actual&#10;                val stockActual = stock?.stockActual ?: 0.0&#10;                val controlaStock = stock?.controlaStock ?: false&#10;&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Stock Actual&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                    Text(&#10;                        text = if (controlaStock) stockActual.toString() else &quot;No controlado&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = when {&#10;                            !controlaStock -&gt; Color.Gray&#10;                            stockActual &gt; (stock?.puntoPedido ?: 0.0) -&gt; Color(0xFF4CAF50)&#10;                            stockActual &gt; 0 -&gt; Color(0xFFFF9800)&#10;                            else -&gt; Color(0xFFF44336)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Punto de pedido&#10;                if (controlaStock) {&#10;                    Column(horizontalAlignment = Alignment.End) {&#10;                        Text(&#10;                            text = &quot;Punto de Pedido&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color.Gray&#10;                        )&#10;                        Text(&#10;                            text = (stock?.puntoPedido ?: 0.0).toString(),&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Stock inicial si existe&#10;            if (stock?.stockInicial != null &amp;&amp; stock.stockInicial != 0.0) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Stock Inicial: ${stock.stockInicial}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;&#10;            // Precios&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Precio 1&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                    Text(&#10;                        text = &quot;$${String.format(&quot;%.2f&quot;, producto.precio1)}&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;&#10;                if (producto.precio2 &gt; 0) {&#10;                    Column(horizontalAlignment = Alignment.End) {&#10;                        Text(&#10;                            text = &quot;Precio 2&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color.Gray&#10;                        )&#10;                        Text(&#10;                            text = &quot;$${String.format(&quot;%.2f&quot;, producto.precio2)}&quot;,&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Código de barras si existe&#10;            if (!producto.codigoBarra.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Código de Barras: ${producto.codigoBarra}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/StockActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/StockActivity.kt" />
              <option name="originalContent" value="package ar.com.nexofiscal.nexofiscalposv2&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.ui.Modifier&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.StockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.screens.StockScreen&#10;import ar.com.nexofiscal.nexofiscalposv2.ui.theme.NexoFiscalPOSV2Theme&#10;&#10;class StockActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            NexoFiscalPOSV2Theme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    val viewModel: StockViewModel = viewModel()&#10;                    StockScreen(viewModel = viewModel)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2&#13;&#10;&#13;&#10;import android.os.Bundle&#13;&#10;import androidx.activity.ComponentActivity&#13;&#10;import androidx.activity.compose.setContent&#13;&#10;import androidx.activity.compose.BackHandler&#13;&#10;import androidx.compose.foundation.layout.fillMaxSize&#13;&#10;import androidx.compose.material3.MaterialTheme&#13;&#10;import androidx.compose.material3.Surface&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.StockViewModel&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.screens.StockScreen&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.ui.theme.NexoFiscalPOSV2Theme&#13;&#10;&#13;&#10;class StockActivity : ComponentActivity() {&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;        setContent {&#13;&#10;            NexoFiscalPOSV2Theme {&#13;&#10;                Surface(&#13;&#10;                    modifier = Modifier.fillMaxSize(),&#13;&#10;                    color = MaterialTheme.colorScheme.background&#13;&#10;                ) {&#13;&#10;                    val viewModel: StockViewModel = viewModel()&#13;&#10;&#13;&#10;                    // Manejar el botón de volver tanto del sistema como de la UI&#13;&#10;                    BackHandler {&#13;&#10;                        finish()&#13;&#10;                    }&#13;&#10;&#13;&#10;                    StockScreen(&#13;&#10;                        viewModel = viewModel,&#13;&#10;                        onDismiss = { finish() } // Cerrar la actividad cuando se presiona volver&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/dao/ProductoDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/dao/ProductoDao.kt" />
              <option name="originalContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.dao&#10;&#10;import androidx.paging.PagingSource&#10;import androidx.room.*&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoEntity&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConDetalles&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStockCompleto&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface ProductoDao {&#10;    // --- CAMBIO: Las consultas ahora excluyen los registros marcados para borrar ---&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM productos WHERE syncStatus != :statusDeleted ORDER BY descripcion ASC&quot;)&#10;    fun getPagingSourceWithDetails(statusDeleted: SyncStatus = SyncStatus.DELETED): PagingSource&lt;Int, ProductoConDetalles&gt;&#10;&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM productos WHERE (descripcion LIKE :query OR codigo LIKE :query OR codigoBarra LIKE :query) AND syncStatus != :statusDeleted ORDER BY descripcion ASC&quot;)&#10;    fun searchPagingSourceWithDetails(query: String, statusDeleted: SyncStatus = SyncStatus.DELETED): PagingSource&lt;Int, ProductoConDetalles&gt;&#10;&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM productos WHERE favorito = 1 AND syncStatus != :statusDeleted ORDER BY descripcion ASC&quot;)&#10;    fun getFavoritosWithDetails(statusDeleted: SyncStatus = SyncStatus.DELETED): Flow&lt;List&lt;ProductoConDetalles&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM productos WHERE (codigoBarra = :barcode OR codigoBarra2 = :barcode) AND syncStatus != :statusDeleted LIMIT 1&quot;)&#10;    suspend fun findByBarcode(barcode: String, statusDeleted: SyncStatus = SyncStatus.DELETED): ProductoEntity?&#10;&#10;    // --- FUNCIONES NUEVAS PARA SINCRONIZACIÓN ---&#10;&#10;    @Query(&quot;SELECT * FROM productos WHERE syncStatus != :statusSynced&quot;)&#10;    suspend fun getUnsynced(statusSynced: SyncStatus = SyncStatus.SYNCED): List&lt;ProductoEntity&gt;&#10;&#10;    @Query(&quot;UPDATE productos SET serverId = :serverId, syncStatus = :statusSynced WHERE id = :localId&quot;)&#10;    suspend fun updateServerIdAndStatus(localId: Int, serverId: Int, statusSynced: SyncStatus = SyncStatus.SYNCED)&#10;&#10;    @Query(&quot;UPDATE productos SET syncStatus = :statusSynced WHERE serverId = :serverId&quot;)&#10;    suspend fun updateStatusToSyncedByServerId(serverId: Int, statusSynced: SyncStatus = SyncStatus.SYNCED)&#10;&#10;    @Query(&quot;DELETE FROM productos WHERE id = :localId&quot;)&#10;    suspend fun deleteByLocalId(localId: Int)&#10;&#10;    @Query(&quot;SELECT * FROM productos WHERE serverId = :serverId LIMIT 1&quot;)&#10;    suspend fun findByServerId(serverId: Int): ProductoEntity?&#10;&#10;    @Transaction&#10;    suspend fun upsertAll(productos: List&lt;ProductoEntity&gt;) {&#10;        productos.forEach { producto -&gt;&#10;            val existente = producto.serverId?.let { findByServerId(it) }&#10;&#10;            val entidadParaInsertar = if (existente != null) {&#10;                // Si el producto ya existe, creamos una copia con los nuevos datos&#10;                // pero manteniendo el ID local del registro existente.&#10;                producto.copy(id = existente.id)&#10;            } else {&#10;                // Si es un producto nuevo, lo insertamos tal cual.&#10;                producto&#10;            }&#10;&#10;            // La estrategia OnConflictStrategy.REPLACE se encargará de actualizar la fila&#10;            // si el ID local ya existe, o de insertar una nueva si no.&#10;            insert(entidadParaInsertar)&#10;        }&#10;    }&#10;&#10;    // --- MÉTODOS EXISTENTES ---&#10;&#10;    @Query(&quot;SELECT * FROM productos WHERE id = :id&quot;)&#10;    suspend fun getById(id: Int): ProductoEntity?&#10;&#10;    @Query(&quot;SELECT * FROM productos WHERE favorito = 1 ORDER BY descripcion ASC&quot;)&#10;    fun getFavoritos(): Flow&lt;List&lt;ProductoEntity&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insert(producto: ProductoEntity)&#10;&#10;    @Transaction&#10;    @Query(&quot;SELECT * FROM productos WHERE id = :id&quot;)&#10;    suspend fun getConDetallesById(id: Int): ProductoConDetalles?&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertAll(items: List&lt;ProductoEntity&gt;)&#10;&#10;    @Update&#10;    suspend fun update(producto: ProductoEntity)&#10;&#10;    @Query(&quot;DELETE FROM productos&quot;)&#10;    suspend fun clearAll()&#10;&#10;    // Nueva consulta para obtener productos con stock completo&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT &#10;            p.id as producto_id,&#10;            p.codigo,&#10;            p.descripcion,&#10;            p.stockMinimo as stock_minimo,&#10;            p.stockPedido as stock_pedido,&#10;            COALESCE(sp.stockActual, 0.0) as stock_actual&#10;        FROM productos p&#10;        LEFT JOIN stock_productos sp ON p.id = sp.productoId&#10;        WHERE p.syncStatus != :statusDeleted&#10;        ORDER BY p.descripcion ASC&#10;    &quot;&quot;&quot;)&#10;    fun getProductosConStockCompleto(statusDeleted: SyncStatus = SyncStatus.DELETED): Flow&lt;List&lt;ProductoConStockCompleto&gt;&gt;&#10;&#10;}" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.dao&#13;&#10;&#13;&#10;import androidx.paging.PagingSource&#13;&#10;import androidx.room.*&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoEntity&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConDetalles&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStockCompleto&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus&#13;&#10;import kotlinx.coroutines.flow.Flow&#13;&#10;&#13;&#10;@Dao&#13;&#10;interface ProductoDao {&#13;&#10;    // --- CAMBIO: Las consultas ahora excluyen los registros marcados para borrar ---&#13;&#10;    @Transaction&#13;&#10;    @Query(&quot;SELECT * FROM productos WHERE syncStatus != :statusDeleted ORDER BY descripcion ASC&quot;)&#13;&#10;    fun getPagingSourceWithDetails(statusDeleted: SyncStatus = SyncStatus.DELETED): PagingSource&lt;Int, ProductoConDetalles&gt;&#13;&#10;&#13;&#10;    @Transaction&#13;&#10;    @Query(&quot;SELECT * FROM productos WHERE (descripcion LIKE :query OR codigo LIKE :query OR codigoBarra LIKE :query) AND syncStatus != :statusDeleted ORDER BY descripcion ASC&quot;)&#13;&#10;    fun searchPagingSourceWithDetails(query: String, statusDeleted: SyncStatus = SyncStatus.DELETED): PagingSource&lt;Int, ProductoConDetalles&gt;&#13;&#10;&#13;&#10;    @Transaction&#13;&#10;    @Query(&quot;SELECT * FROM productos WHERE favorito = 1 AND syncStatus != :statusDeleted ORDER BY descripcion ASC&quot;)&#13;&#10;    fun getFavoritosWithDetails(statusDeleted: SyncStatus = SyncStatus.DELETED): Flow&lt;List&lt;ProductoConDetalles&gt;&gt;&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM productos WHERE (codigoBarra = :barcode OR codigoBarra2 = :barcode) AND syncStatus != :statusDeleted LIMIT 1&quot;)&#13;&#10;    suspend fun findByBarcode(barcode: String, statusDeleted: SyncStatus = SyncStatus.DELETED): ProductoEntity?&#13;&#10;&#13;&#10;    // --- FUNCIONES NUEVAS PARA SINCRONIZACIÓN ---&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM productos WHERE syncStatus != :statusSynced&quot;)&#13;&#10;    suspend fun getUnsynced(statusSynced: SyncStatus = SyncStatus.SYNCED): List&lt;ProductoEntity&gt;&#13;&#10;&#13;&#10;    @Query(&quot;UPDATE productos SET serverId = :serverId, syncStatus = :statusSynced WHERE id = :localId&quot;)&#13;&#10;    suspend fun updateServerIdAndStatus(localId: Int, serverId: Int, statusSynced: SyncStatus = SyncStatus.SYNCED)&#13;&#10;&#13;&#10;    @Query(&quot;UPDATE productos SET syncStatus = :statusSynced WHERE serverId = :serverId&quot;)&#13;&#10;    suspend fun updateStatusToSyncedByServerId(serverId: Int, statusSynced: SyncStatus = SyncStatus.SYNCED)&#13;&#10;&#13;&#10;    @Query(&quot;DELETE FROM productos WHERE id = :localId&quot;)&#13;&#10;    suspend fun deleteByLocalId(localId: Int)&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM productos WHERE serverId = :serverId LIMIT 1&quot;)&#13;&#10;    suspend fun findByServerId(serverId: Int): ProductoEntity?&#13;&#10;&#13;&#10;    @Transaction&#13;&#10;    suspend fun upsertAll(productos: List&lt;ProductoEntity&gt;) {&#13;&#10;        productos.forEach { producto -&gt;&#13;&#10;            val existente = producto.serverId?.let { findByServerId(it) }&#13;&#10;&#13;&#10;            val entidadParaInsertar = if (existente != null) {&#13;&#10;                // Si el producto ya existe, creamos una copia con los nuevos datos&#13;&#10;                // pero manteniendo el ID local del registro existente.&#13;&#10;                producto.copy(id = existente.id)&#13;&#10;            } else {&#13;&#10;                // Si es un producto nuevo, lo insertamos tal cual.&#13;&#10;                producto&#13;&#10;            }&#13;&#10;&#13;&#10;            // La estrategia OnConflictStrategy.REPLACE se encargará de actualizar la fila&#13;&#10;            // si el ID local ya existe, o de insertar una nueva si no.&#13;&#10;            insert(entidadParaInsertar)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // --- MÉTODOS EXISTENTES ---&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM productos WHERE id = :id&quot;)&#13;&#10;    suspend fun getById(id: Int): ProductoEntity?&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM productos WHERE favorito = 1 ORDER BY descripcion ASC&quot;)&#13;&#10;    fun getFavoritos(): Flow&lt;List&lt;ProductoEntity&gt;&gt;&#13;&#10;&#13;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#13;&#10;    suspend fun insert(producto: ProductoEntity)&#13;&#10;&#13;&#10;    @Transaction&#13;&#10;    @Query(&quot;SELECT * FROM productos WHERE id = :id&quot;)&#13;&#10;    suspend fun getConDetallesById(id: Int): ProductoConDetalles?&#13;&#10;&#13;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#13;&#10;    suspend fun insertAll(items: List&lt;ProductoEntity&gt;)&#13;&#10;&#13;&#10;    @Update&#13;&#10;    suspend fun update(producto: ProductoEntity)&#13;&#10;&#13;&#10;    @Query(&quot;DELETE FROM productos&quot;)&#13;&#10;    suspend fun clearAll()&#13;&#10;&#13;&#10;    // Nueva consulta para obtener productos con stock completo&#13;&#10;    @Query(&quot;&quot;&quot;&#13;&#10;        SELECT &#13;&#10;            p.id as producto_id,&#13;&#10;            p.codigo,&#13;&#10;            p.descripcion,&#13;&#10;            p.stockMinimo as stock_minimo,&#13;&#10;            p.stockPedido as stock_pedido,&#13;&#10;            COALESCE(sp.stockActual, 0.0) as stock_actual&#13;&#10;        FROM productos p&#13;&#10;        LEFT JOIN stock_productos sp ON p.id = sp.productoId&#13;&#10;        WHERE p.syncStatus != :statusDeleted&#13;&#10;        ORDER BY p.descripcion ASC&#13;&#10;    &quot;&quot;&quot;)&#13;&#10;    fun getProductosConStockCompleto(statusDeleted: SyncStatus = SyncStatus.DELETED): Flow&lt;List&lt;ProductoConStockCompleto&gt;&gt;&#13;&#10;&#13;&#10;    // Consulta de prueba para verificar si hay datos&#13;&#10;    @Query(&quot;SELECT COUNT(*) FROM productos WHERE syncStatus != :statusDeleted&quot;)&#13;&#10;    suspend fun getProductosCount(statusDeleted: SyncStatus = SyncStatus.DELETED): Int&#13;&#10;&#13;&#10;    @Query(&quot;SELECT COUNT(*) FROM stock_productos&quot;)&#13;&#10;    suspend fun getStockProductosCount(): Int&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/entity/ProductoConStockCompleto.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/entity/ProductoConStockCompleto.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.entity&#10;&#10;import androidx.room.ColumnInfo&#10;&#10;data class ProductoConStockCompleto(&#10;    @ColumnInfo(name = &quot;producto_id&quot;) val productoId: Int,&#10;    @ColumnInfo(name = &quot;codigo&quot;) val codigo: String?,&#10;    @ColumnInfo(name = &quot;descripcion&quot;) val descripcion: String?,&#10;    @ColumnInfo(name = &quot;stock_minimo&quot;) val stockMinimo: Int,&#10;    @ColumnInfo(name = &quot;stock_pedido&quot;) val stockPedido: Int,&#10;    @ColumnInfo(name = &quot;stock_actual&quot;) val stockActual: Double?&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/repository/ProductoRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/repository/ProductoRepository.kt" />
              <option name="originalContent" value="// main/java/ar/com/nexofiscal/nexofiscalposv2/db/repository/ProductoRepository.kt&#10;package ar.com.nexofiscal.nexofiscalposv2.db.repository&#10;&#10;import androidx.paging.Pager&#10;import androidx.paging.PagingConfig&#10;import androidx.paging.PagingData&#10;import ar.com.nexofiscal.nexofiscalposv2.db.dao.ProductoDao&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoEntity&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConDetalles&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStockCompleto&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class ProductoRepository(private val dao: ProductoDao) {&#10;&#10;    fun getProductosPaginated(query: String): Flow&lt;PagingData&lt;ProductoConDetalles&gt;&gt; {&#10;        val normalizedQuery = &quot;%${query.trim()}%&quot;&#10;        return Pager(&#10;            config = PagingConfig(pageSize = 200, enablePlaceholders = false),&#10;            pagingSourceFactory = {&#10;                if (query.isBlank()) {&#10;                    dao.getPagingSourceWithDetails()&#10;                } else {&#10;                    dao.searchPagingSourceWithDetails(normalizedQuery)&#10;                }&#10;            }&#10;        ).flow&#10;    }&#10;&#10;    // Nuevo método para obtener productos con stock completo&#10;    fun getProductosConStockCompleto(): Flow&lt;List&lt;ProductoConStockCompleto&gt;&gt; {&#10;        return dao.getProductosConStockCompleto()&#10;    }&#10;&#10;    // Asegúrate de que este método, que ya existe en el DAO, esté expuesto aquí.&#10;&#10;&#10;    suspend fun getConDetallesById(id: Int): ProductoConDetalles? = dao.getConDetallesById(id)&#10;    fun getFavoritosWithDetails(): Flow&lt;List&lt;ProductoConDetalles&gt;&gt; = dao.getFavoritosWithDetails()&#10;&#10;    suspend fun findByBarcode(barcode: String): ProductoEntity? {&#10;        return dao.findByBarcode(barcode)&#10;    }&#10;    suspend fun porId(id: Int): ProductoEntity? = dao.getById(id)&#10;    fun getFavoritos(): Flow&lt;List&lt;ProductoEntity&gt;&gt; = dao.getFavoritos()&#10;    suspend fun guardar(p: ProductoEntity) = dao.insert(p)&#10;    suspend fun actualizar(p: ProductoEntity) = dao.update(p)&#10;    suspend fun eliminar(entity: ProductoEntity) {&#10;        entity.syncStatus = SyncStatus.DELETED&#10;        dao.update(entity) // Se utiliza el método update del DAO.&#10;    }&#10;    suspend fun eliminarTodo() = dao.clearAll()&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="// main/java/ar/com/nexofiscal/nexofiscalposv2/db/repository/ProductoRepository.kt&#13;&#10;package ar.com.nexofiscal.nexofiscalposv2.db.repository&#13;&#10;&#13;&#10;import androidx.paging.Pager&#13;&#10;import androidx.paging.PagingConfig&#13;&#10;import androidx.paging.PagingData&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.dao.ProductoDao&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoEntity&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConDetalles&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStockCompleto&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus&#13;&#10;import kotlinx.coroutines.flow.Flow&#13;&#10;&#13;&#10;class ProductoRepository(private val dao: ProductoDao) {&#13;&#10;&#13;&#10;    fun getProductosPaginated(query: String): Flow&lt;PagingData&lt;ProductoConDetalles&gt;&gt; {&#13;&#10;        val normalizedQuery = &quot;%${query.trim()}%&quot;&#13;&#10;        return Pager(&#13;&#10;            config = PagingConfig(pageSize = 200, enablePlaceholders = false),&#13;&#10;            pagingSourceFactory = {&#13;&#10;                if (query.isBlank()) {&#13;&#10;                    dao.getPagingSourceWithDetails()&#13;&#10;                } else {&#13;&#10;                    dao.searchPagingSourceWithDetails(normalizedQuery)&#13;&#10;                }&#13;&#10;            }&#13;&#10;        ).flow&#13;&#10;    }&#13;&#10;&#13;&#10;    // Nuevo método para obtener productos con stock completo&#13;&#10;    fun getProductosConStockCompleto(): Flow&lt;List&lt;ProductoConStockCompleto&gt;&gt; {&#13;&#10;        return dao.getProductosConStockCompleto()&#13;&#10;    }&#13;&#10;&#13;&#10;    // Métodos de diagnóstico&#13;&#10;    suspend fun getProductosCount(): Int = dao.getProductosCount()&#13;&#10;    suspend fun getStockProductosCount(): Int = dao.getStockProductosCount()&#13;&#10;&#13;&#10;    // Asegúrate de que este método, que ya existe en el DAO, esté expuesto aquí.&#13;&#10;&#13;&#10;&#13;&#10;    suspend fun getConDetallesById(id: Int): ProductoConDetalles? = dao.getConDetallesById(id)&#13;&#10;    fun getFavoritosWithDetails(): Flow&lt;List&lt;ProductoConDetalles&gt;&gt; = dao.getFavoritosWithDetails()&#13;&#10;&#13;&#10;    suspend fun findByBarcode(barcode: String): ProductoEntity? {&#13;&#10;        return dao.findByBarcode(barcode)&#13;&#10;    }&#13;&#10;    suspend fun porId(id: Int): ProductoEntity? = dao.getById(id)&#13;&#10;    fun getFavoritos(): Flow&lt;List&lt;ProductoEntity&gt;&gt; = dao.getFavoritos()&#13;&#10;    suspend fun guardar(p: ProductoEntity) = dao.insert(p)&#13;&#10;    suspend fun actualizar(p: ProductoEntity) = dao.update(p)&#13;&#10;    suspend fun eliminar(entity: ProductoEntity) {&#13;&#10;        entity.syncStatus = SyncStatus.DELETED&#13;&#10;        dao.update(entity) // Se utiliza el método update del DAO.&#13;&#10;    }&#13;&#10;    suspend fun eliminarTodo() = dao.clearAll()&#13;&#10;&#13;&#10;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductoStockDetalleViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductoStockDetalleViewModel.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.viewmodel&#10;&#10;import android.app.Application&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.paging.Pager&#10;import androidx.paging.PagingConfig&#10;import androidx.paging.PagingData&#10;import androidx.paging.cachedIn&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStockDetalle&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.flatMapLatest&#10;&#10;class ProductoStockDetalleViewModel(application: Application) : AndroidViewModel(application) {&#10;    &#10;    private val database = AppDatabase.getDatabase(application)&#10;    private val productoDao = database.productoDao()&#10;    &#10;    private val searchQuery = MutableStateFlow(&quot;&quot;)&#10;    &#10;    val pagedProductosConStock: Flow&lt;PagingData&lt;ProductoConStockDetalle&gt;&gt; = searchQuery&#10;        .flatMapLatest { query -&gt;&#10;            Pager(&#10;                config = PagingConfig(&#10;                    pageSize = 20,&#10;                    enablePlaceholders = false&#10;                ),&#10;                pagingSourceFactory = {&#10;                    if (query.isEmpty()) {&#10;                        productoDao.getProductosConStockDetallePaging()&#10;                    } else {&#10;                        productoDao.searchProductosConStockDetallePaging(&quot;%$query%&quot;)&#10;                    }&#10;                }&#10;            ).flow&#10;        }.cachedIn(viewModelScope)&#10;    &#10;    fun search(query: String) {&#10;        searchQuery.value = query&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductoStockViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductoStockViewModel.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.viewmodel&#10;&#10;import android.app.Application&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.paging.Pager&#10;import androidx.paging.PagingConfig&#10;import androidx.paging.PagingData&#10;import androidx.paging.cachedIn&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStock&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.flatMapLatest&#10;&#10;class ProductoStockViewModel(application: Application) : AndroidViewModel(application) {&#10;    &#10;    private val database = AppDatabase.getDatabase(application)&#10;    private val productoDao = database.productoDao()&#10;    &#10;    private val searchQuery = MutableStateFlow(&quot;&quot;)&#10;    &#10;    val pagedProductosConStock: Flow&lt;PagingData&lt;ProductoConStock&gt;&gt; = searchQuery&#10;        .flatMapLatest { query -&gt;&#10;            Pager(&#10;                config = PagingConfig(&#10;                    pageSize = 20,&#10;                    enablePlaceholders = false&#10;                ),&#10;                pagingSourceFactory = {&#10;                    if (query.isEmpty()) {&#10;                        productoDao.getPagingSourceWithStock()&#10;                    } else {&#10;                        productoDao.searchPagingSourceWithStock(&quot;%$query%&quot;)&#10;                    }&#10;                }&#10;            ).flow&#10;        }.cachedIn(viewModelScope)&#10;    &#10;    fun search(query: String) {&#10;        searchQuery.value = query&#10;    }&#10;    &#10;    fun clearSearch() {&#10;        searchQuery.value = &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductosConStockViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductosConStockViewModel.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewModelScope&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStock&#10;import ar.com.nexofiscal.nexofiscalposv2.db.repository.ProductoRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class ProductosConStockViewModel(private val repository: ProductoRepository) : ViewModel() {&#10;&#10;    private val _productosConStock = MutableStateFlow&lt;List&lt;ProductoConStock&gt;&gt;(emptyList())&#10;    val productosConStock: StateFlow&lt;List&lt;ProductoConStock&gt;&gt; = _productosConStock.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _searchQuery = MutableStateFlow(&quot;&quot;)&#10;    val searchQuery: StateFlow&lt;String&gt; = _searchQuery.asStateFlow()&#10;&#10;    init {&#10;        cargarProductosConStock()&#10;    }&#10;&#10;    private fun cargarProductosConStock() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            repository.getProductosConStock().collect { productos -&gt;&#10;                _productosConStock.value = filtrarProductos(productos, _searchQuery.value)&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun buscarProductos(query: String) {&#10;        _searchQuery.value = query&#10;        val productosFiltrados = filtrarProductos(_productosConStock.value, query)&#10;        _productosConStock.value = productosFiltrados&#10;    }&#10;&#10;    private fun filtrarProductos(productos: List&lt;ProductoConStock&gt;, query: String): List&lt;ProductoConStock&gt; {&#10;        if (query.isBlank()) return productos&#10;        &#10;        val queryLower = query.lowercase()&#10;        return productos.filter { productoConStock -&gt;&#10;            val producto = productoConStock.producto&#10;            producto.descripcion?.lowercase()?.contains(queryLower) == true ||&#10;            producto.codigo?.lowercase()?.contains(queryLower) == true ||&#10;            producto.codigoBarra?.lowercase()?.contains(queryLower) == true ||&#10;            producto.codigoBarra2?.lowercase()?.contains(queryLower) == true&#10;        }&#10;    }&#10;&#10;    fun limpiarBusqueda() {&#10;        _searchQuery.value = &quot;&quot;&#10;        cargarProductosConStock()&#10;    }&#10;}&#10;&#10;class ProductosConStockViewModelFactory(private val repository: ProductoRepository) : ViewModelProvider.Factory {&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(ProductosConStockViewModel::class.java)) {&#10;            @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;            return ProductosConStockViewModel(repository) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/StockViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/StockViewModel.kt" />
              <option name="originalContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.viewmodel&#10;&#10;import android.app.Application&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStockCompleto&#10;import ar.com.nexofiscal.nexofiscalposv2.db.repository.ProductoRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.combine&#10;import kotlinx.coroutines.flow.stateIn&#10;&#10;class StockViewModel(application: Application) : AndroidViewModel(application) {&#10;&#10;    private val repository: ProductoRepository&#10;&#10;    init {&#10;        val database = AppDatabase.getInstance(application) // Usar getInstance en lugar de getDatabase&#10;        repository = ProductoRepository(database.productoDao())&#10;    }&#10;&#10;    // Estado para la lista de productos con stock&#10;    val productosConStock: StateFlow&lt;List&lt;ProductoConStockCompleto&gt;&gt; = repository&#10;        .getProductosConStockCompleto()&#10;        .stateIn(&#10;            scope = viewModelScope,&#10;            started = SharingStarted.WhileSubscribed(5000),&#10;            initialValue = emptyList()&#10;        )&#10;&#10;    // Estado para filtros de búsqueda&#10;    private val _searchQuery = MutableStateFlow(&quot;&quot;)&#10;    val searchQuery: StateFlow&lt;String&gt; = _searchQuery.asStateFlow()&#10;&#10;    // Estado para productos filtrados usando combine&#10;    val filteredProducts: StateFlow&lt;List&lt;ProductoConStockCompleto&gt;&gt; = combine(&#10;        productosConStock,&#10;        searchQuery&#10;    ) { productos, query -&gt;&#10;        if (query.isBlank()) {&#10;            productos&#10;        } else {&#10;            productos.filter { producto -&gt;&#10;                producto.descripcion?.contains(query, ignoreCase = true) == true ||&#10;                producto.codigo?.contains(query, ignoreCase = true) == true&#10;            }&#10;        }&#10;    }.stateIn(&#10;        scope = viewModelScope,&#10;        started = SharingStarted.WhileSubscribed(5000),&#10;        initialValue = emptyList()&#10;    )&#10;&#10;    fun updateSearchQuery(query: String) {&#10;        _searchQuery.value = query&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.viewmodel&#13;&#10;&#13;&#10;import android.app.Application&#13;&#10;import android.util.Log&#13;&#10;import androidx.lifecycle.AndroidViewModel&#13;&#10;import androidx.lifecycle.viewModelScope&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStockCompleto&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.repository.ProductoRepository&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.SharingStarted&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;import kotlinx.coroutines.flow.asStateFlow&#13;&#10;import kotlinx.coroutines.flow.combine&#13;&#10;import kotlinx.coroutines.flow.stateIn&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;&#13;&#10;class StockViewModel(application: Application) : AndroidViewModel(application) {&#13;&#10;&#13;&#10;    private val repository: ProductoRepository&#13;&#10;&#13;&#10;    init {&#13;&#10;        val database = AppDatabase.getInstance(application) // Usar getInstance en lugar de getDatabase&#13;&#10;        repository = ProductoRepository(database.productoDao())&#13;&#10;&#13;&#10;        // Diagnóstico: verificar datos en las tablas&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                val productosCount = repository.getProductosCount()&#13;&#10;                val stockCount = repository.getStockProductosCount()&#13;&#10;                Log.d(&quot;StockViewModel&quot;, &quot;Productos en DB: $productosCount&quot;)&#13;&#10;                Log.d(&quot;StockViewModel&quot;, &quot;Registros de stock en DB: $stockCount&quot;)&#13;&#10;            } catch (e: Exception) {&#13;&#10;                Log.e(&quot;StockViewModel&quot;, &quot;Error al obtener counts: ${e.message}&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Estado para la lista de productos con stock&#13;&#10;    val productosConStock: StateFlow&lt;List&lt;ProductoConStockCompleto&gt;&gt; = repository&#13;&#10;        .getProductosConStockCompleto()&#13;&#10;        .stateIn(&#13;&#10;            scope = viewModelScope,&#13;&#10;            started = SharingStarted.WhileSubscribed(5000),&#13;&#10;            initialValue = emptyList()&#13;&#10;        )&#13;&#10;&#13;&#10;    // Estado para filtros de búsqueda&#13;&#10;    private val _searchQuery = MutableStateFlow(&quot;&quot;)&#13;&#10;    val searchQuery: StateFlow&lt;String&gt; = _searchQuery.asStateFlow()&#13;&#10;&#13;&#10;    // Estado para productos filtrados usando combine&#13;&#10;    val filteredProducts: StateFlow&lt;List&lt;ProductoConStockCompleto&gt;&gt; = combine(&#13;&#10;        productosConStock,&#13;&#10;        searchQuery&#13;&#10;    ) { productos, query -&gt;&#13;&#10;        Log.d(&quot;StockViewModel&quot;, &quot;Productos obtenidos: ${productos.size}&quot;)&#13;&#10;        if (productos.isNotEmpty()) {&#13;&#10;            Log.d(&quot;StockViewModel&quot;, &quot;Primer producto: ${productos.first().descripcion}, Stock: ${productos.first().stockActual}&quot;)&#13;&#10;        }&#13;&#10;&#13;&#10;        if (query.isBlank()) {&#13;&#10;            productos&#13;&#10;        } else {&#13;&#10;            productos.filter { producto -&gt;&#13;&#10;                producto.descripcion?.contains(query, ignoreCase = true) == true ||&#13;&#10;                producto.codigo?.contains(query, ignoreCase = true) == true&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }.stateIn(&#13;&#10;        scope = viewModelScope,&#13;&#10;        started = SharingStarted.WhileSubscribed(5000),&#13;&#10;        initialValue = emptyList()&#13;&#10;    )&#13;&#10;&#13;&#10;    fun updateSearchQuery(query: String) {&#13;&#10;        _searchQuery.value = query&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/managers/StockSyncManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/managers/StockSyncManager.kt" />
              <option name="originalContent" value="package ar.com.nexofiscal.nexofiscalposv2.managers&#10;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.StockProductoEntity&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus&#10;import ar.com.nexofiscal.nexofiscalposv2.network.ApiClient&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;import org.json.JSONObject&#10;&#10;class StockSyncManager(private val database: AppDatabase) {&#10;&#10;    private val ENDPOINT_AGRUPACIONES = &quot;/api/stocks&quot;&#10;&#10;    suspend fun sincronizarStock(apiUrl: String, token: String, sucursalId: Int) {&#10;        withContext(Dispatchers.IO) {&#10;            val response = ApiClient.request(&#10;                url = &quot;$apiUrl$ENDPOINT_AGRUPACIONES/?sucursal_id=$sucursalId&quot;,&#10;                headers = mapOf(&quot;Authorization&quot; to &quot;Bearer $token&quot;)&#10;            )&#10;&#10;            if (response.isSuccessful) {&#10;                val responseBody = response.body&#10;                responseBody?.let {&#10;                    val json = JSONObject(it)&#10;                    val stockList = json.getJSONArray(&quot;data&quot;)&#10;&#10;                    val stockEntities = mutableListOf&lt;StockProductoEntity&gt;()&#10;&#10;                    for (i in 0 until stockList.length()) {&#10;                        val stockItem = stockList.getJSONObject(i)&#10;                        val stockEntity = StockProductoEntity(&#10;                            productoId = stockItem.getInt(&quot;producto_id&quot;),&#10;                            empresaId = stockItem.getInt(&quot;empresa_id&quot;),&#10;                            stockActual = stockItem.getDouble(&quot;stock_actual&quot;),&#10;                            sucursalId = stockItem.getInt(&quot;sucursal_id&quot;),&#10;                            syncStatus = SyncStatus.SYNCED&#10;                        )&#10;                        stockEntities.add(stockEntity)&#10;                    }&#10;&#10;                    database.stockProductoDao().insertAll(stockEntities)&#10;                }&#10;            } else {&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.managers&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.StockProductoEntity&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus&#10;import ar.com.nexofiscal.nexofiscalposv2.db.mappers.toStockProductoEntityList&#10;import ar.com.nexofiscal.nexofiscalposv2.models.StockProducto&#10;import ar.com.nexofiscal.nexofiscalposv2.network.ApiCallback&#10;import ar.com.nexofiscal.nexofiscalposv2.network.ApiClient&#10;import ar.com.nexofiscal.nexofiscalposv2.network.HttpMethod&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import okhttp3.Headers&#10;import org.json.JSONObject&#10;&#10;object StockSyncManager {&#10;    private const val TAG = &quot;StockSyncManager&quot;&#10;    private const val ENDPOINT_STOCKS = &quot;/api/stocks&quot;&#10;&#10;    fun sincronizarStock(&#10;        context: Context,&#10;        headers: MutableMap&lt;String?, String?&gt;?,&#10;        sucursalId: Int,&#10;        callback: StockListCallback&#10;    ) {&#10;        val stockListType = object :&#10;            com.google.gson.reflect.TypeToken&lt;MutableList&lt;StockProducto?&gt;?&gt;() {}.type&#10;&#10;        ApiClient.request(&#10;            HttpMethod.GET,&#10;            &quot;$ENDPOINT_STOCKS/?sucursal_id=$sucursalId&quot;,&#10;            headers,&#10;            null,&#10;            stockListType,&#10;            object : ApiCallback&lt;MutableList&lt;StockProducto?&gt;?&gt; {&#10;                override fun onSuccess(&#10;                    statusCode: Int,&#10;                    responseHeaders: Headers?,&#10;                    stocks: MutableList&lt;StockProducto?&gt;?&#10;                ) {&#10;                    callback.onSuccess(stocks)&#10;&#10;                    stocks?.let { listaStocks -&gt;&#10;                        CoroutineScope(Dispatchers.IO).launch {&#10;                            try {&#10;                                val stockDao = AppDatabase.getInstance(context.applicationContext).stockProductoDao()&#10;                                val stockEntities = listaStocks.toStockProductoEntityList()&#10;                                stockEntities.forEach { entity -&gt;&#10;                                    stockDao.insert(entity)&#10;                                }&#10;                                Log.d(TAG, &quot;${stockEntities.size} stocks guardados/actualizados en la BD.&quot;)&#10;                            } catch (e: Exception) {&#10;                                Log.e(TAG, &quot;Error al guardar stocks en la BD: ${e.message}&quot;, e)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                override fun onError(statusCode: Int, errorMessage: String?) {&#10;                    Log.e(&#10;                        TAG,&#10;                        &quot;Error al obtener stocks. Código: $statusCode, Mensaje: $errorMessage&quot;&#10;                    )&#10;                    callback.onError(errorMessage)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    interface StockListCallback {&#10;        fun onSuccess(stocks: MutableList&lt;StockProducto?&gt;?)&#10;        fun onError(errorMessage: String?)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/screens/StockScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/screens/StockScreen.kt" />
              <option name="originalContent" value="package ar.com.nexofiscal.nexofiscalposv2.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.nestedscroll.nestedScroll&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStockCompleto&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.StockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.ui.theme.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun StockScreen(&#10;    viewModel: StockViewModel = viewModel(),&#10;    onDismiss: () -&gt; Unit = {&#10;&#10;&#10;&#10;    }&#10;) {&#10;    val filteredProducts by viewModel.filteredProducts.collectAsState()&#10;    val searchQuery by viewModel.searchQuery.collectAsState()&#10;&#10;    val scrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior(rememberTopAppBarState())&#10;    var searchText by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    LaunchedEffect(searchText) {&#10;        viewModel.updateSearchQuery(searchText)&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = Modifier.nestedScroll(scrollBehavior.nestedScrollConnection),&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;Control de Stock&quot;,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis,&#10;                        color = Blanco,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onDismiss) {&#10;                        Icon(&#10;                            Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Volver&quot;,&#10;                            tint = Blanco&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = AzulNexo,&#10;                    titleContentColor = Blanco,&#10;                    navigationIconContentColor = Blanco&#10;                ),&#10;                scrollBehavior = scrollBehavior&#10;            )&#10;        },&#10;        containerColor = GrisClaro&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;        ) {&#10;            // Campo de búsqueda con estilo consistente&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                shape = BordeSuave,&#10;                colors = CardDefaults.cardColors(containerColor = Blanco),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = searchText,&#10;                    onValueChange = { searchText = it },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(8.dp),&#10;                    placeholder = {&#10;                        Text(&#10;                            &quot;Buscar por código o descripción...&quot;,&#10;                            color = TextoGrisOscuro.copy(alpha = 0.6f)&#10;                        )&#10;                    },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            Icons.Default.Search,&#10;                            contentDescription = &quot;Buscar&quot;,&#10;                            tint = AzulNexo&#10;                        )&#10;                    },&#10;                    singleLine = true,&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = AzulNexo,&#10;                        unfocusedBorderColor = GrisClaro,&#10;                        focusedTextColor = TextoGrisOscuro,&#10;                        unfocusedTextColor = TextoGrisOscuro&#10;                    ),&#10;                    shape = BordeSuave&#10;                )&#10;            }&#10;&#10;            // Lista de productos con estilos consistentes&#10;            if (filteredProducts.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Card(&#10;                        modifier = Modifier.padding(24.dp),&#10;                        colors = CardDefaults.cardColors(containerColor = Blanco),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;                        shape = BordeSuave&#10;                    ) {&#10;                        Text(&#10;                            text = if (searchQuery.isBlank()) {&#10;                                &quot;No hay productos con stock para mostrar&quot;&#10;                            } else {&#10;                                &quot;No se encontraron productos que coincidan con '$searchQuery'&quot;&#10;                            },&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = TextoGrisOscuro,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(24.dp)&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(&#10;                        items = filteredProducts,&#10;                        key = { it.productoId }&#10;                    ) { producto -&gt;&#10;                        ProductoStockCard(producto = producto)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProductoStockCard(&#10;    producto: ProductoConStockCompleto,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 3.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Blanco),&#10;        shape = BordeSuave&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(12.dp) // Reducido de 16dp a 12dp&#10;        ) {&#10;            // Código y descripción del producto en una sola fila&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = producto.codigo ?: &quot;Sin código&quot;,&#10;                        style = MaterialTheme.typography.labelSmall, // Reducido de labelMedium&#10;                        color = AzulNexo,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = producto.descripcion ?: &quot;Sin descripción&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium, // Reducido de bodyLarge&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = TextoGrisOscuro,&#10;                        maxLines = 1, // Reducido a 1 línea&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;&#10;                // Información de stock en una fila horizontal compacta al lado&#10;                Row(&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp) // Espaciado reducido&#10;                ) {&#10;                    CompactStockChip(&#10;                        label = &quot;Act&quot;,&#10;                        value = &quot;${producto.stockActual?.toInt() ?: 0}&quot;,&#10;                        backgroundColor = getStockBackgroundColor(&#10;                            stockActual = producto.stockActual ?: 0.0,&#10;                            stockMinimo = producto.stockMinimo.toDouble()&#10;                        ),&#10;                        textColor = getStockTextColor(&#10;                            stockActual = producto.stockActual ?: 0.0,&#10;                            stockMinimo = producto.stockMinimo.toDouble()&#10;                        )&#10;                    )&#10;&#10;                    CompactStockChip(&#10;                        label = &quot;Min&quot;,&#10;                        value = &quot;${producto.stockMinimo}&quot;,&#10;                        backgroundColor = AzulNexo.copy(alpha = 0.1f),&#10;                        textColor = AzulNexo&#10;                    )&#10;&#10;                    CompactStockChip(&#10;                        label = &quot;Ped&quot;,&#10;                        value = &quot;${producto.stockPedido}&quot;,&#10;                        backgroundColor = GrisClaro,&#10;                        textColor = TextoGrisOscuro&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CompactStockChip(&#10;    label: String,&#10;    value: String,&#10;    backgroundColor: Color,&#10;    textColor: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Surface(&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(6.dp), // Más pequeño&#10;        color = backgroundColor&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp) // Padding muy reducido&#10;        ) {&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.labelSmall.copy(fontSize = MaterialTheme.typography.labelSmall.fontSize * 0.8f), // Reducido&#10;                color = textColor.copy(alpha = 0.8f),&#10;                textAlign = TextAlign.Center,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.titleSmall, // Reducido de titleLarge&#10;                fontWeight = FontWeight.Bold,&#10;                color = textColor,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun getStockBackgroundColor(stockActual: Double, stockMinimo: Double): Color {&#10;    return when {&#10;        stockActual &lt;= 0 -&gt; RojoError.copy(alpha = 0.15f)&#10;        stockActual &lt;= stockMinimo -&gt; Color(0xFFFF9800).copy(alpha = 0.15f) // Naranja suave&#10;        else -&gt; Color(0xFF4CAF50).copy(alpha = 0.15f) // Verde suave&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun getStockTextColor(stockActual: Double, stockMinimo: Double): Color {&#10;    return when {&#10;        stockActual &lt;= 0 -&gt; RojoError&#10;        stockActual &lt;= stockMinimo -&gt; Color(0xFFE65100) // Naranja oscuro&#10;        else -&gt; Color(0xFF2E7D32) // Verde oscuro&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.nestedscroll.nestedScroll&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStockCompleto&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.StockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.ui.theme.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun StockScreen(&#10;    viewModel: StockViewModel = viewModel(),&#10;    onDismiss: () -&gt; Unit = {&#10;&#10;&#10;&#10;    }&#10;) {&#10;    val filteredProducts by viewModel.filteredProducts.collectAsState()&#10;    val searchQuery by viewModel.searchQuery.collectAsState()&#10;&#10;    val scrollBehavior = TopAppBarDefaults.enterAlwaysScrollBehavior(rememberTopAppBarState())&#10;    var searchText by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    LaunchedEffect(searchText) {&#10;        viewModel.updateSearchQuery(searchText)&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = Modifier.nestedScroll(scrollBehavior.nestedScrollConnection),&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;Control de Stock&quot;,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis,&#10;                        color = Blanco,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onDismiss) {&#10;                        Icon(&#10;                            Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Volver&quot;,&#10;                            tint = Blanco&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = AzulNexo,&#10;                    titleContentColor = Blanco,&#10;                    navigationIconContentColor = Blanco&#10;                ),&#10;                scrollBehavior = scrollBehavior&#10;            )&#10;        },&#10;        containerColor = GrisClaro&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;        ) {&#10;            // Campo de búsqueda con estilo consistente&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                shape = BordeSuave,&#10;                colors = CardDefaults.cardColors(containerColor = Blanco),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = searchText,&#10;                    onValueChange = { searchText = it },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(8.dp),&#10;                    placeholder = {&#10;                        Text(&#10;                            &quot;Buscar por código o descripción...&quot;,&#10;                            color = TextoGrisOscuro.copy(alpha = 0.6f)&#10;                        )&#10;                    },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            Icons.Default.Search,&#10;                            contentDescription = &quot;Buscar&quot;,&#10;                            tint = AzulNexo&#10;                        )&#10;                    },&#10;                    singleLine = true,&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = AzulNexo,&#10;                        unfocusedBorderColor = GrisClaro,&#10;                        focusedTextColor = TextoGrisOscuro,&#10;                        unfocusedTextColor = TextoGrisOscuro&#10;                    ),&#10;                    shape = BordeSuave&#10;                )&#10;            }&#10;&#10;            // Lista de productos con estilos consistentes&#10;            if (filteredProducts.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Card(&#10;                        modifier = Modifier.padding(24.dp),&#10;                        colors = CardDefaults.cardColors(containerColor = Blanco),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;                        shape = BordeSuave&#10;                    ) {&#10;                        Text(&#10;                            text = if (searchQuery.isBlank()) {&#10;                                &quot;No hay productos con stock para mostrar&quot;&#10;                            } else {&#10;                                &quot;No se encontraron productos que coincidan con '$searchQuery'&quot;&#10;                            },&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = TextoGrisOscuro,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(24.dp)&#10;                        )&#10;                    }&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(&#10;                        items = filteredProducts,&#10;                        key = { it.productoId }&#10;                    ) { producto -&gt;&#10;                        ProductoStockCard(producto = producto)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ProductoStockCard(&#10;    producto: ProductoConStockCompleto,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 3.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Blanco),&#10;        shape = BordeSuave&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Información del producto a la izquierda&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = producto.codigo ?: &quot;Sin código&quot;,&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = AzulNexo,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = producto.descripcion ?: &quot;Sin descripción&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = TextoGrisOscuro,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis,&#10;                    modifier = Modifier.padding(top = 2.dp)&#10;                )&#10;                &#10;                // Stock mínimo y de pedido como texto simple&#10;                Row(&#10;                    modifier = Modifier.padding(top = 4.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Mín: ${producto.stockMinimo}&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = TextoGrisOscuro.copy(alpha = 0.7f)&#10;                    )&#10;                    Text(&#10;                        text = &quot;Ped: ${producto.stockPedido}&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = TextoGrisOscuro.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;            }&#10;            &#10;            // Solo el stock actual con recuadro a la derecha&#10;            Surface(&#10;                shape = RoundedCornerShape(8.dp),&#10;                color = getStockBackgroundColor(&#10;                    stockActual = producto.stockActual ?: 0.0,&#10;                    stockMinimo = producto.stockMinimo.toDouble()&#10;                )&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Stock&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = getStockTextColor(&#10;                            stockActual = producto.stockActual ?: 0.0,&#10;                            stockMinimo = producto.stockMinimo.toDouble()&#10;                        ).copy(alpha = 0.8f),&#10;                        textAlign = TextAlign.Center,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Text(&#10;                        text = &quot;${producto.stockActual?.toInt() ?: 0}&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = getStockTextColor(&#10;                            stockActual = producto.stockActual ?: 0.0,&#10;                            stockMinimo = producto.stockMinimo.toDouble()&#10;                        ),&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun getStockBackgroundColor(stockActual: Double, stockMinimo: Double): Color {&#10;    return when {&#10;        stockActual &lt;= 0 -&gt; RojoError.copy(alpha = 0.15f)&#10;        stockActual &lt;= stockMinimo -&gt; Color(0xFFFF9800).copy(alpha = 0.15f) // Naranja suave&#10;        else -&gt; Color(0xFF4CAF50).copy(alpha = 0.15f) // Verde suave&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun getStockTextColor(stockActual: Double, stockMinimo: Double): Color {&#10;    return when {&#10;        stockActual &lt;= 0 -&gt; RojoError&#10;        stockActual &lt;= stockMinimo -&gt; Color(0xFFE65100) // Naranja oscuro&#10;        else -&gt; Color(0xFF2E7D32) // Verde oscuro&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>