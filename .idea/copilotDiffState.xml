<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/ProductoStockViewModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ProductoStockViewModel.java" />
              <option name="updatedContent" value="import androidx.lifecycle.LiveData;&#10;import androidx.lifecycle.MutableLiveData;&#10;import androidx.lifecycle.ViewModel;&#10;&#10;import java.util.List;&#10;&#10;public class ProductoStockViewModel extends ViewModel {&#10;&#10;    private final MutableLiveData&lt;List&lt;ProductoStock&gt;&gt; productosStock = new MutableLiveData&lt;&gt;();&#10;&#10;    public LiveData&lt;List&lt;ProductoStock&gt;&gt; getProductosStock() {&#10;        return productosStock;&#10;    }&#10;&#10;    public void cargarProductosStock() {&#10;        // Aquí se debe implementar la lógica para cargar los datos de la tabla stock_productos&#10;        // y actualizar el valor de productosStock con los datos obtenidos.&#10;&#10;        // Ejemplo de datos simulados:&#10;        List&lt;ProductoStock&gt; datosSimulados = List.of(&#10;            new ProductoStock(1, &quot;Producto A&quot;, 10),&#10;            new ProductoStock(2, &quot;Producto B&quot;, 5),&#10;            new ProductoStock(3, &quot;Producto C&quot;, 20)&#10;        );&#10;&#10;        productosStock.setValue(datosSimulados);&#10;    }&#10;&#10;    public static class ProductoStock {&#10;        private final int productoId;&#10;        private final String nombre;&#10;        private final int stock;&#10;&#10;        public ProductoStock(int productoId, String nombre, int stock) {&#10;            this.productoId = productoId;&#10;            this.nombre = nombre;&#10;            this.stock = stock;&#10;        }&#10;&#10;        public int getProductoId() {&#10;            return productoId;&#10;        }&#10;&#10;        public String getNombre() {&#10;            return nombre;&#10;        }&#10;&#10;        public int getStock() {&#10;            return stock;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscal posv2/screens/StockScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscal posv2/screens/StockScreen.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Inventory&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Warning&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.paging.compose.collectAsLazyPagingItems&#10;import androidx.paging.compose.items&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entities.ProductoEntity&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.StockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.ui.theme.NexoTheme&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun StockScreen(&#10;    viewModel: StockViewModel,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    val pagedProductos = viewModel.pagedProductos.collectAsLazyPagingItems()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Control de Stock&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            &#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cerrar&quot;)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Search bar&#10;        OutlinedTextField(&#10;            value = searchQuery,&#10;            onValueChange = { query -&gt;&#10;                searchQuery = query&#10;                viewModel.search(query)&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            placeholder = { Text(&quot;Buscar producto...&quot;) },&#10;            leadingIcon = {&#10;                Icon(Icons.Default.Search, contentDescription = &quot;Buscar&quot;)&#10;            },&#10;            shape = RoundedCornerShape(12.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Header de la tabla&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer&#10;            )&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(12.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;Producto&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(3f)&#10;                )&#10;                Text(&#10;                    text = &quot;Stock\nActual&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f),&#10;                    fontSize = 12.sp&#10;                )&#10;                Text(&#10;                    text = &quot;Stock\nMínimo&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f),&#10;                    fontSize = 12.sp&#10;                )&#10;                Text(&#10;                    text = &quot;Stock\nPedido&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.weight(1f),&#10;                    fontSize = 12.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Lista de productos&#10;        LazyColumn(&#10;            verticalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            items(pagedProductos) { producto -&gt;&#10;                producto?.let {&#10;                    StockItemCard(producto = it)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StockItemCard(producto: ProductoEntity) {&#10;    val isLowStock = producto.stock &lt; producto.stockMinimo&#10;    &#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isLowStock) {&#10;                MaterialTheme.colorScheme.errorContainer.copy(alpha = 0.1f)&#10;            } else {&#10;                MaterialTheme.colorScheme.surface&#10;            }&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Información del producto&#10;            Column(&#10;                modifier = Modifier.weight(3f)&#10;            ) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    if (isLowStock) {&#10;                        Icon(&#10;                            Icons.Default.Warning,&#10;                            contentDescription = &quot;Stock bajo&quot;,&#10;                            tint = MaterialTheme.colorScheme.error,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                    }&#10;                    &#10;                    Text(&#10;                        text = producto.descripcion ?: &quot;Sin descripción&quot;,&#10;                        fontWeight = FontWeight.Medium,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;                &#10;                Text(&#10;                    text = &quot;Código: ${producto.codigo ?: &quot;N/A&quot;}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;&#10;            // Stock actual&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;${producto.stock}&quot;,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = if (isLowStock) {&#10;                        MaterialTheme.colorScheme.error&#10;                    } else {&#10;                        MaterialTheme.colorScheme.primary&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Stock mínimo&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;${producto.stockMinimo}&quot;,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f)&#10;                )&#10;            }&#10;&#10;            // Stock pedido&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;${producto.stockPedido}&quot;,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/ProductosConStockActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/ProductosConStockActivity.kt" />
              <option name="originalContent" value="package ar.com.nexofiscal.nexofiscalposv2&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.ViewModelProvider&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStock&#10;import ar.com.nexofiscal.nexofiscalposv2.db.repository.ProductoRepository&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ProductosConStockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ProductosConStockViewModelFactory&#10;&#10;&#10;class ProductosConStockActivity : ComponentActivity() {&#10;&#10;    private lateinit var viewModel: ProductosConStockViewModel&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Inicializar base de datos y repositorio&#10;        val database = AppDatabase.getInstance(this)&#10;        val repository = ProductoRepository(database.productoDao())&#10;&#10;        // Crear ViewModel&#10;        val factory = ProductosConStockViewModelFactory(repository)&#10;        viewModel = ViewModelProvider(this, factory)[ProductosConStockViewModel::class.java]&#10;&#10;        setContent {&#10;            NexofiscalposV2Theme {&#10;                ProductosConStockScreen(&#10;                    viewModel = viewModel,&#10;                    onBackClick = { finish() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProductosConStockScreen(&#10;    viewModel: ProductosConStockViewModel,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    val productosConStock by viewModel.productosConStock.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val searchQuery by viewModel.searchQuery.collectAsState()&#10;&#10;    var searchText by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFFF5F5F5))&#10;    ) {&#10;        // TopAppBar&#10;        TopAppBar(&#10;            title = { Text(&quot;Productos con Stock&quot;) },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(Icons.Default.ArrowBack, contentDescription = &quot;Volver&quot;)&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                titleContentColor = Color.White,&#10;                navigationIconContentColor = Color.White&#10;            )&#10;        )&#10;&#10;        // Barra de búsqueda&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchText,&#10;                onValueChange = {&#10;                    searchText = it&#10;                    viewModel.buscarProductos(it)&#10;                },&#10;                label = { Text(&quot;Buscar productos...&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = &quot;Buscar&quot;)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                singleLine = true&#10;            )&#10;        }&#10;&#10;        // Contenido principal&#10;        if (isLoading) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentPadding = PaddingValues(horizontal = 16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(productosConStock) { productoConStock -&gt;&#10;                    ProductoConStockItem(productoConStock = productoConStock)&#10;                }&#10;&#10;                if (productosConStock.isEmpty()) {&#10;                    item {&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 32.dp),&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                        ) {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(32.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = if (searchQuery.isNotBlank())&#10;                                        &quot;No se encontraron productos que coincidan con la búsqueda&quot;&#10;                                    else&#10;                                        &quot;No hay productos disponibles&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    color = Color.Gray&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProductoConStockItem(productoConStock: ProductoConStock) {&#10;    val producto = productoConStock.producto&#10;    val stock = productoConStock.stockProducto&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            // Código del producto&#10;            if (!producto.codigo.isNullOrBlank()) {&#10;                Text(&#10;                    text = &quot;Código: ${producto.codigo}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;            }&#10;&#10;            // Descripción del producto&#10;            Text(&#10;                text = producto.descripcion ?: &quot;Sin descripción&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Información de stock&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Stock actual&#10;                val stockActual = stock?.stockActual ?: 0.0&#10;                val controlaStock = stock?.controlaStock ?: false&#10;&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Stock Actual&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                    Text(&#10;                        text = if (controlaStock) stockActual.toString() else &quot;No controlado&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = when {&#10;                            !controlaStock -&gt; Color.Gray&#10;                            stockActual &gt; (stock?.puntoPedido ?: 0.0) -&gt; Color(0xFF4CAF50)&#10;                            stockActual &gt; 0 -&gt; Color(0xFFFF9800)&#10;                            else -&gt; Color(0xFFF44336)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Punto de pedido&#10;                if (controlaStock) {&#10;                    Column(horizontalAlignment = Alignment.End) {&#10;                        Text(&#10;                            text = &quot;Punto de Pedido&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color.Gray&#10;                        )&#10;                        Text(&#10;                            text = (stock?.puntoPedido ?: 0.0).toString(),&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Stock inicial si existe&#10;            if (stock?.stockInicial != null &amp;&amp; stock.stockInicial != 0.0) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Stock Inicial: ${stock.stockInicial}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;&#10;            // Precios&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Precio 1&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                    Text(&#10;                        text = &quot;$${String.format(&quot;%.2f&quot;, producto.precio1)}&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;&#10;                if (producto.precio2 &gt; 0) {&#10;                    Column(horizontalAlignment = Alignment.End) {&#10;                        Text(&#10;                            text = &quot;Precio 2&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color.Gray&#10;                        )&#10;                        Text(&#10;                            text = &quot;$${String.format(&quot;%.2f&quot;, producto.precio2)}&quot;,&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Código de barras si existe&#10;            if (!producto.codigoBarra.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Código de Barras: ${producto.codigoBarra}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.ViewModelProvider&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStock&#10;import ar.com.nexofiscal.nexofiscalposv2.db.repository.ProductoRepository&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ProductosConStockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.ProductosConStockViewModelFactory&#10;&#10;&#10;class ProductosConStockActivity : ComponentActivity() {&#10;&#10;    private lateinit var viewModel: ProductosConStockViewModel&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Inicializar base de datos y repositorio&#10;        val database = AppDatabase.getInstance(this)&#10;        val repository = ProductoRepository(database.productoDao())&#10;&#10;        // Crear ViewModel&#10;        val factory = ProductosConStockViewModelFactory(repository)&#10;        viewModel = ViewModelProvider(this, factory)[ProductosConStockViewModel::class.java]&#10;&#10;        setContent {&#10;            NexofiscalposV2Theme {&#10;                ProductosConStockScreen(&#10;                    viewModel = viewModel,&#10;                    onBackClick = { finish() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProductosConStockScreen(&#10;    viewModel: ProductosConStockViewModel,&#10;    onBackClick: () -&gt; Unit&#10;) {&#10;    val productosConStock by viewModel.productosConStock.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val searchQuery by viewModel.searchQuery.collectAsState()&#10;&#10;    var searchText by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFFF5F5F5))&#10;    ) {&#10;        // TopAppBar&#10;        TopAppBar(&#10;            title = { Text(&quot;Productos con Stock&quot;) },&#10;            navigationIcon = {&#10;                IconButton(onClick = onBackClick) {&#10;                    Icon(Icons.Default.ArrowBack, contentDescription = &quot;Volver&quot;)&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                titleContentColor = Color.White,&#10;                navigationIconContentColor = Color.White&#10;            )&#10;        )&#10;&#10;        // Barra de búsqueda&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchText,&#10;                onValueChange = {&#10;                    searchText = it&#10;                    viewModel.buscarProductos(it)&#10;                },&#10;                label = { Text(&quot;Buscar productos...&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = &quot;Buscar&quot;)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                singleLine = true&#10;            )&#10;        }&#10;&#10;        // Contenido principal&#10;        if (isLoading) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentPadding = PaddingValues(horizontal = 16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(productosConStock) { productoConStock -&gt;&#10;                    ProductoConStockItem(productoConStock = productoConStock)&#10;                }&#10;&#10;                if (productosConStock.isEmpty()) {&#10;                    item {&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 32.dp),&#10;                            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;                        ) {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(32.dp),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = if (searchQuery.isNotBlank())&#10;                                        &quot;No se encontraron productos que coincidan con la búsqueda&quot;&#10;                                    else&#10;                                        &quot;No hay productos disponibles&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    color = Color.Gray&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProductoConStockItem(productoConStock: ProductoConStock) {&#10;    val producto = productoConStock.producto&#10;    val stock = productoConStock.stockProducto&#10;&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        shape = RoundedCornerShape(8.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            // Código del producto&#10;            if (!producto.codigo.isNullOrBlank()) {&#10;                Text(&#10;                    text = &quot;Código: ${producto.codigo}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;            }&#10;&#10;            // Descripción del producto&#10;            Text(&#10;                text = producto.descripcion ?: &quot;Sin descripción&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Información de stock&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Stock actual&#10;                val stockActual = stock?.stockActual ?: 0.0&#10;                val controlaStock = stock?.controlaStock ?: false&#10;&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Stock Actual&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                    Text(&#10;                        text = if (controlaStock) stockActual.toString() else &quot;No controlado&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = when {&#10;                            !controlaStock -&gt; Color.Gray&#10;                            stockActual &gt; (stock?.puntoPedido ?: 0.0) -&gt; Color(0xFF4CAF50)&#10;                            stockActual &gt; 0 -&gt; Color(0xFFFF9800)&#10;                            else -&gt; Color(0xFFF44336)&#10;                        }&#10;                    )&#10;                }&#10;&#10;                // Punto de pedido&#10;                if (controlaStock) {&#10;                    Column(horizontalAlignment = Alignment.End) {&#10;                        Text(&#10;                            text = &quot;Punto de Pedido&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color.Gray&#10;                        )&#10;                        Text(&#10;                            text = (stock?.puntoPedido ?: 0.0).toString(),&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Stock inicial si existe&#10;            if (stock?.stockInicial != null &amp;&amp; stock.stockInicial != 0.0) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Stock Inicial: ${stock.stockInicial}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;&#10;            // Precios&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = &quot;Precio 1&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                    Text(&#10;                        text = &quot;$${String.format(&quot;%.2f&quot;, producto.precio1)}&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;&#10;                if (producto.precio2 &gt; 0) {&#10;                    Column(horizontalAlignment = Alignment.End) {&#10;                        Text(&#10;                            text = &quot;Precio 2&quot;,&#10;                            fontSize = 12.sp,&#10;                            color = Color.Gray&#10;                        )&#10;                        Text(&#10;                            text = &quot;$${String.format(&quot;%.2f&quot;, producto.precio2)}&quot;,&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Código de barras si existe&#10;            if (!producto.codigoBarra.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Código de Barras: ${producto.codigoBarra}&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/StockActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/StockActivity.kt" />
              <option name="originalContent" value="package ar.com.nexofiscal.nexofiscalposv2&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.ui.Modifier&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.StockViewModel&#10;import ar.com.nexofiscal.nexofiscalposv2.screens.StockScreen&#10;import ar.com.nexofiscal.nexofiscalposv2.ui.theme.NexoFiscalPOSV2Theme&#10;&#10;class StockActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            NexoFiscalPOSV2Theme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    val viewModel: StockViewModel = viewModel()&#10;                    StockScreen(viewModel = viewModel)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2&#13;&#10;&#13;&#10;import android.os.Bundle&#13;&#10;import androidx.activity.ComponentActivity&#13;&#10;import androidx.activity.compose.setContent&#13;&#10;import androidx.activity.compose.BackHandler&#13;&#10;import androidx.compose.foundation.layout.fillMaxSize&#13;&#10;import androidx.compose.material3.MaterialTheme&#13;&#10;import androidx.compose.material3.Surface&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.viewmodel.StockViewModel&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.screens.StockScreen&#13;&#10;import ar.com.nexofiscal.nexofiscalposv2.ui.theme.NexoFiscalPOSV2Theme&#13;&#10;&#13;&#10;class StockActivity : ComponentActivity() {&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;        setContent {&#13;&#10;            NexoFiscalPOSV2Theme {&#13;&#10;                Surface(&#13;&#10;                    modifier = Modifier.fillMaxSize(),&#13;&#10;                    color = MaterialTheme.colorScheme.background&#13;&#10;                ) {&#13;&#10;                    val viewModel: StockViewModel = viewModel()&#13;&#10;&#13;&#10;                    // Manejar el botón de volver tanto del sistema como de la UI&#13;&#10;                    BackHandler {&#13;&#10;                        finish()&#13;&#10;                    }&#13;&#10;&#13;&#10;                    StockScreen(&#13;&#10;                        viewModel = viewModel,&#13;&#10;                        onDismiss = { finish() } // Cerrar la actividad cuando se presiona volver&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductoStockDetalleViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductoStockDetalleViewModel.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.viewmodel&#10;&#10;import android.app.Application&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.paging.Pager&#10;import androidx.paging.PagingConfig&#10;import androidx.paging.PagingData&#10;import androidx.paging.cachedIn&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStockDetalle&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.flatMapLatest&#10;&#10;class ProductoStockDetalleViewModel(application: Application) : AndroidViewModel(application) {&#10;    &#10;    private val database = AppDatabase.getDatabase(application)&#10;    private val productoDao = database.productoDao()&#10;    &#10;    private val searchQuery = MutableStateFlow(&quot;&quot;)&#10;    &#10;    val pagedProductosConStock: Flow&lt;PagingData&lt;ProductoConStockDetalle&gt;&gt; = searchQuery&#10;        .flatMapLatest { query -&gt;&#10;            Pager(&#10;                config = PagingConfig(&#10;                    pageSize = 20,&#10;                    enablePlaceholders = false&#10;                ),&#10;                pagingSourceFactory = {&#10;                    if (query.isEmpty()) {&#10;                        productoDao.getProductosConStockDetallePaging()&#10;                    } else {&#10;                        productoDao.searchProductosConStockDetallePaging(&quot;%$query%&quot;)&#10;                    }&#10;                }&#10;            ).flow&#10;        }.cachedIn(viewModelScope)&#10;    &#10;    fun search(query: String) {&#10;        searchQuery.value = query&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductoStockViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductoStockViewModel.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.viewmodel&#10;&#10;import android.app.Application&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.paging.Pager&#10;import androidx.paging.PagingConfig&#10;import androidx.paging.PagingData&#10;import androidx.paging.cachedIn&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStock&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.flatMapLatest&#10;&#10;class ProductoStockViewModel(application: Application) : AndroidViewModel(application) {&#10;    &#10;    private val database = AppDatabase.getDatabase(application)&#10;    private val productoDao = database.productoDao()&#10;    &#10;    private val searchQuery = MutableStateFlow(&quot;&quot;)&#10;    &#10;    val pagedProductosConStock: Flow&lt;PagingData&lt;ProductoConStock&gt;&gt; = searchQuery&#10;        .flatMapLatest { query -&gt;&#10;            Pager(&#10;                config = PagingConfig(&#10;                    pageSize = 20,&#10;                    enablePlaceholders = false&#10;                ),&#10;                pagingSourceFactory = {&#10;                    if (query.isEmpty()) {&#10;                        productoDao.getPagingSourceWithStock()&#10;                    } else {&#10;                        productoDao.searchPagingSourceWithStock(&quot;%$query%&quot;)&#10;                    }&#10;                }&#10;            ).flow&#10;        }.cachedIn(viewModelScope)&#10;    &#10;    fun search(query: String) {&#10;        searchQuery.value = query&#10;    }&#10;    &#10;    fun clearSearch() {&#10;        searchQuery.value = &quot;&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductosConStockViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/db/viewmodel/ProductosConStockViewModel.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.db.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewModelScope&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ProductoConStock&#10;import ar.com.nexofiscal.nexofiscalposv2.db.repository.ProductoRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class ProductosConStockViewModel(private val repository: ProductoRepository) : ViewModel() {&#10;&#10;    private val _productosConStock = MutableStateFlow&lt;List&lt;ProductoConStock&gt;&gt;(emptyList())&#10;    val productosConStock: StateFlow&lt;List&lt;ProductoConStock&gt;&gt; = _productosConStock.asStateFlow()&#10;&#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;&#10;    private val _searchQuery = MutableStateFlow(&quot;&quot;)&#10;    val searchQuery: StateFlow&lt;String&gt; = _searchQuery.asStateFlow()&#10;&#10;    init {&#10;        cargarProductosConStock()&#10;    }&#10;&#10;    private fun cargarProductosConStock() {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            repository.getProductosConStock().collect { productos -&gt;&#10;                _productosConStock.value = filtrarProductos(productos, _searchQuery.value)&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun buscarProductos(query: String) {&#10;        _searchQuery.value = query&#10;        val productosFiltrados = filtrarProductos(_productosConStock.value, query)&#10;        _productosConStock.value = productosFiltrados&#10;    }&#10;&#10;    private fun filtrarProductos(productos: List&lt;ProductoConStock&gt;, query: String): List&lt;ProductoConStock&gt; {&#10;        if (query.isBlank()) return productos&#10;        &#10;        val queryLower = query.lowercase()&#10;        return productos.filter { productoConStock -&gt;&#10;            val producto = productoConStock.producto&#10;            producto.descripcion?.lowercase()?.contains(queryLower) == true ||&#10;            producto.codigo?.lowercase()?.contains(queryLower) == true ||&#10;            producto.codigoBarra?.lowercase()?.contains(queryLower) == true ||&#10;            producto.codigoBarra2?.lowercase()?.contains(queryLower) == true&#10;        }&#10;    }&#10;&#10;    fun limpiarBusqueda() {&#10;        _searchQuery.value = &quot;&quot;&#10;        cargarProductosConStock()&#10;    }&#10;}&#10;&#10;class ProductosConStockViewModelFactory(private val repository: ProductoRepository) : ViewModelProvider.Factory {&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(ProductosConStockViewModel::class.java)) {&#10;            @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;            return ProductosConStockViewModel(repository) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/examples/StockControlExample.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/examples/StockControlExample.kt" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.examples&#10;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.ComprobanteEntity&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus&#10;import ar.com.nexofiscal.nexofiscalposv2.managers.StockMovementManager&#10;import ar.com.nexofiscal.nexofiscalposv2.models.RenglonComprobante&#10;import ar.com.nexofiscal.nexofiscalposv2.services.ComprobanteStockService&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Ejemplo de uso del sistema de control de stock&#10; */&#10;class StockControlExample(private val database: AppDatabase) {&#10;    &#10;    private val stockMovementManager = StockMovementManager(&#10;        stockActualizacionDao = database.stockActualizacionDao(),&#10;        stockProductoDao = database.stockProductoDao()&#10;    )&#10;    &#10;    private val comprobanteStockService = ComprobanteStockService(&#10;        comprobanteDao = database.comprobanteDao(),&#10;        renglonComprobanteDao = database.renglonComprobanteDao(),&#10;        stockMovementManager = stockMovementManager&#10;    )&#10;    &#10;    /**&#10;     * Ejemplo: Crear una factura que reduce el stock&#10;     */&#10;    fun ejemploCrearFactura() {&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            &#10;            // 1. Crear comprobante (factura)&#10;            val factura = ComprobanteEntity(&#10;                serverId = null,&#10;                syncStatus = SyncStatus.PENDING,&#10;                numero = 1001,&#10;                clienteId = 1,&#10;                letra = &quot;FACTURA_A&quot;,&#10;                fecha = &quot;2025-01-09&quot;,&#10;                // ... otros campos necesarios&#10;                cuotas = null,&#10;                remito = null,&#10;                persona = &quot;Cliente Ejemplo&quot;,&#10;                provinciaId = null,&#10;                fechaBaja = null,&#10;                motivoBaja = null,&#10;                hora = &quot;10:30:00&quot;,&#10;                fechaProceso = &quot;2025-01-09&quot;,&#10;                numeroFactura = 1001&#10;            )&#10;            &#10;            // 2. Crear renglones con productos&#10;            val renglones = listOf(&#10;                RenglonComprobante(&#10;                    productoId = 101,&#10;                    descripcion = &quot;Producto A&quot;,&#10;                    cantidad = 5.0,&#10;                    precio = 100.0,&#10;                    // ... otros campos del renglón&#10;                ),&#10;                RenglonComprobante(&#10;                    productoId = 102,&#10;                    descripcion = &quot;Producto B&quot;, &#10;                    cantidad = 3.0,&#10;                    precio = 150.0,&#10;                    // ... otros campos del renglón&#10;                )&#10;            )&#10;            &#10;            // 3. Verificar stock antes de crear la factura&#10;            val verificacion = comprobanteStockService.verificarStockSuficiente(&#10;                renglones = renglones,&#10;                sucursalId = 1&#10;            )&#10;            &#10;            if (!verificacion.suficiente) {&#10;                println(&quot;⚠️ Stock insuficiente:&quot;)&#10;                verificacion.productosInsuficientes.forEach { producto -&gt;&#10;                    println(&quot;- ${producto.descripcion}: necesita ${producto.cantidadSolicitada}, disponible ${producto.stockActual}&quot;)&#10;                }&#10;                return@launch&#10;            }&#10;            &#10;            // 4. Crear factura con control de stock automático&#10;            val resultado = comprobanteStockService.crearComprobanteConStock(&#10;                comprobante = factura,&#10;                renglones = renglones,&#10;                sucursalId = 1&#10;            )&#10;            &#10;            resultado.onSuccess { comprobanteId -&gt;&#10;                println(&quot;✅ Factura creada exitosamente: ID $comprobanteId&quot;)&#10;                println(&quot; Stock reducido automáticamente&quot;)&#10;            }.onFailure { error -&gt;&#10;                println(&quot;❌ Error al crear factura: ${error.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Ejemplo: Anular una factura y restituir el stock&#10;     */&#10;    fun ejemploAnularFactura(comprobanteId: Int) {&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            &#10;            val resultado = comprobanteStockService.anularComprobanteConStock(&#10;                comprobanteId = comprobanteId,&#10;                sucursalId = 1,&#10;                motivoAnulacion = &quot;Error en facturación&quot;&#10;            )&#10;            &#10;            resultado.onSuccess {&#10;                println(&quot;✅ Factura anulada exitosamente&quot;)&#10;                println(&quot; Stock restituido automáticamente&quot;)&#10;            }.onFailure { error -&gt;&#10;                println(&quot;❌ Error al anular factura: ${error.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Ejemplo: Ver historial de movimientos de un producto&#10;     */&#10;    fun ejemploVerHistorialStock(productoId: Int) {&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            &#10;            val historial = stockMovementManager.obtenerHistorialMovimientos(&#10;                productoId = productoId,&#10;                sucursalId = 1&#10;            )&#10;            &#10;            println(&quot; Historial de movimientos - Producto $productoId:&quot;)&#10;            historial.forEach { movimiento -&gt;&#10;                val tipo = if (movimiento.cantidad &gt; 0) &quot;ENTRADA&quot; else &quot;SALIDA&quot;&#10;                println(&quot;- ${movimiento.fechaCreacion}: $tipo ${Math.abs(movimiento.cantidad)} unidades&quot;)&#10;            }&#10;            &#10;            val stockTotal = historial.sumOf { it.cantidad }&#10;            println(&quot; Stock actual calculado: $stockTotal unidades&quot;)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Ejemplo: Ajuste manual de stock&#10;     */&#10;    fun ejemploAjusteStock(productoId: Int, cantidadAjuste: Double, sucursalId: Int) {&#10;        CoroutineScope(Dispatchers.IO).launch {&#10;            &#10;            val exitoso = if (cantidadAjuste &gt; 0) {&#10;                // Agregar stock&#10;                stockMovementManager.restituirStock(&#10;                    productoId = productoId,&#10;                    cantidad = cantidadAjuste,&#10;                    sucursalId = sucursalId,&#10;                    comprobanteId = 0 // Sin comprobante asociado&#10;                )&#10;            } else {&#10;                // Reducir stock&#10;                stockMovementManager.reducirStock(&#10;                    productoId = productoId,&#10;                    cantidad = Math.abs(cantidadAjuste),&#10;                    sucursalId = sucursalId,&#10;                    comprobanteId = 0,&#10;                    tipoMovimiento = StockMovementManager.MOVIMIENTO_AJUSTE&#10;                )&#10;            }&#10;            &#10;            if (exitoso) {&#10;                println(&quot;✅ Ajuste de stock realizado: $cantidadAjuste unidades&quot;)&#10;            } else {&#10;                println(&quot;❌ Error en ajuste de stock&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Uso del ejemplo en una Activity o Fragment&#10; */&#10;/*&#10;class MainActivity : ComponentActivity() {&#10;    &#10;    private lateinit var stockExample: StockControlExample&#10;    &#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        &#10;        val database = AppDatabase.getInstance(this)&#10;        stockExample = StockControlExample(database)&#10;        &#10;        // Ejemplo de uso&#10;        stockExample.ejemploCrearFactura()&#10;        &#10;        // Para anular&#10;        // stockExample.ejemploAnularFactura(comprobanteId = 123)&#10;        &#10;        // Para ver historial&#10;        // stockExample.ejemploVerHistorialStock(productoId = 101)&#10;        &#10;        // Para ajuste manual&#10;        // stockExample.ejemploAjusteStock(productoId = 101, cantidadAjuste = 10.0, sucursalId = 1)&#10;    }&#10;}&#10;*/" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/managers/StockSyncManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ar/com/nexofiscal/nexofiscalposv2/managers/StockSyncManager.kt" />
              <option name="originalContent" value="package ar.com.nexofiscal.nexofiscalposv2.managers&#10;&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.StockProductoEntity&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus&#10;import ar.com.nexofiscal.nexofiscalposv2.network.ApiClient&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;import org.json.JSONObject&#10;&#10;class StockSyncManager(private val database: AppDatabase) {&#10;&#10;    private val ENDPOINT_AGRUPACIONES = &quot;/api/stocks&quot;&#10;&#10;    suspend fun sincronizarStock(apiUrl: String, token: String, sucursalId: Int) {&#10;        withContext(Dispatchers.IO) {&#10;            val response = ApiClient.request(&#10;                url = &quot;$apiUrl$ENDPOINT_AGRUPACIONES/?sucursal_id=$sucursalId&quot;,&#10;                headers = mapOf(&quot;Authorization&quot; to &quot;Bearer $token&quot;)&#10;            )&#10;&#10;            if (response.isSuccessful) {&#10;                val responseBody = response.body&#10;                responseBody?.let {&#10;                    val json = JSONObject(it)&#10;                    val stockList = json.getJSONArray(&quot;data&quot;)&#10;&#10;                    val stockEntities = mutableListOf&lt;StockProductoEntity&gt;()&#10;&#10;                    for (i in 0 until stockList.length()) {&#10;                        val stockItem = stockList.getJSONObject(i)&#10;                        val stockEntity = StockProductoEntity(&#10;                            productoId = stockItem.getInt(&quot;producto_id&quot;),&#10;                            empresaId = stockItem.getInt(&quot;empresa_id&quot;),&#10;                            stockActual = stockItem.getDouble(&quot;stock_actual&quot;),&#10;                            sucursalId = stockItem.getInt(&quot;sucursal_id&quot;),&#10;                            syncStatus = SyncStatus.SYNCED&#10;                        )&#10;                        stockEntities.add(stockEntity)&#10;                    }&#10;&#10;                    database.stockProductoDao().insertAll(stockEntities)&#10;                }&#10;            } else {&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ar.com.nexofiscal.nexofiscalposv2.managers&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import ar.com.nexofiscal.nexofiscalposv2.db.AppDatabase&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.StockProductoEntity&#10;import ar.com.nexofiscal.nexofiscalposv2.db.entity.SyncStatus&#10;import ar.com.nexofiscal.nexofiscalposv2.db.mappers.toStockProductoEntityList&#10;import ar.com.nexofiscal.nexofiscalposv2.models.StockProducto&#10;import ar.com.nexofiscal.nexofiscalposv2.network.ApiCallback&#10;import ar.com.nexofiscal.nexofiscalposv2.network.ApiClient&#10;import ar.com.nexofiscal.nexofiscalposv2.network.HttpMethod&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import okhttp3.Headers&#10;import org.json.JSONObject&#10;&#10;object StockSyncManager {&#10;    private const val TAG = &quot;StockSyncManager&quot;&#10;    private const val ENDPOINT_STOCKS = &quot;/api/stocks&quot;&#10;&#10;    fun sincronizarStock(&#10;        context: Context,&#10;        headers: MutableMap&lt;String?, String?&gt;?,&#10;        sucursalId: Int,&#10;        callback: StockListCallback&#10;    ) {&#10;        val stockListType = object :&#10;            com.google.gson.reflect.TypeToken&lt;MutableList&lt;StockProducto?&gt;?&gt;() {}.type&#10;&#10;        ApiClient.request(&#10;            HttpMethod.GET,&#10;            &quot;$ENDPOINT_STOCKS/?sucursal_id=$sucursalId&quot;,&#10;            headers,&#10;            null,&#10;            stockListType,&#10;            object : ApiCallback&lt;MutableList&lt;StockProducto?&gt;?&gt; {&#10;                override fun onSuccess(&#10;                    statusCode: Int,&#10;                    responseHeaders: Headers?,&#10;                    stocks: MutableList&lt;StockProducto?&gt;?&#10;                ) {&#10;                    callback.onSuccess(stocks)&#10;&#10;                    stocks?.let { listaStocks -&gt;&#10;                        CoroutineScope(Dispatchers.IO).launch {&#10;                            try {&#10;                                val stockDao = AppDatabase.getInstance(context.applicationContext).stockProductoDao()&#10;                                val stockEntities = listaStocks.toStockProductoEntityList()&#10;                                stockEntities.forEach { entity -&gt;&#10;                                    stockDao.insert(entity)&#10;                                }&#10;                                Log.d(TAG, &quot;${stockEntities.size} stocks guardados/actualizados en la BD.&quot;)&#10;                            } catch (e: Exception) {&#10;                                Log.e(TAG, &quot;Error al guardar stocks en la BD: ${e.message}&quot;, e)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                override fun onError(statusCode: Int, errorMessage: String?) {&#10;                    Log.e(&#10;                        TAG,&#10;                        &quot;Error al obtener stocks. Código: $statusCode, Mensaje: $errorMessage&quot;&#10;                    )&#10;                    callback.onError(errorMessage)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    interface StockListCallback {&#10;        fun onSuccess(stocks: MutableList&lt;StockProducto?&gt;?)&#10;        fun onError(errorMessage: String?)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>